{
  "emr-block-public-access": {
    "id": "EMR_BLOCK_PUBLIC_ACCESS",
    "default_name": "emr-block-public-access",
    "description": "Checks if an account with Amazon EMR has block public access settings enabled. The rule is NON_COMPLIANT if BlockPublicSecurityGroupRules is false, or if true, ports other than Port 22 are listed in PermittedPublicSecurityGroupRuleRanges.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": []
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "EMR",
      "BLOCK",
      "PUBLIC",
      "ACCESS",
      "PORT",
      "PERIODIC"
    ]
  },
  "fsx-openzfs-copy-tags-enabled": {
    "id": "FSX_OPENZFS_COPY_TAGS_ENABLED",
    "default_name": "fsx-openzfs-copy-tags-enabled",
    "description": "Checks if the Amazon FSx for OpenZFS file systems are configured to copy tags to backups and volumes. The rule is NON_COMPLIANT if FSx for OpenZFS file systems are not configured to copy tags to backups and volumes.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": []
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "FSX",
      "OPENZFS",
      "COPY",
      "TAGS",
      "BACKUP",
      "VOLUME",
      "FILE",
      "SYSTEM",
      "PERIODIC"
    ]
  },
  "dynamodb-table-deletion-protection-enabled": {
    "id": "DYNAMODB_TABLE_DELETION_PROTECTION_ENABLED",
    "default_name": "dynamodb-table-deletion-protection-enabled",
    "description": "Checks if an Amazon DynamoDB table have deletion protection set to enabled. The rule is NON_COMPLIANT if the table have deletion protection set to disabled.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::DynamoDB::Table"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "DYNAMODB",
      "TABLE",
      "DELETION",
      "PROTECTION",
      "ENABLED"
    ]
  },
  "s3-access-point-public-access-blocks": {
    "id": "S3_ACCESS_POINT_PUBLIC_ACCESS_BLOCKS",
    "default_name": "s3-access-point-public-access-blocks",
    "description": "Checks if Amazon S3 access points have block public access settings enabled. The rule is NON_COMPLIANT if block public access settings are not enabled for S3 access points.",
    "parameters": {
      "required": {},
      "optional": {
        "excludedAccessPoints": {
          "type": "CSV",
          "description": "Comma-separated list of names for allowed public Amazon S3 access points."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::S3::AccessPoint"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "S3",
      "ACCESS",
      "POINT",
      "PUBLIC",
      "BLOCK"
    ]
  },
  "s3-bucket-mfa-delete-enabled": {
    "id": "S3_BUCKET_MFA_DELETE_ENABLED",
    "default_name": "s3-bucket-mfa-delete-enabled",
    "description": "Checks if MFA Delete is enabled in the Amazon Simple Storage Service (Amazon S3) bucket versioning configuration. The rule is NON_COMPLIANT if MFA Delete is not enabled.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::S3::Bucket"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "S3",
      "BUCKET",
      "VERSIONING",
      "MFA",
      "DELETE"
    ]
  },
  "acm-pca-root-ca-disabled": {
    "id": "ACM_PCA_ROOT_CA_DISABLED",
    "default_name": "acm-pca-root-ca-disabled",
    "description": "Checks if AWS Private Certificate Authority (AWS Private CA) has a root CA that is disabled. The rule is NON_COMPLIANT for root CAs with status that is not DISABLED.",
    "parameters": {
      "required": {},
      "optional": {
        "exemptedCAArns": {
          "type": "CSV",
          "description": "Comma-separated list of Amazon Resource Names (ARN) of CA's that can be enabled. This value can be supplied for other CAs, like specific root CAs or intermediate CA's that can be enabled."
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": [
          "AWS::ACMPCA::CertificateAuthority"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "ACM",
      "PCA",
      "AUTHORITY",
      "CERTIFICATE",
      "PRIVATE",
      "PERIODIC",
      "ROOT"
    ]
  },
  "ec2-client-vpn-connection-log-enabled": {
    "id": "EC2_CLIENT_VPN_CONNECTION_LOG_ENABLED",
    "default_name": "ec2-client-vpn-connection-log-enabled",
    "description": "Checks if AWS Client VPN endpoint has client connection logging enabled. The rule is NON_COMPLIANT if 'Configuration.ConnectionLogOptions.Enabled' is set to false.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::ClientVpnEndpoint"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "EC2",
      "CLIENT",
      "VPN",
      "CONNECTION",
      "LOG",
      "ENDPOINT"
    ]
  },
  "s3-access-point-in-vpc-only": {
    "id": "S3_ACCESS_POINT_IN_VPC_ONLY",
    "default_name": "s3-access-point-in-vpc-only",
    "description": "Checks if an Amazon S3 access point does not allow access from the internet (NetworkOrigin is VPC). The rule is NON_COMPLIANT if NetworkOrigin is Internet.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::S3::AccessPoint"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "S3",
      "ACCESS",
      "POINT",
      "VPC"
    ]
  },
  "fsx-windows-audit-log-configured": {
    "id": "FSX_WINDOWS_AUDIT_LOG_CONFIGURED",
    "default_name": "fsx-windows-audit-log-configured",
    "description": "Checks if the Amazon FSx for Windows File Server file systems have file access auditing enabled. The rule is NON_COMPLIANT if the FSx for Windows File Server file systems do not have file access auditing enabled.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": []
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "FSX",
      "WINDOWS",
      "LOGS",
      "AUDIT",
      "PERIODIC",
      "FILE",
      "SYSTEMS"
    ]
  },
  "eks-cluster-log-enabled": {
    "id": "EKS_CLUSTER_LOG_ENABLED",
    "default_name": "eks-cluster-log-enabled",
    "description": "Checks if an Amazon Elastic Kubernetes Service (Amazon EKS) cluster is configured with logging enabled. The rule is NON_COMPLIANT if logging for Amazon EKS clusters is not enabled or if logging is not enabled with the log type mentioned.",
    "parameters": {
      "required": {},
      "optional": {
        "logTypes": {
          "type": "CSV",
          "description": "Comma separated list of EKS Cluster control plane log types that should be enabled."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EKS::Cluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "EKS",
      "LOGGING",
      "LOG",
      "KUBERNETES",
      "ELASTIC"
    ]
  },
  "msk-enhanced-monitoring-enabled": {
    "id": "MSK_ENHANCED_MONITORING_ENABLED",
    "default_name": "msk-enhanced-monitoring-enabled",
    "description": "Checks if enhanced monitoring is enabled for an Amazon MSK cluster set to PER_TOPIC_PER_BROKER or PER_TOPIC_PER_PARTITION. The rule is NON_COMPLIANT if enhanced monitoring is enabled and set to DEFAULT or PER_BROKER.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::MSK::Cluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "MSK",
      "CLUSTER",
      "ENHANCED",
      "MONITORING",
      "TOPIC",
      "KAFKA",
      "BROKER"
    ]
  },
  "mq-auto-minor-version-upgrade-enabled": {
    "id": "MQ_AUTO_MINOR_VERSION_UPGRADE_ENABLED",
    "default_name": "mq-auto-minor-version-upgrade-enabled",
    "description": "Checks if automatic minor version upgrades are enabled for Amazon MQ brokers. The rule is NON_COMPLIANT if the 'AutoMinorVersionUpgrade' field is not enabled for an Amazon MQ broker.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::AmazonMQ::Broker"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "MQ",
      "ACTIVEMQ",
      "RABBITMQ",
      "AUTOMATIC",
      "MINOR",
      "VERSION",
      "UPGRADE",
      "BROKER",
      "QUEUE"
    ]
  },
  "neptune-cluster-multi-az-enabled": {
    "id": "NEPTUNE_CLUSTER_MULTI_AZ_ENABLED",
    "default_name": "neptune-cluster-multi-az-enabled",
    "description": "Checks if an Amazon Neptune cluster is configured with Amazon RDS Multi-AZ replication. The rule is NON_COMPLIANT if Multi-AZ replication is not enabled.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBCluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "NEPTUNE",
      "CLUSTER",
      "MULTI",
      "AZ",
      "RDS",
      "DB",
      "DATABASE"
    ]
  },
  "dms-replication-task-sourcedb-logging": {
    "id": "DMS_REPLICATION_TASK_SOURCEDB_LOGGING",
    "default_name": "dms-replication-task-sourcedb-logging",
    "description": "Checks if logging is enabled with a valid severity level for AWS DMS replication tasks of a source database. The rule is NON_COMPLIANT if logging is not enabled or logs for DMS replication tasks of a source database have a severity level that is not valid.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::DMS::ReplicationTask"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "DMS",
      "DATABASE",
      "DB",
      "MIGRATION",
      "SOURCE",
      "LOGGING",
      "SEVERITY",
      "REPLICATION",
      "TASK"
    ]
  },
  "dms-endpoint-ssl-configured": {
    "id": "DMS_ENDPOINT_SSL_CONFIGURED",
    "default_name": "dms-endpoint-ssl-configured",
    "description": "Checks if AWS Database Migration Service (AWS DMS) endpoints are configured with an SSL connection. The rule is NON_COMPLIANT if AWS DMS does not have an SSL connection configured.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::DMS::Endpoint"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "DMS",
      "ENDPOINT",
      "SSL",
      "CONFIGURED",
      "DATABASE",
      "MIGRATION",
      "DB"
    ]
  },
  "netfw-deletion-protection-enabled": {
    "id": "NETFW_DELETION_PROTECTION_ENABLED",
    "default_name": "netfw-deletion-protection-enabled",
    "description": "Checks if AWS Network Firewall has deletion protection enabled. The rule is NON_COMPLIANT if Network Firewall does not have deletion protection enabled.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::NetworkFirewall::Firewall"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "NETWORK",
      "FIREWALL",
      "DELETION",
      "PROTECTION",
      "NETFW"
    ]
  },
  "global-endpoint-event-replication-enabled": {
    "id": "GLOBAL_ENDPOINT_EVENT_REPLICATION_ENABLED",
    "default_name": "global-endpoint-event-replication-enabled",
    "description": "Checks if event replication is enabled for Amazon EventBridge global endpoints. The rule is NON_COMPLIANT if event replication is not enabled.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::Events::Endpoint"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "GLOBAL",
      "ENDPOINT",
      "EVENT",
      "REPLICATION",
      "ENABLED"
    ]
  },
  "rds-aurora-mysql-audit-logging-enabled": {
    "id": "RDS_AURORA_MYSQL_AUDIT_LOGGING_ENABLED",
    "default_name": "rds-aurora-mysql-audit-logging-enabled",
    "description": "Checks if Amazon Aurora MySQL-Compatible Edition clusters have audit logging enabled and sent to Amazon CloudWatch Logs. The rule is NON_COMPLIANT if Aurora MySQL-Compatible clusters do not have audit logging enabled.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBCluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "RDS",
      "CLUSTER",
      "AUDIT",
      "LOGGING",
      "DATABASE",
      "DB",
      "ENABLED",
      "AURORA",
      "MYSQL"
    ]
  },
  "wafv2-rulegroup-logging-enabled": {
    "id": "WAFV2_RULEGROUP_LOGGING_ENABLED",
    "default_name": "wafv2-rulegroup-logging-enabled",
    "description": "Checks if Amazon CloudWatch security metrics collection on AWS WAFv2 rule groups is enabled. The rule is NON_COMPLIANT if the 'VisibilityConfig.CloudWatchMetricsEnabled' field is set to false.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::WAFv2::RuleGroup"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "WAFV2",
      "RULE",
      "RULEGROUP",
      "LOGGING",
      "CLOUDWATCH"
    ]
  },
  "msk-in-cluster-node-require-tls": {
    "id": "MSK_IN_CLUSTER_NODE_REQUIRE_TLS",
    "default_name": "msk-in-cluster-node-require-tls",
    "description": "Checks if an Amazon MSK cluster enforces encryption in transit using HTTPS (TLS) with the broker nodes of the cluster. The rule is NON_COMPLIANT if plain text communication is enabled for in-cluster broker node connections.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::MSK::Cluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "MSK",
      "KAFKA",
      "CLUSTER",
      "NODE",
      "REQUIRE",
      "TLS",
      "ENCRYPTION",
      "IN",
      "TRANSIT"
    ]
  },
  "rds-cluster-auto-minor-version-upgrade-enable": {
    "id": "RDS_CLUSTER_AUTO_MINOR_VERSION_UPGRADE_ENABLE",
    "default_name": "rds-cluster-auto-minor-version-upgrade-enable",
    "description": "Checks if automatic minor version upgrades are enabled for Amazon RDS Multi-AZ cluster deployments. The rule is NON_COMPLIANT if autoMinorVersionUpgrade is set to false.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBCluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "RDS",
      "CLUSTER",
      "AUTO",
      "MINOR",
      "VERSION",
      "UPGRADE",
      "DATABASE",
      "DB",
      "MYSQL",
      "POSTGRESQL"
    ]
  },
  "docdb-cluster-snapshot-public-prohibited": {
    "id": "DOCDB_CLUSTER_SNAPSHOT_PUBLIC_PROHIBITED",
    "default_name": "docdb-cluster-snapshot-public-prohibited",
    "description": "Checks if Amazon DocumentDB manual cluster snapshots are public. The rule is NON_COMPLIANT if any Amazon DocumentDB manual cluster snapshots are public.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBClusterSnapshot"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "DOCDB",
      "DOCUMENTDB",
      "SNAPSHOT",
      "CLUSTER",
      "PUBLIC",
      "MANUAL",
      "RDS"
    ]
  },
  "dms-replication-task-targetdb-logging": {
    "id": "DMS_REPLICATION_TASK_TARGETDB_LOGGING",
    "default_name": "dms-replication-task-targetdb-logging",
    "description": "Checks if logging is enabled with a valid severity level for AWS DMS replication task events of a target database. The rule is NON_COMPLIANT if logging is not enabled or replication task logging of a target database has a severity level that is not valid.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::DMS::ReplicationTask"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "DMS",
      "DATABASE",
      "DB",
      "MIGRATION",
      "TARGET",
      "LOGGING",
      "SEVERITY",
      "REPLICATION",
      "TASK"
    ]
  },
  "dms-auto-minor-version-upgrade-check": {
    "id": "DMS_AUTO_MINOR_VERSION_UPGRADE_CHECK",
    "default_name": "dms-auto-minor-version-upgrade-check",
    "description": "Checks if an AWS Database Migration Service (AWS DMS) replication instance has automatic minor version upgrades enabled. The rule is NON_COMPLIANT if an AWS DMS replication instance is not configured with automatic minor version upgrades.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::DMS::ReplicationInstance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "DMS",
      "AUTO",
      "MINOR",
      "VERSION",
      "UPGRADE",
      "DATABASE",
      "MIGRATION",
      "CLUSTER"
    ]
  },
  "fsx-lustre-copy-tags-to-backups": {
    "id": "FSX_LUSTRE_COPY_TAGS_TO_BACKUPS",
    "default_name": "fsx-lustre-copy-tags-to-backups",
    "description": "Checks if the Amazon FSx for Lustre file systems are configured to copy tags to backups. The rule is NON_COMPLIANT if Lustre file systems are not configured to copy tags to backups.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": []
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "FSX",
      "LUSTRE",
      "COPY",
      "TAGS",
      "BACKUPS",
      "PERIODIC"
    ]
  },
  "mq-rabbit-deployment-mode": {
    "id": "MQ_RABBIT_DEPLOYMENT_MODE",
    "default_name": "mq-rabbit-deployment-mode",
    "description": "Checks the deployment mode configured for the Amazon MQ RabbitMQ broker engine. The rule is NON_COMPLIANT if the default single-instance broker mode is being used.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::AmazonMQ::Broker"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "MQ",
      "BROKER",
      "DEPLOYMENT",
      "MODE",
      "CLUSTER",
      "RABBIT"
    ]
  },
  "docdb-cluster-deletion-protection-enabled": {
    "id": "DOCDB_CLUSTER_DELETION_PROTECTION_ENABLED",
    "default_name": "docdb-cluster-deletion-protection-enabled",
    "description": "Checks if an Amazon DocumentDB (with MongoDB compatibility) cluster has deletion protection enabled. The rule is NON_COMPLIANT if an Amazon DocumentDB cluster has the deletionProtection field set to false.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBCluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "DOCUMENT",
      "DB",
      "DOCDB",
      "CLUSTER",
      "DELETION",
      "PROTECTION",
      "DATABASE",
      "RDS"
    ]
  },
  "mq-active-deployment-mode": {
    "id": "MQ_ACTIVE_DEPLOYMENT_MODE",
    "default_name": "mq-active-deployment-mode",
    "description": "Checks the deployment mode configured for Amazon MQ ActiveMQ broker engine. The rule is NON_COMPLIANT if the default single-instance broker mode is being used.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::AmazonMQ::Broker"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "MQ",
      "BROKER",
      "DEPLOYMENT",
      "MODE",
      "STANDBY",
      "ACTIVE"
    ]
  },
  "docdb-cluster-audit-logging-enabled": {
    "id": "DOCDB_CLUSTER_AUDIT_LOGGING_ENABLED",
    "default_name": "docdb-cluster-audit-logging-enabled",
    "description": "Checks if an Amazon DocumentDB (with MongoDB compatibility) instance cluster has CloudWatch log export enabled for audit logs. The rule is NON_COMPLIANT if an Amazon DocumentDB instance cluster does not have CloudWatch log export enabled for audit logs.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBCluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "DOCUMENT",
      "DB",
      "RDS",
      "CLUSTER",
      "LOGS",
      "CLOUDWATCH",
      "DATABASE",
      "AUDIT"
    ]
  },
  "neptune-cluster-encrypted": {
    "id": "NEPTUNE_CLUSTER_ENCRYPTED",
    "default_name": "neptune-cluster-encrypted",
    "description": "Checks if storage encryption is enabled for your Amazon Neptune DB clusters. The rule is NON_COMPLIANT if storage encryption is not enabled.",
    "parameters": {
      "required": {},
      "optional": {
        "KmsKeyArns": {
          "type": "CSV",
          "description": "A comma-separated list of KMS key ARNs to compare with the KmsKeyId of the encrypted cluster."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBCluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "NEPTUNE",
      "RDS",
      "DB",
      "DATABASE",
      "CLUSTER",
      "ENCRYPTED",
      "ENCRYPTION"
    ]
  },
  "athena-workgroup-encrypted-at-rest": {
    "id": "ATHENA_WORKGROUP_ENCRYPTED_AT_REST",
    "default_name": "athena-workgroup-encrypted-at-rest",
    "description": "Checks if an Amazon Athena workgroup is encrypted at rest. The rule is NON_COMPLIANT if encryption of data at rest is not enabled for an Athena workgroup.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::Athena::WorkGroup"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "ATHENA",
      "WORKGROUP",
      "ENCRYPTED",
      "AT",
      "REST"
    ]
  },
  "neptune-cluster-snapshot-public-prohibited": {
    "id": "NEPTUNE_CLUSTER_SNAPSHOT_PUBLIC_PROHIBITED",
    "default_name": "neptune-cluster-snapshot-public-prohibited",
    "description": "Checks if an Amazon Neptune manual DB cluster snapshot is public. The rule is NON_COMPLIANT if any existing and new Neptune cluster snapshot is public.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBClusterSnapshot"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "RDS",
      "NEPTUNE",
      "CLUSTER",
      "SNAPSHOT",
      "PUBLIC",
      "PROHIBITED",
      "PRIVATE",
      "DB",
      "DATABASE"
    ]
  },
  "docdb-cluster-backup-retention-check": {
    "id": "DOCDB_CLUSTER_BACKUP_RETENTION_CHECK",
    "default_name": "docdb-cluster-backup-retention-check",
    "description": "Checks if an Amazon Document DB cluster retention period is set to specific number of days. The rule is NON_COMPLIANT if the retention period is less than the value specified by the parameter.",
    "parameters": {
      "required": {},
      "optional": {
        "minimumBackupRetentionPeriod": {
          "type": "int",
          "description": "Minimum days backups should be kept. Valid values 1 to 35, default value is 7. This rule is NON_COMPLIANT if value is greater than 'backupRetentionPeriod'."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBCluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "DOCUMENT",
      "DB",
      "RDS",
      "CLUSTER",
      "BACKUP",
      "RETENTION",
      "DATABASE"
    ]
  },
  "neptune-cluster-backup-retention-check": {
    "id": "NEPTUNE_CLUSTER_BACKUP_RETENTION_CHECK",
    "default_name": "neptune-cluster-backup-retention-check",
    "description": "Checks if an Amazon Neptune DB cluster retention period is set to specific number of days. The rule is NON_COMPLIANT if the retention period is less than the value specified by the parameter.",
    "parameters": {
      "required": {},
      "optional": {
        "minimumBackupRetentionPeriod": {
          "type": "int",
          "description": "Minimum days backups should be kept. Valid values 1 to 35, default value is 7. The rule is NON_COMPLIANT if value is greater than 'backupRetentionPeriod'. The rule is COMPLIANT if value is less than or equal to 'backupRetentionPeriod'."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBCluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "NEPTUNE",
      "RDS",
      "DB",
      "CLUSTER",
      "BACKUP",
      "RETENTION",
      "DATABASE"
    ]
  },
  "neptune-cluster-iam-database-authentication": {
    "id": "NEPTUNE_CLUSTER_IAM_DATABASE_AUTHENTICATION",
    "default_name": "neptune-cluster-iam-database-authentication",
    "description": "Checks if an Amazon Neptune cluster has AWS Identity and Access Management (IAM) database authentication enabled. The rule is NON_COMPLIANT if an Amazon Neptune cluster does not have IAM database authentication enabled.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBCluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "NEPTUNE",
      "CLUSTER",
      "IAM",
      "DATABASE",
      "AUTHENTICATION"
    ]
  },
  "neptune-cluster-snapshot-encrypted": {
    "id": "NEPTUNE_CLUSTER_SNAPSHOT_ENCRYPTED",
    "default_name": "neptune-cluster-snapshot-encrypted",
    "description": "Checks if an Amazon Neptune DB cluster has snapshots encrypted. The rule is NON_COMPLIANT if a Neptune cluster does not have snapshots encrypted.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBClusterSnapshot"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "NEPTUNE",
      "CLUSTER",
      "SNAPSHOT",
      "ENCRYPTED",
      "DB",
      "DATABASE"
    ]
  },
  "docdb-cluster-encrypted": {
    "id": "DOCDB_CLUSTER_ENCRYPTED",
    "default_name": "docdb-cluster-encrypted",
    "description": "Checks if storage encryption is enabled for your Amazon DocumentDB (with MongoDB compatibility) clusters. The rule is NON_COMPLIANT if storage encryption is not enabled.",
    "parameters": {
      "required": {},
      "optional": {
        "kmsKeyArns": {
          "type": "CSV",
          "description": "A comma-separated list of KMS key ARNs to compare with the KmsKeyID of the encrypted cluster."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBCluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "DOCUMENT",
      "DB",
      "RDS",
      "CLUSTER",
      "ENCRYPTION",
      "STORAGE",
      "DATABASE",
      "ENABLED"
    ]
  },
  "rds-cluster-encrypted-at-rest": {
    "id": "RDS_CLUSTER_ENCRYPTED_AT_REST",
    "default_name": "rds-cluster-encrypted-at-rest",
    "description": "Checks if an Amazon Relational Database Service (Amazon RDS) cluster is encrypted at rest. The rule is NON_COMPLIANT if an Amazon RDS cluster is not encrypted at rest.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBCluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "RDS",
      "CLUSTER",
      "ENCRYPTION",
      "REST",
      "DATABASE",
      "DB"
    ]
  },
  "neptune-cluster-copy-tags-to-snapshot-enabled": {
    "id": "NEPTUNE_CLUSTER_COPY_TAGS_TO_SNAPSHOT_ENABLED",
    "default_name": "neptune-cluster-copy-tags-to-snapshot-enabled",
    "description": "Checks if an Amazon Neptune cluster is configured to copy all tags to snapshots when the snapshots are created. The rule is NON_COMPLIANT if 'copyTagsToSnapshot' is set to false.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBCluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "NEPTUNE",
      "CLUSTER",
      "COPY",
      "TAGS",
      "SNAPSHOT",
      "DATABASE",
      "DB"
    ]
  },
  "neptune-cluster-deletion-protection-enabled": {
    "id": "NEPTUNE_CLUSTER_DELETION_PROTECTION_ENABLED",
    "default_name": "neptune-cluster-deletion-protection-enabled",
    "description": "Checks if an Amazon Neptune DB cluster has deletion protection enabled. The rule is NON_COMPLIANT if an Amazon Neptune cluster has the deletionProtection field set to false.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBCluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "NEPTUNE",
      "DB",
      "CLUSTER",
      "DELETION",
      "PROTECTION",
      "DATABASE",
      "RDS"
    ]
  },
  "neptune-cluster-cloudwatch-log-export-enabled": {
    "id": "NEPTUNE_CLUSTER_CLOUDWATCH_LOG_EXPORT_ENABLED",
    "default_name": "neptune-cluster-cloudwatch-log-export-enabled",
    "description": "Checks if an Amazon Neptune cluster has CloudWatch log export enabled for audit logs. The rule is NON_COMPLIANT if a Neptune cluster does not have CloudWatch log export enabled for audit logs.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBCluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "NEPTUNE",
      "LOGGING",
      "CLUSTER",
      "DATABASE",
      "DB",
      "LOGS",
      "CLOUDWATCH"
    ]
  },
  "mq-cloudwatch-audit-logging-enabled": {
    "id": "MQ_CLOUDWATCH_AUDIT_LOGGING_ENABLED",
    "default_name": "mq-cloudwatch-audit-logging-enabled",
    "description": "Checks if Amazon MQ brokers have Amazon CloudWatch audit logging enabled. The rule is NON_COMPLIANT if a broker does not have audit logging enabled.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": [
          "AWS::AmazonMQ::Broker"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "MQ",
      "ACTIVEMQ",
      "BROKER",
      "QUEUE",
      "CLOUDWATCH",
      "AUDIT",
      "LOGGING",
      "LOGS",
      "PERIODIC"
    ]
  },
  "ec2-client-vpn-not-authorize-all": {
    "id": "EC2_CLIENT_VPN_NOT_AUTHORIZE_ALL",
    "default_name": "ec2-client-vpn-not-authorize-all",
    "description": "Checks if the AWS Client VPN authorization rules authorizes connection access for all clients. The rule is NON_COMPLIANT if 'AccessAll' is present and set to true.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": [
          "AWS::EC2::ClientVpnEndpoint"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "EC2",
      "CLIENT",
      "VPN",
      "ENDPOINT",
      "AUTHORIZATION",
      "ACCESS",
      "PERIODIC"
    ]
  },
  "custom-schema-registry-policy-attached": {
    "id": "CUSTOM_SCHEMA_REGISTRY_POLICY_ATTACHED",
    "default_name": "custom-schema-registry-policy-attached",
    "description": "Checks if custom Amazon EventBridge schema registries have a resource policy attached. The rule is NON_COMPLIANT for custom schema registries without a resource policy attached.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": [
          "AWS::EventSchemas::Registry"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "CUSTOM",
      "SCHEMA",
      "REGISTRY",
      "EVENTBRIDGE",
      "POLICY",
      "PERIODIC"
    ]
  },
  "step-functions-state-machine-logging-enabled": {
    "id": "STEP_FUNCTIONS_STATE_MACHINE_LOGGING_ENABLED",
    "default_name": "step-functions-state-machine-logging-enabled",
    "description": "Checks if AWS Step Functions machine has logging enabled. The rule is NON_COMPLIANT if a state machine does not have logging enabled or the logging configuration is not at the minimum level provided.",
    "parameters": {
      "required": {},
      "optional": {
        "cloudWatchLogGroupArns": {
          "type": "CSV",
          "description": "Comma-separated list of Amazon Resource Names (ARNs) for Amazon CloudWatch Logs log groups. The rule checks if the specified log groups are configured for your state machine logs."
        },
        "logLevel": {
          "type": "String",
          "description": "The minimum log level for your state machine. Valid values include: ALL, ERROR, FATAL."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::StepFunctions::StateMachine"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "STEP",
      "FUNCTIONS",
      "STATE",
      "MACHINE",
      "LOGGING"
    ]
  },
  "macie-status-check": {
    "id": "MACIE_STATUS_CHECK",
    "default_name": "macie-status-check",
    "description": "Checks if Amazon Macie is enabled in your account per region. The rule is NON_COMPLIANT if the 'status' attribute is not set to 'ENABLED'.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": []
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "MACIE",
      "STATUS",
      "CHECK",
      "PERIODIC"
    ]
  },
  "mq-automatic-minor-version-upgrade-enabled": {
    "id": "MQ_AUTOMATIC_MINOR_VERSION_UPGRADE_ENABLED",
    "default_name": "mq-automatic-minor-version-upgrade-enabled",
    "description": "Checks if automatic minor version upgrades are enabled for Amazon MQ brokers. The rule is NON_COMPLIANT if the 'AutoMinorVersionUpgrade' field is not enabled for an Amazon MQ broker.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": [
          "AWS::AmazonMQ::Broker"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "MQ",
      "ACTIVEMQ",
      "RABBITMQ",
      "AUTOMATIC",
      "MINOR",
      "VERSION",
      "UPGRADE",
      "BROKER",
      "QUEUE",
      "PERIODIC"
    ]
  },
  "appsync-associated-with-waf": {
    "id": "APPSYNC_ASSOCIATED_WITH_WAF",
    "default_name": "appsync-associated-with-waf",
    "description": "Checks if AWS AppSync APIs are associated with AWS WAFv2 web access control lists (ACLs). The rule is NON_COMPLIANT for an AWS AppSync API if it is not associated with a web ACL.",
    "parameters": {
      "required": {},
      "optional": {
        "wafWebAclARNs": {
          "type": "CSV",
          "description": "Comma-separated list of Amazon Resource Names (ARNs) for authorized web ACLs."
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": [
          "AWS::AppSync::GraphQLApi"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "APPSYNC",
      "API",
      "GRAPHQL",
      "WAF",
      "WEBACL",
      "ACL",
      "PERIODIC"
    ]
  },
  "acm-certificate-rsa-check": {
    "id": "ACM_CERTIFICATE_RSA_CHECK",
    "default_name": "acm-certificate-rsa-check",
    "description": "Checks if RSA certificates managed by AWS Certificate Manager (ACM) have a key length of at least '2048' bits.The rule is NON_COMPLIANT if the minimum key length is less than 2048 bits.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ACM::Certificate"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "ACM",
      "CERTIFICATE",
      "ALGORITHM",
      "KEY",
      "SIZE",
      "RSA",
      "PRIVATE",
      "PUBLIC",
      "IMPORT"
    ]
  },
  "netfw-multi-az-enabled": {
    "id": "NETFW_MULTI_AZ_ENABLED",
    "default_name": "netfw-multi-az-enabled",
    "description": "Checks if AWS Network Firewall firewalls are deployed across multiple Availability Zones. The rule is NON_COMPLIANT if firewalls are deployed in only one Availability Zone or in fewer zones than the number listed in the optional parameter.",
    "parameters": {
      "required": {},
      "optional": {
        "availabilityZones": {
          "type": "int",
          "description": "The number of expected Availability Zones."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::NetworkFirewall::Firewall"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "NETWORK",
      "FIREWALL",
      "MULTI",
      "MULTIPLE",
      "AZ",
      "AVAILABILITY",
      "ZONE",
      "ZONES",
      "VPC",
      "SUBNET",
      "NETFW"
    ]
  },
  "appsync-logging-enabled": {
    "id": "APPSYNC_LOGGING_ENABLED",
    "default_name": "appsync-logging-enabled",
    "description": "Checks if an AWS AppSync API has logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or 'fieldLogLevel' is neither ERROR nor ALL.",
    "parameters": {
      "required": {},
      "optional": {
        "fieldLoggingLevel": {
          "type": "CSV",
          "description": "Comma-separated list of specific field logging levels (for example, ERROR, ALL)."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::AppSync::GraphQLApi"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "APPSYNC",
      "LOGGING",
      "GRAPHQL",
      "API"
    ]
  },
  "mq-no-public-access": {
    "id": "MQ_NO_PUBLIC_ACCESS",
    "default_name": "mq-no-public-access",
    "description": "Checks if Amazon MQ brokers are not publicly accessible. The rule is NON_COMPLIANT if the 'PubliclyAccessible' field is set to true for an Amazon MQ broker.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": [
          "AWS::AmazonMQ::Broker"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "MQ",
      "PUBLIC",
      "ACCESS",
      "PERIODIC",
      "MESSAGE",
      "QUEUE",
      "BROKER",
      "ACTIVEMQ",
      "RABBITMQ"
    ]
  },
  "eks-cluster-logging-enabled": {
    "id": "EKS_CLUSTER_LOGGING_ENABLED",
    "default_name": "eks-cluster-logging-enabled",
    "description": "Checks if an Amazon Elastic Kubernetes Service (Amazon EKS) cluster is configured with logging enabled. The rule is NON_COMPLIANT if logging for Amazon EKS clusters is not enabled for all log types.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": [
          "AWS::EKS::Cluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "EKS",
      "CLUSTER",
      "LOGGING",
      "ENABLED",
      "PERIODIC",
      "KUBERNETES"
    ]
  },
  "appsync-cache-encryption-at-rest": {
    "id": "APPSYNC_CACHE_ENCRYPTION_AT_REST",
    "default_name": "appsync-cache-encryption-at-rest",
    "description": "Checks if an AWS AppSync API cache has encryption at rest enabled. This rule is NON_COMPLIANT if 'AtRestEncryptionEnabled' is false.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": [
          "AWS::AppSync::GraphQLApi"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "PERIODIC",
      "GRAPHQL",
      "API",
      "APPSYNC",
      "CACHE",
      "REST",
      "ENCRYPTION"
    ]
  },
  "opensearch-update-check": {
    "id": "OPENSEARCH_UPDATE_CHECK",
    "default_name": "opensearch-update-check",
    "description": "Checks if Amazon OpenSearch Service version updates are available but not installed. The rule is NON_COMPLIANT for an OpenSearch domain if the latest software updates are not installed.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::OpenSearch::Domain"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "OPENSEARCH",
      "UPDATE",
      "DOMAIN",
      "SOFTWARE"
    ]
  },
  "security-account-information-provided": {
    "id": "SECURITY_ACCOUNT_INFORMATION_PROVIDED",
    "default_name": "security-account-information-provided",
    "description": "Checks if you have provided security contact information for your AWS account contacts. The rule is NON_COMPLIANT if security contact information within the account is not provided.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": []
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "SECURITY",
      "ACCOUNT",
      "ALTERNATE",
      "CONTACT",
      "PERIODIC"
    ]
  },
  "elasticache-subnet-group-check": {
    "id": "ELASTICACHE_SUBNET_GROUP_CHECK",
    "default_name": "elasticache-subnet-group-check",
    "description": "Checks if Amazon ElastiCache clusters are configured with a custom subnet group. The rule is NON_COMPLIANT for an ElastiCache cluster if it is using a default subnet group.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": []
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "ELASTICACHE",
      "CLUSTER",
      "SUBNET",
      "GROUP",
      "CACHE",
      "PERIODIC"
    ]
  },
  "netfw-logging-enabled": {
    "id": "NETFW_LOGGING_ENABLED",
    "default_name": "netfw-logging-enabled",
    "description": "Checks if AWS Network Firewall firewalls have logging enabled. The rule is NON_COMPLIANT if a logging type is not configured. You can specify which logging type you want the rule to check.",
    "parameters": {
      "required": {},
      "optional": {
        "logType": {
          "type": "String",
          "description": "logType (Optional): Log type for the rule to check for firewalls: 'alert', 'flow', or 'both'."
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": []
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "NETWORK",
      "FIREWALL",
      "LOGGING",
      "CONFIGURATION",
      "PERIODIC",
      "ENABLED"
    ]
  },
  "appsync-authorization-check": {
    "id": "APPSYNC_AUTHORIZATION_CHECK",
    "default_name": "appsync-authorization-check",
    "description": "Checks if an AWS AppSync API is using allowed authorization mechanisms. The rule is NON_COMPLIANT if an unapproved authorization mechanism is being used.",
    "parameters": {
      "required": {
        "AllowedAuthorizationTypes": {
          "type": "CSV",
          "description": "Comma-separated list of allowed AWS AppSync authorization mechanisms. Allowed values are: 'API_KEY', 'AWS_LAMBDA', 'AWS_IAM', 'OPENID_CONNECT', 'AMAZON_COGNITO_USER_POOLS'."
        }
      },
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::AppSync::GraphQLApi"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "APPSYNC",
      "AUTHORIZATION",
      "GRAPHQL",
      "API"
    ]
  },
  "api-gwv2-authorization-type-configured": {
    "id": "API_GWV2_AUTHORIZATION_TYPE_CONFIGURED",
    "default_name": "api-gwv2-authorization-type-configured",
    "description": "Checks if Amazon API Gatewayv2 API routes have an authorization type set. This rule is NON_COMPLIANT if the authorization type is NONE.",
    "parameters": {
      "required": {},
      "optional": {
        "authorizationType": {
          "type": "String",
          "description": "Parameter to check API routes' authorization types against. String parameters matching CUSTOM, AWS_IAM, JWT are valid."
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": []
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "API",
      "GATEWAYV2",
      "ROUTE",
      "AUTHORIZATION",
      "PERIODIC"
    ]
  },
  "elasticache-repl-grp-encrypted-at-rest": {
    "id": "ELASTICACHE_REPL_GRP_ENCRYPTED_AT_REST",
    "default_name": "elasticache-repl-grp-encrypted-at-rest",
    "description": "Checks if Amazon ElastiCache replication groups have encryption-at-rest enabled. The rule is NON_COMPLIANT for an ElastiCache replication group if 'AtRestEncryptionEnabled' is disabled or if the KMS key ARN does not match the approvedKMSKeyArns parameter.",
    "parameters": {
      "required": {},
      "optional": {
        "approvedKMSKeyIds": {
          "type": "CSV",
          "description": "Comma-separated list of KMS Key IDs that are approved for ElastiCache usage."
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": []
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "ELASTICACHE",
      "REPLICATION",
      "GROUP",
      "ENCRYPTED",
      "ENCRYPTION",
      "REST",
      "PERIODIC"
    ]
  },
  "elasticache-auto-minor-version-upgrade-check": {
    "id": "ELASTICACHE_AUTO_MINOR_VERSION_UPGRADE_CHECK",
    "default_name": "elasticache-auto-minor-version-upgrade-check",
    "description": "Checks if Amazon ElastiCache for Redis clusters have auto minor version upgrades enabled. The rule is NON_COMPLIANT for an ElastiCache cluster if it is using the Redis engine and 'AutoMinorVersionUpgrade' is not set to 'true'.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": []
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "ELASTICACHE",
      "AUTO",
      "MINOR",
      "VERSION",
      "UPGRADE",
      "CLUSTER",
      "REDIS",
      "PERIODIC"
    ]
  },
  "elasticache-repl-grp-encrypted-in-transit": {
    "id": "ELASTICACHE_REPL_GRP_ENCRYPTED_IN_TRANSIT",
    "default_name": "elasticache-repl-grp-encrypted-in-transit",
    "description": "Checks if Amazon ElastiCache replication groups have encryption-in-transit enabled. The rule is NON_COMPLIANT for an ElastiCache replication group if ‘TransitEncryptionEnabled’ is set to ‘false’.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": []
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "ELASTICACHE",
      "REPLICATION",
      "GROUP",
      "ENCRYPTED",
      "ENCRYPTION",
      "TRANSIT",
      "IN-TRANSIT"
    ]
  },
  "elasticache-repl-grp-auto-failover-enabled": {
    "id": "ELASTICACHE_REPL_GRP_AUTO_FAILOVER_ENABLED",
    "default_name": "elasticache-repl-grp-auto-failover-enabled",
    "description": "Checks if Amazon ElastiCache Redis replication groups have automatic failover enabled. The rule is NON_COMPLIANT for an ElastiCache replication group if ‘AutomaticFailover’ is not set to ‘enabled’.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": []
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "ELASTICSEARCH",
      "PERIODIC",
      "REPLICATION",
      "GROUP",
      "REDIS",
      "AUTOMATIC",
      "FAILOVER",
      "ENABLED"
    ]
  },
  "elasticache-rbac-auth-enabled": {
    "id": "ELASTICACHE_RBAC_AUTH_ENABLED",
    "default_name": "elasticache-rbac-auth-enabled",
    "description": "Checks if Amazon ElastiCache replication groups have RBAC authentication enabled. The rule is NON_COMPLIANT if the Redis version is 6 or above and ‘UserGroupIds’ is missing, empty, or does not match an entry provided by the 'allowedUserGroupIDs' parameter.",
    "parameters": {
      "required": {},
      "optional": {
        "allowedUserGroupIDs": {
          "type": "CSV",
          "description": "A comma-separated list of User Group IDs that are approved for ElastiCache replication group access."
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": []
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "ELASTICACHE",
      "REPLICATION",
      "GROUP",
      "RBAC",
      "AUTHENTICATION",
      "PERIODIC"
    ]
  },
  "elasticache-repl-grp-redis-auth-enabled": {
    "id": "ELASTICACHE_REPL_GRP_REDIS_AUTH_ENABLED",
    "default_name": "elasticache-repl-grp-redis-auth-enabled",
    "description": "Checks if Amazon ElastiCache replication groups have Redis AUTH enabled. The rule is NON_COMPLIANT for an ElastiCache replication group if the Redis version of its nodes is below 6 (Version 6+ use Redis ACLs) and ‘AuthToken’ is missing or is empty/null.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": []
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "ELASTICACHE",
      "REDIS",
      "AUTH",
      "REPLICATION",
      "GROUPS",
      "NODES",
      "AUTHORIZATION",
      "VERSION",
      "TOKEN",
      "PERIODIC"
    ]
  },
  "elasticache-supported-engine-version": {
    "id": "ELASTICACHE_SUPPORTED_ENGINE_VERSION",
    "default_name": "elasticache-supported-engine-version",
    "description": "Checks if ElastiCache clusters are running a version greater or equal to the recommended engine version. The rule is NON_COMPLIANT if the 'EngineVersion' for an ElastiCache cluster is less than the specified recommended version for its given engine.",
    "parameters": {
      "required": {
        "latestMemcachedVersion": {
          "type": "String",
          "description": "The latest recommended engine version for Memcached. Valid values are in semantic versioning (SemVer) format with 3-component number for major, minor, and patch versions (for example, 1.6.6, not 1.6)."
        },
        "latestRedisVersion": {
          "type": "String",
          "description": "The latest recommended engine version for Redis. Valid values are in semantic versioning (SemVer) format with 3-component number for major, minor, and patch versions (for example, 7.0.5, not 7.0)."
        }
      },
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": []
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "ELASTICACHE",
      "ENGINE",
      "VERSION",
      "MEMCACHED",
      "REDIS",
      "PERIODIC"
    ]
  },
  "custom-eventbus-policy-attached": {
    "id": "CUSTOM_EVENTBUS_POLICY_ATTACHED",
    "default_name": "custom-eventbus-policy-attached",
    "description": "Checks if Amazon EventBridge custom event buses have a resource-based policy attached. The rule is NON_COMPLIANT if a custom event bus policy does not have an attached resource-based policy.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::Events::EventBus"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "CUSTOM",
      "EVENTBUS",
      "POLICY",
      "ATTACHED",
      "EVENTBRIDGE",
      "EVENTS"
    ]
  },
  "elastic-beanstalk-logs-to-cloudwatch": {
    "id": "ELASTIC_BEANSTALK_LOGS_TO_CLOUDWATCH",
    "default_name": "elastic-beanstalk-logs-to-cloudwatch",
    "description": "Checks if AWS Elastic Beanstalk environments are configured to send logs to Amazon CloudWatch Logs. The rule is NON_COMPLIANT if the value of `StreamLogs` is false.",
    "parameters": {
      "required": {},
      "optional": {
        "RetentionInDays": {
          "type": "String",
          "description": "Checks the number of days to keep log events before they expire. Valid values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653. The rule is NON_COMPLIANT if the value of `logs.RetentionInDays` does not match this parameter."
        },
        "DeleteOnTerminate": {
          "type": "String",
          "description": "Checks if logs are configured to be deleted upon termination of the environment. Valid values are `true` or `false`. The rule is NON_COMPLIANT if the value of `logs.DeleteOnTerminate` does not match this parameter."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ElasticBeanstalk::Environment"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "ELASTIC",
      "BEANSTALK",
      "CLOUDWATCH",
      "LOGS"
    ]
  },
  "sagemaker-notebook-instance-root-access-check": {
    "id": "SAGEMAKER_NOTEBOOK_INSTANCE_ROOT_ACCESS_CHECK",
    "default_name": "sagemaker-notebook-instance-root-access-check",
    "description": "Checks if the Amazon SageMaker RootAccess setting is enabled for Amazon SageMaker notebook instances. The rule is NON_COMPLIANT if the RootAccess setting is set to ‘Enabled’ for an Amazon SageMaker notebook instance.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::SageMaker::NotebookInstance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "SAGEMAKER",
      "NOTEBOOK",
      "ACCESS",
      "ROOT",
      "INSTANCE"
    ]
  },
  "sagemaker-notebook-instance-inside-vpc": {
    "id": "SAGEMAKER_NOTEBOOK_INSTANCE_INSIDE_VPC",
    "default_name": "sagemaker-notebook-instance-inside-vpc",
    "description": "Checks if an Amazon SageMaker notebook instance is launched within a VPC or within a list of approved subnets. The rule is NON_COMPLIANT if a notebook instance is not launched within a VPC or if its subnet ID is not included in the parameter list.",
    "parameters": {
      "required": {},
      "optional": {
        "SubnetIds": {
          "type": "CSV",
          "description": "Comma-separated list of subnet IDs that notebook instances can be launched in."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::SageMaker::NotebookInstance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "SAGEMAKER",
      "NOTEBOOK",
      "VPC",
      "SUBNET",
      "INSTANCE",
      "INSIDE"
    ]
  },
  "api-gwv2-access-logs-enabled": {
    "id": "API_GWV2_ACCESS_LOGS_ENABLED",
    "default_name": "api-gwv2-access-logs-enabled",
    "description": "Checks if Amazon API Gateway V2 stages have access logging enabled. The rule is NON_COMPLIANT if 'accessLogSettings' is not present in Stage configuration.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ApiGatewayV2::Stage"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "API",
      "GATEWAY",
      "V2",
      "STAGE",
      "ACCESS",
      "LOG"
    ]
  },
  "ec2-launch-template-public-ip-disabled": {
    "id": "EC2_LAUNCH_TEMPLATE_PUBLIC_IP_DISABLED",
    "default_name": "ec2-launch-template-public-ip-disabled",
    "description": "Checks if Amazon EC2 Launch Templates are set to assign public IP addresses to Network Interfaces. The rule is NON_COMPLIANT if the default version of an EC2 Launch Template has at least 1 Network Interface with 'AssociatePublicIpAddress' set to 'true'.",
    "parameters": {
      "required": {},
      "optional": {
        "exemptedLaunchTemplates": {
          "type": "CSV",
          "description": "Comma-separated list of exempted EC2 Launch Template IDs that are allowed to have Network Interfaces with the AssociatePublicIpAddress value set to 'true'."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::LaunchTemplate"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "EC2",
      "LAUNCH",
      "TEMPLATE",
      "PUBLIC",
      "IP",
      "DISABLED",
      "NETWORK",
      "INTERFACE"
    ]
  },
  "wafv2-webacl-not-empty": {
    "id": "WAFV2_WEBACL_NOT_EMPTY",
    "default_name": "wafv2-webacl-not-empty",
    "description": "Checks if a WAFv2 Web ACL contains any WAF rules or WAF rule groups. This rule is NON_COMPLIANT if a Web ACL does not contain any WAF rules or WAF rule groups.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::WAFv2::WebACL"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "WAFV2",
      "WEBACL",
      "RULE",
      "CONDITION",
      "GROUPS"
    ]
  },
  "virtualmachine-last-backup-recovery-point-created": {
    "id": "VIRTUALMACHINE_LAST_BACKUP_RECOVERY_POINT_CREATED",
    "default_name": "virtualmachine-last-backup-recovery-point-created",
    "description": "Checks if a recovery point was created for AWS Backup-Gateway VirtualMachines. The rule is NON_COMPLIANT if an AWS Backup-Gateway VirtualMachines does not have a corresponding recovery point created within the specified time period.",
    "parameters": {
      "required": {},
      "optional": {
        "resourceTags": {
          "type": "String",
          "description": "Tags of AWS Backup-Gateway VirtualMachines for the rule to check, in JSON format."
        },
        "resourceId": {
          "type": "String",
          "description": "ID of AWS Backup-Gateway VirtualMachine for the rule to check."
        },
        "recoveryPointAgeValue": {
          "type": "int",
          "description": "Numerical value for maximum allowed age. No more than 744 for hours, 31 for days.",
          "defaultValue": "1"
        },
        "recoveryPointAgeUnit": {
          "type": "String",
          "description": "Unit of time for maximum allowed age. Accepted values: 'hours', 'days'.",
          "defaultValue": "days"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": []
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "AWSBackup"
    ]
  },
  "virtualmachine-resources-protected-by-backup-plan": {
    "id": "VIRTUALMACHINE_RESOURCES_PROTECTED_BY_BACKUP_PLAN",
    "default_name": "virtualmachine-resources-protected-by-backup-plan",
    "description": "Checks if AWS Backup-Gateway VirtualMachines are protected by a backup plan. The rule is NON_COMPLIANT if the Backup-Gateway VirtualMachine is not covered by a backup plan.",
    "parameters": {
      "required": {},
      "optional": {
        "resourceTags": {
          "type": "String",
          "description": "Tags for AWS Backup-Gateway VirtualMachines for the rule to check, in JSON format."
        },
        "resourceId": {
          "type": "String",
          "description": "ID of AWS Backup-Gateway VirtualMachine for the rule to check."
        },
        "crossRegionList": {
          "type": "String",
          "description": "Comma-separated list of destination regions for the cross-region backup copy to be kept"
        },
        "crossAccountList": {
          "type": "String",
          "description": "Comma-separated list of destination accounts for cross-account backup copy to be kept"
        },
        "maxRetentionDays": {
          "type": "int",
          "description": "The maximum retention period in days for the Backup Vault Lock"
        },
        "minRetentionDays": {
          "type": "int",
          "description": "The minimum retention period in days for the Backup Vault Lock"
        },
        "backupVaultLockCheck": {
          "type": "String",
          "description": "Accepted values: 'True' or 'False'. Enter 'True' for the rule to check if the resource is backed up in a locked vault"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": []
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "AWSBackup"
    ]
  },
  "ecr-private-lifecycle-policy-configured": {
    "id": "ECR_PRIVATE_LIFECYCLE_POLICY_CONFIGURED",
    "default_name": "ecr-private-lifecycle-policy-configured",
    "description": "Checks if a private Amazon Elastic Container Registry (ECR) repository has at least one lifecycle policy configured. The rule is NON_COMPLIANT if no lifecycle policy is configured for the ECR private repository.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ECR::Repository"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "ECR",
      "ELASTIC",
      "CONTAINER",
      "REPOSITORY",
      "PRIVATE",
      "LIFECYCLE",
      "POLICY"
    ]
  },
  "redshift-default-db-name-check": {
    "id": "REDSHIFT_DEFAULT_DB_NAME_CHECK",
    "default_name": "redshift-default-db-name-check",
    "description": "Checks if a Redshift cluster has changed its database name from the default value. The rule is NON_COMPLIANT if the database name for a Redshift cluster is set to “dev”, or if the optional parameter is provided and the database name does not match.",
    "parameters": {
      "required": {},
      "optional": {
        "validDatabaseNames": {
          "type": "CSV",
          "description": "Comma-separated list of database name(s) for Redshift clusters."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::Redshift::Cluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "REDSHIFT",
      "DB",
      "DATABASE",
      "CLUSTER"
    ]
  },
  "efs-access-point-enforce-user-identity": {
    "id": "EFS_ACCESS_POINT_ENFORCE_USER_IDENTITY",
    "default_name": "efs-access-point-enforce-user-identity",
    "description": "Checks if Amazon Elastic File System (Amazon EFS) access points are configured to enforce a user identity. The rule is NON_COMPLIANT if 'PosixUser' is not defined or if parameters are provided and there is no match in the corresponding parameter.",
    "parameters": {
      "required": {},
      "optional": {
        "approvedUids": {
          "type": "CSV",
          "description": "Comma-separated list of POSIX user ID that are approved for EFS access point user enforcement."
        },
        "approvedGids": {
          "type": "CSV",
          "description": "Comma-separated list of POSIX group IDs that are approved for EFS access point user enforcement."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EFS::AccessPoint"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "EFS",
      "FILE",
      "SYSTEM",
      "USER",
      "POSIX",
      "ACCESS",
      "POINT",
      "GROUP"
    ]
  },
  "vpc-peering-dns-resolution-check": {
    "id": "VPC_PEERING_DNS_RESOLUTION_CHECK",
    "default_name": "vpc-peering-dns-resolution-check",
    "description": "Checks if DNS resolution from accepter/requester VPC to private IP is enabled. The rule is NON_COMPLIANT if DNS resolution from accepter/requester VPC to private IP is not enabled.",
    "parameters": {
      "required": {},
      "optional": {
        "vpcIds": {
          "type": "CSV",
          "description": "Comma-separated list of VPC IDs to be checked."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::VPCPeeringConnection"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "VPC",
      "PEERING",
      "CONNECTION",
      "DNS",
      "RESOLUTION"
    ]
  },
  "elbv2-multiple-az": {
    "id": "ELBV2_MULTIPLE_AZ",
    "default_name": "elbv2-multiple-az",
    "description": "Checks if an Elastic Load Balancer V2 (Application, Network, or Gateway Load Balancer) has registered instances from multiple Availability Zones (AZ's). The rule is NON_COMPLIANT if an Elastic Load Balancer V2 has instances registered in less than 2 AZ's.",
    "parameters": {
      "required": {},
      "optional": {
        "minAvailabilityZones": {
          "type": "int",
          "description": "Minimum number of expected AZ’s (between 2 and 10 inclusive)."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ElasticLoadBalancingV2::LoadBalancer"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "ELBV2",
      "APPLICATION",
      "NETWORK",
      "GATEWAY",
      "LOAD",
      "BALANCER",
      "AVAILABILITY",
      "ZONE",
      "VPC"
    ]
  },
  "ec2-no-amazon-key-pair": {
    "id": "EC2_NO_AMAZON_KEY_PAIR",
    "default_name": "ec2-no-amazon-key-pair",
    "description": "Checks if running Amazon Elastic Compute Cloud (EC2) instances are launched using amazon key pairs. The rule is NON_COMPLIANT if a running EC2 instance is launched with a key pair.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::Instance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "EC2",
      "INSTANCE",
      "AMAZON",
      "KEY",
      "PAIR"
    ]
  },
  "ecs-fargate-latest-platform-version": {
    "id": "ECS_FARGATE_LATEST_PLATFORM_VERSION",
    "default_name": "ecs-fargate-latest-platform-version",
    "description": "Checks if ECS Fargate services is set to the latest platform version. The rule is NON_COMPLIANT if PlatformVersion for the Fargate launch type is not set to LATEST, or if neither latestLinuxVersion nor latestWindowsVersion are provided as parameters.",
    "parameters": {
      "required": {},
      "optional": {
        "latestLinuxVersion": {
          "type": "String",
          "description": "Latest Linux supported 'PlatformVersion' in semantic versioning (SemVer) format. Parameter may be needed if Fargate was deployed and the 'PlatformVersion' was explicitly specified or CodeDeploy is used as the 'DeploymentController'"
        },
        "latestWindowsVersion": {
          "type": "String",
          "description": "Latest Windows supported 'PlatformVersion' in semantic versioning (SemVer) format. Parameter may be needed if Fargate was deployed and the 'PlatformVersion' was explicitly specified or CodeDeploy is used as the 'DeploymentController'"
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ECS::Service"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "ECS",
      "FARGATE",
      "PLATFORM",
      "LATEST",
      "VERSION",
      "ELASTIC",
      "CONTAINER",
      "SERVICE"
    ]
  },
  "kinesis-stream-encrypted": {
    "id": "KINESIS_STREAM_ENCRYPTED",
    "default_name": "kinesis-stream-encrypted",
    "description": "Checks if Amazon Kinesis streams are encrypted at rest with server-side encryption. The rule is NON_COMPLIANT for a Kinesis stream if 'StreamEncryption' is not present.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::Kinesis::Stream"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "KINESIS",
      "STREAM",
      "ENCRYPTION",
      "DATA"
    ]
  },
  "ec2-transit-gateway-auto-vpc-attach-disabled": {
    "id": "EC2_TRANSIT_GATEWAY_AUTO_VPC_ATTACH_DISABLED",
    "default_name": "ec2-transit-gateway-auto-vpc-attach-disabled",
    "description": "Checks if Amazon Elastic Compute Cloud (Amazon EC2) Transit Gateways have 'AutoAcceptSharedAttachments' enabled. The rule is NON_COMPLIANT for a Transit Gateway if 'AutoAcceptSharedAttachments' is set to 'enable'.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::TransitGateway"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "EC2",
      "GATEWAY",
      "TRANSIT",
      "AUTO",
      "ATTACH",
      "DISABLE",
      "VPC"
    ]
  },
  "nlb-cross-zone-load-balancing-enabled": {
    "id": "NLB_CROSS_ZONE_LOAD_BALANCING_ENABLED",
    "default_name": "nlb-cross-zone-load-balancing-enabled",
    "description": "Checks if cross-zone load balancing is enabled on Network Load Balancers (NLBs). The rule is NON_COMPLIANT if cross-zone load balancing is not enabled for an NLB.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ElasticLoadBalancingV2::LoadBalancer"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "NLB",
      "CROSS",
      "ZONE",
      "LOAD",
      "BALANCER",
      "LOADBALANCER",
      "NETWORK"
    ]
  },
  "sns-topic-message-delivery-notification-enabled": {
    "id": "SNS_TOPIC_MESSAGE_DELIVERY_NOTIFICATION_ENABLED",
    "default_name": "sns-topic-message-delivery-notification-enabled",
    "description": "Checks if Amazon Simple Notification Service (SNS) logging is enabled for the delivery status of notification messages sent to a topic for the endpoints. The rule is NON_COMPLIANT if the delivery status notification for messages is not enabled.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::SNS::Topic"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "SNS",
      "TOPIC",
      "MESSAGE",
      "DELIVERY",
      "NOTIFICATION"
    ]
  },
  "autoscaling-launch-template": {
    "id": "AUTOSCALING_LAUNCH_TEMPLATE",
    "default_name": "autoscaling-launch-template",
    "description": "Checks if an Amazon Elastic Compute Cloud (EC2) Auto Scaling group is created from an EC2 launch template. The rule is NON_COMPLIANT if the scaling group is not created from an EC2 launch template.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::AutoScaling::AutoScalingGroup"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "AUTO",
      "SCALING",
      "GROUP",
      "LAUNCH",
      "TEMPLATE",
      "CONFIGURATION"
    ]
  },
  "efs-access-point-enforce-root-directory": {
    "id": "EFS_ACCESS_POINT_ENFORCE_ROOT_DIRECTORY",
    "default_name": "efs-access-point-enforce-root-directory",
    "description": "Checks if Amazon Elastic File System (Amazon EFS) access points are configured to enforce a root directory. The rule is NON_COMPLIANT if the value of 'Path' is set to '/' (default root directory of the file system).",
    "parameters": {
      "required": {},
      "optional": {
        "approvedDirectories": {
          "type": "CSV",
          "description": "Comma-separated list of subdirectory paths that are approved for Amazon EFS access point root directory enforcement."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EFS::AccessPoint"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "EFS",
      "ACCESS",
      "POINT",
      "ROOT",
      "DIRECTORY",
      "PATH"
    ]
  },
  "s3-event-notifications-enabled": {
    "id": "S3_EVENT_NOTIFICATIONS_ENABLED",
    "default_name": "s3-event-notifications-enabled",
    "description": "Checks if Amazon S3 Events Notifications are enabled on an S3 bucket. The rule is NON_COMPLIANT if S3 Events Notifications are not set on a bucket, or if the event type or destination do not match the eventTypes and destinationArn parameters.",
    "parameters": {
      "required": {},
      "optional": {
        "destinationArn": {
          "type": "String",
          "description": "The Amazon Resource Name (ARN) of the destination for the event notification (Amazon SNS topic, AWS Lambda, Amazon SQS Queue)."
        },
        "eventTypes": {
          "type": "CSV",
          "description": "Comma-separated list of the preferred Amazon S3 event types"
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::S3::Bucket"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "S3",
      "BUCKET",
      "EVENT",
      "NOTIFICATION",
      "DESTINATION"
    ]
  },
  "cloudwatch-alarm-action-enabled-check": {
    "id": "CLOUDWATCH_ALARM_ACTION_ENABLED_CHECK",
    "default_name": "cloudwatch-alarm-action-enabled-check",
    "description": "Checks if Amazon CloudWatch alarms actions are in enabled state. The rule is NON_COMPLIANT if the CloudWatch alarms actions are not in enabled state.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::CloudWatch::Alarm"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "CLOUDWATCH",
      "ALARM",
      "ACTION"
    ]
  },
  "ec2-security-group-attached-to-eni-periodic": {
    "id": "EC2_SECURITY_GROUP_ATTACHED_TO_ENI_PERIODIC",
    "default_name": "ec2-security-group-attached-to-eni-periodic",
    "description": "Checks if non-default security groups are attached to Elastic network interfaces (ENIs). The rule is NON_COMPLIANT if the security group is not associated with an ENI. Security groups not owned by the calling account evaluate as NOT_APPLICABLE.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": [
          "AWS::EC2::SecurityGroup"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "EC2",
      "ENI",
      "NETWORK",
      "INTERFACE",
      "SECURITY",
      "GROUP",
      "PERIODIC",
      "DEFAULT"
    ]
  },
  "codedeploy-lambda-allatonce-traffic-shift-disabled": {
    "id": "CODEDEPLOY_LAMBDA_ALLATONCE_TRAFFIC_SHIFT_DISABLED",
    "default_name": "codedeploy-lambda-allatonce-traffic-shift-disabled",
    "description": "Checks if the deployment group for Lambda Compute Platform is not using the default deployment configuration. The rule is NON_COMPLIANT if the deployment group is using the deployment configuration 'CodeDeployDefault.LambdaAllAtOnce'.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::CodeDeploy::DeploymentGroup"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "CodeDeploy"
    ]
  },
  "codedeploy-auto-rollback-monitor-enabled": {
    "id": "CODEDEPLOY_AUTO_ROLLBACK_MONITOR_ENABLED",
    "default_name": "codedeploy-auto-rollback-monitor-enabled",
    "description": "Checks if the deployment group is configured with automatic deployment rollback and deployment monitoring with alarms attached. The rule is NON_COMPLIANT if AutoRollbackConfiguration or AlarmConfiguration has not been configured or is not enabled.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::CodeDeploy::DeploymentGroup"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "CodeDeploy"
    ]
  },
  "codedeploy-ec2-minimum-healthy-hosts-configured": {
    "id": "CODEDEPLOY_EC2_MINIMUM_HEALTHY_HOSTS_CONFIGURED",
    "default_name": "codedeploy-ec2-minimum-healthy-hosts-configured",
    "description": "Checks if the deployment group for EC2/On-Premises Compute Platform is configured with a minimum healthy hosts fleet percentage or host count greater than or equal to the input threshold. The rule is NON_COMPLIANT if either is below the threshold.",
    "parameters": {
      "required": {},
      "optional": {
        "minimumHealthyHostsFleetPercent": {
          "type": "int",
          "description": "Minimum percentage of healthy hosts fleet during deployment. Default value is set to 66 percent.",
          "defaultValue": "66"
        },
        "minimumHealthyHostsHostCount": {
          "type": "int",
          "description": "Minimum number of healthy hosts in fleet during deployment. Default value is set to 1.",
          "defaultValue": "1"
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::CodeDeploy::DeploymentGroup"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "CodeDeploy"
    ]
  },
  "waf-regional-webacl-not-empty": {
    "id": "WAF_REGIONAL_WEBACL_NOT_EMPTY",
    "default_name": "waf-regional-webacl-not-empty",
    "description": "Checks if a WAF regional Web ACL contains any WAF rules or rule groups. The rule is NON_COMPLIANT if there are no WAF rules or rule groups present within a Web ACL.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::WAFRegional::WebACL"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "WAF",
      "REGIONAL",
      "WEBACL",
      "RULES",
      "GROUPS"
    ]
  },
  "clb-multiple-az": {
    "id": "CLB_MULTIPLE_AZ",
    "default_name": "clb-multiple-az",
    "description": "Checks if a Classic Load Balancer spans multiple Availability Zones (AZs). The rule is NON_COMPLIANT if a Classic Load Balancer spans less than 2 AZs or does not span number of AZs mentioned in the minAvailabilityZones parameter (if provided).",
    "parameters": {
      "required": {},
      "optional": {
        "minAvailabilityZones": {
          "type": "int",
          "description": "Desired minimum number of expected AZs. Valid values are between 2 and 10, both inclusive. Default value is 2 if parameter is not specified."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ElasticLoadBalancing::LoadBalancer"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "CLB",
      "ELB",
      "LOAD",
      "BALANCER",
      "CLASSIC",
      "AVAILABILITY",
      "ZONE",
      "MULTIPLE"
    ]
  },
  "wafv2-rulegroup-not-empty": {
    "id": "WAFV2_RULEGROUP_NOT_EMPTY",
    "default_name": "wafv2-rulegroup-not-empty",
    "description": "Checks if WAFv2 Rule Groups contain rules. The rule is NON_COMPLIANT if there are no rules in a WAFv2 Rule Group.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::WAFv2::RuleGroup"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "WAFV2",
      "RULE",
      "GROUP"
    ]
  },
  "nacl-no-unrestricted-ssh-rdp": {
    "id": "NACL_NO_UNRESTRICTED_SSH_RDP",
    "default_name": "nacl-no-unrestricted-ssh-rdp",
    "description": "Checks if default ports for SSH tcp/22 or RDP tcp/3389 ingress traffic for network access control lists (NACLs) is unrestricted. The rule is NON_COMPLIANT if a NACL inbound entry allows a source CIDR block of '0.0.0.0/0' or '::/0' for ports 22 or 3389.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::NetworkAcl"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "NACL",
      "SSH",
      "RDP",
      "RESTRICTED",
      "NETWORK",
      "ACL",
      "TCP"
    ]
  },
  "ec2-token-hop-limit-check": {
    "id": "EC2_TOKEN_HOP_LIMIT_CHECK",
    "default_name": "ec2-token-hop-limit-check",
    "description": "Checks if an Amazon Elastic Compute Cloud (EC2) instance metadata has a specified token hop limit that is below the desired limit. The rule is NON_COMPLIANT for an instance if it has a hop limit value above the intended limit.",
    "parameters": {
      "required": {},
      "optional": {
        "tokenHopLimit": {
          "type": "int",
          "description": "The desired token hop limit. Valid values are between 1 and 64, both inclusive. Default value is 1 if parameter is not specified."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::Instance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "EC2",
      "TOKEN",
      "HOP",
      "LIMIT",
      "IMDSV2",
      "INSTANCE",
      "METADATA"
    ]
  },
  "waf-regional-rule-not-empty": {
    "id": "WAF_REGIONAL_RULE_NOT_EMPTY",
    "default_name": "waf-regional-rule-not-empty",
    "description": "Checks whether WAF regional rule contains conditions. This rule is COMPLIANT if the regional rule contains at least one condition and NON_COMPLIANT otherwise.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::WAFRegional::Rule"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "WAF",
      "REGIONAL",
      "RULE",
      "CONDITION"
    ]
  },
  "waf-regional-rulegroup-not-empty": {
    "id": "WAF_REGIONAL_RULEGROUP_NOT_EMPTY",
    "default_name": "waf-regional-rulegroup-not-empty",
    "description": "Checks if WAF Regional rule groups contain any rules. The rule is NON_COMPLIANT if there are no rules present within a WAF Regional rule group.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::WAFRegional::RuleGroup"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "WAF",
      "RULE",
      "GROUP",
      "REGIONAL"
    ]
  },
  "redshift-audit-logging-enabled": {
    "id": "REDSHIFT_AUDIT_LOGGING_ENABLED",
    "default_name": "redshift-audit-logging-enabled",
    "description": "Checks if Amazon Redshift clusters are logging audits to a specific bucket. The rule is NON_COMPLIANT if audit logging is not enabled for a Redshift cluster or if the 'bucketNames' parameter is provided but the audit logging destination does not match.",
    "parameters": {
      "required": {},
      "optional": {
        "bucketNames": {
          "type": "CSV",
          "description": "Comma-separated list of Amazon S3 bucket names for storing audit logs."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::Redshift::Cluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "REDSHIFT",
      "AUDIT",
      "LOGGING"
    ]
  },
  "eks-cluster-oldest-supported-version": {
    "id": "EKS_CLUSTER_OLDEST_SUPPORTED_VERSION",
    "default_name": "eks-cluster-oldest-supported-version",
    "description": "Checks if an Amazon Elastic Kubernetes Service (EKS) cluster is running the oldest supported version. The rule is NON_COMPLIANT if an EKS cluster is running oldest supported version (equal to the parameter 'oldestVersionSupported').",
    "parameters": {
      "required": {
        "oldestVersionSupported": {
          "type": "String",
          "description": "Value of the oldest version of Kubernetes supported on AWS."
        }
      },
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EKS::Cluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "EKS",
      "CLUSTER",
      "VERSION",
      "KUBERNETES"
    ]
  },
  "autoscaling-launch-config-hop-limit": {
    "id": "AUTOSCALING_LAUNCH_CONFIG_HOP_LIMIT",
    "default_name": "autoscaling-launch-config-hop-limit",
    "description": "Checks the number of network hops that the metadata token can travel. This rule is NON_COMPLIANT if the Metadata response hop limit is greater than 1.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::AutoScaling::LaunchConfiguration"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "AUTOSCALING",
      "LAUNCH",
      "CONFIG",
      "CONFIGURATION",
      "HOP",
      "LIMIT"
    ]
  },
  "codebuild-project-s3-logs-encrypted": {
    "id": "CODEBUILD_PROJECT_S3_LOGS_ENCRYPTED",
    "default_name": "codebuild-project-s3-logs-encrypted",
    "description": "Checks if a AWS CodeBuild project configured with Amazon S3 Logs has encryption enabled for its logs. The rule is NON_COMPLIANT if ‘encryptionDisabled’ is set to ‘true’ in a S3LogsConfig of a CodeBuild project.",
    "parameters": {
      "required": {},
      "optional": {
        "exemptedProjects": {
          "type": "CSV",
          "description": "Comma-separated list of CodeBuild project names that are allowed to output unencrypted logs."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::CodeBuild::Project"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "CODE",
      "BUILD",
      "PROJECT",
      "S3",
      "NAME",
      "LOGS",
      "ENCRYPTION",
      "CODEBUILD",
      "EXEMPTED"
    ]
  },
  "autoscaling-multiple-az": {
    "id": "AUTOSCALING_MULTIPLE_AZ",
    "default_name": "autoscaling-multiple-az",
    "description": "Checks if the Auto Scaling group spans multiple Availability Zones. The rule is NON_COMPLIANT if the Auto Scaling group does not span multiple Availability Zones.",
    "parameters": {
      "required": {},
      "optional": {
        "minAvailabilityZones": {
          "type": "int",
          "description": "Minimum number of expected Availability zones."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::AutoScaling::AutoScalingGroup"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "ASG",
      "AUTOSCALING",
      "AVAILABILITY",
      "ZONE"
    ]
  },
  "redshift-default-admin-check": {
    "id": "REDSHIFT_DEFAULT_ADMIN_CHECK",
    "default_name": "redshift-default-admin-check",
    "description": "Checks if an Amazon Redshift cluster has changed the admin username from its default value. The rule is NON_COMPLIANT if the admin username for a Redshift cluster is set to “awsuser” or if the username does not match what is listed in parameter.",
    "parameters": {
      "required": {},
      "optional": {
        "validAdminUserNames": {
          "type": "CSV",
          "description": "Comma-separated list of admin username(s) for Redshift clusters to use. Note: 'awsuser' is the default and not accepted."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::Redshift::Cluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "REDSHIFT",
      "USERNAME",
      "CLUSTER",
      "ADMIN",
      "DEFAULT"
    ]
  },
  "codebuild-project-logging-enabled": {
    "id": "CODEBUILD_PROJECT_LOGGING_ENABLED",
    "default_name": "codebuild-project-logging-enabled",
    "description": "Checks if an AWS CodeBuild project environment has at least one log option enabled. The rule is NON_COMPLIANT if the status of all present log configurations is set to 'DISABLED'.",
    "parameters": {
      "required": {},
      "optional": {
        "s3BucketNames": {
          "type": "String",
          "description": "Comma-separated list of Amazon S3 bucket names that logs should be sent to if S3 logs are configured."
        },
        "cloudWatchGroupNames": {
          "type": "String",
          "description": "Comma-separated list of Amazon CloudWatch log group names that logs should be be sent to if CloudWatch logs are configured."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::CodeBuild::Project"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "CODE",
      "BUILD",
      "PROJECT",
      "CODEBUILD",
      "S3",
      "CLOUDWATCH",
      "LOGS"
    ]
  },
  "codebuild-project-artifact-encryption": {
    "id": "CODEBUILD_PROJECT_ARTIFACT_ENCRYPTION",
    "default_name": "codebuild-project-artifact-encryption",
    "description": "Checks if an AWS CodeBuild project has encryption enabled for all of its artifacts. The rule is NON_COMPLIANT if 'encryptionDisabled' is set to 'true' for any primary or secondary (if present) artifact configurations.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::CodeBuild::Project"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "CODEBUILD",
      "ENCRYPTION",
      "ARTIFACT"
    ]
  },
  "codebuild-project-environment-privileged-check": {
    "id": "CODEBUILD_PROJECT_ENVIRONMENT_PRIVILEGED_CHECK",
    "default_name": "codebuild-project-environment-privileged-check",
    "description": "Checks if an AWS CodeBuild project environment has privileged mode enabled. The rule is NON_COMPLIANT for a CodeBuild project if ‘privilegedMode’ is set to ‘true’.",
    "parameters": {
      "required": {},
      "optional": {
        "exemptedProjects": {
          "type": "CSV",
          "description": "Comma-separated list of CodeBuild project names that are allowed to have ‘privilegedMode’ with value ‘true’."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::CodeBuild::Project"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "CODE",
      "BUILD",
      "CODEBUILD",
      "PROJECT",
      "ENVIRONMENT",
      "PRIVILEGED",
      "MODE",
      "EXEMPTED"
    ]
  },
  "s3-lifecycle-policy-check": {
    "id": "S3_LIFECYCLE_POLICY_CHECK",
    "default_name": "s3-lifecycle-policy-check",
    "description": "Checks if a lifecycle rule is configured for an Amazon Simple Storage Service (Amazon S3) bucket. The rule is NON_COMPLIANT if there is no active lifecycle configuration rules or the configuration does not match with the parameter values.",
    "parameters": {
      "required": {},
      "optional": {
        "targetTransitionDays": {
          "type": "int",
          "description": "Number of days after object creation when objects are transitioned to a specified storage class (for example, 30 days)."
        },
        "targetExpirationDays": {
          "type": "int",
          "description": "Number of days after object creation when objects are deleted (for example, 395 days)."
        },
        "targetTransitionStorageClass": {
          "type": "String",
          "description": "Destination storage class type (for example, Amazon S3 Standard-Infrequent Access (S3 Standard-IA). For more information, see https: //docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html."
        },
        "targetPrefix": {
          "type": "String",
          "description": "Amazon S3 Object prefix to identify one or more objects."
        },
        "bucketNames": {
          "type": "CSV",
          "description": "Comma-separated list of Amazon S3 bucket names that have lifecycle policy enabled."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::S3::Bucket"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "S3",
      "LIFECYCLE",
      "POLICY"
    ]
  },
  "ecs-awsvpc-networking-enabled": {
    "id": "ECS_AWSVPC_NETWORKING_ENABLED",
    "default_name": "ecs-awsvpc-networking-enabled",
    "description": "Checks if the networking mode for active ECSTaskDefinitions is set to ‘awsvpc’. This rule is NON_COMPLIANT if active ECSTaskDefinitions is not set to ‘awsvpc’.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ECS::TaskDefinition"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "ECS",
      "CONTAINER",
      "TASK",
      "DEFINITION",
      "NETWORK",
      "AWS",
      "VPC",
      "NETWORKING"
    ]
  },
  "alb-desync-mode-check": {
    "id": "ALB_DESYNC_MODE_CHECK",
    "default_name": "alb-desync-mode-check",
    "description": "Checks if an Application Load Balancer (ALB) is configured with a user defined desync mitigation mode. The rule is NON_COMPLIANT if ALB desync mitigation mode does not match with the user defined desync mitigation mode.",
    "parameters": {
      "required": {
        "desyncMode": {
          "type": "CSV",
          "description": "Comma-separated list, in which customers can choose max 2 values among - 'defensive', 'strictest', and 'monitor'."
        }
      },
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ElasticLoadBalancingV2::LoadBalancer"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "LOADBALANCER",
      "ALB",
      "DESYNC",
      "MITIGATION",
      "MODE",
      "LOAD",
      "BALANCER"
    ]
  },
  "clb-desync-mode-check": {
    "id": "CLB_DESYNC_MODE_CHECK",
    "default_name": "clb-desync-mode-check",
    "description": "Checks if Classic Load Balancers (CLB) are configured with a user defined Desync mitigation mode. The rule is NON_COMPLIANT if CLB Desync mitigation mode does not match with user defined Desync mitigation mode.",
    "parameters": {
      "required": {
        "desyncMode": {
          "type": "CSV",
          "description": "Comma-separated list of values. You can select a max of two. Valid values include 'Defensive', 'Strictest', and 'Monitor'."
        }
      },
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ElasticLoadBalancing::LoadBalancer"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "LOADBALANCER",
      "CLB",
      "DESYNC"
    ]
  },
  "autoscaling-launchconfig-requires-imdsv2": {
    "id": "AUTOSCALING_LAUNCHCONFIG_REQUIRES_IMDSV2",
    "default_name": "autoscaling-launchconfig-requires-imdsv2",
    "description": "Checks whether only IMDSv2 is enabled. This rule is NON_COMPLIANT if the Metadata version is not included in the launch configuration or if both Metadata V1 and V2 are enabled.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::AutoScaling::LaunchConfiguration"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "AUTOSCALING",
      "LAUNCH",
      "CONFIGURATION",
      "CONFIG",
      "IMDSV2",
      "HTTP",
      "TOKENS"
    ]
  },
  "netfw-policy-rule-group-associated": {
    "id": "NETFW_POLICY_RULE_GROUP_ASSOCIATED",
    "default_name": "netfw-policy-rule-group-associated",
    "description": "Check AWS Network Firewall policy is associated with stateful OR stateless rule groups. This rule is NON_COMPLIANT if no stateful or stateless rule groups are associated with the Network Firewall policy else COMPLIANT if any one of the rule group exists.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::NetworkFirewall::FirewallPolicy"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "NETWORK",
      "FIREWALL",
      "POLICY",
      "STATEFUL",
      "STATELESS",
      "RULE",
      "GROUP",
      "NETFW"
    ]
  },
  "netfw-policy-default-action-full-packets": {
    "id": "NETFW_POLICY_DEFAULT_ACTION_FULL_PACKETS",
    "default_name": "netfw-policy-default-action-full-packets",
    "description": "Checks if an AWS Network Firewall policy is configured with a user defined default stateless action for full packets. This rule is NON_COMPLIANT if default stateless action for full packets does not match with user defined default stateless action.",
    "parameters": {
      "required": {
        "statelessDefaultActions": {
          "type": "CSV",
          "description": "Comma-separated list of values. You can select a max of two. Valid values include 'aws:pass', 'aws:drop', and 'aws:forward_to_sfe'."
        }
      },
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::NetworkFirewall::FirewallPolicy"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "NETFW",
      "NETWORK",
      "FIREWALL",
      "POLICY",
      "DEFAULT",
      "ACTION",
      "FULL",
      "PACKETS"
    ]
  },
  "opensearch-node-to-node-encryption-check": {
    "id": "OPENSEARCH_NODE_TO_NODE_ENCRYPTION_CHECK",
    "default_name": "opensearch-node-to-node-encryption-check",
    "description": "Check that Amazon OpenSearch Service nodes are encrypted end to end. The rule is NON_COMPLIANT if the node-to-node encryption is not enabled on the domain",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::OpenSearch::Domain"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "OPENSEARCH",
      "ENCRYPTED",
      "ENCRYPTION",
      "NODE",
      "DOMAIN"
    ]
  },
  "ecs-task-definition-memory-hard-limit": {
    "id": "ECS_TASK_DEFINITION_MEMORY_HARD_LIMIT",
    "default_name": "ecs-task-definition-memory-hard-limit",
    "description": "Checks if Amazon Elastic Container Service (ECS) task definitions have a set memory limit for its container definitions. The rule is NON_COMPLIANT for a task definition if the ‘memory’ parameter is absent for one container definition.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ECS::TaskDefinition"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "ECS",
      "TASK",
      "DEFINITION",
      "MEMORY",
      "CONTAINER"
    ]
  },
  "ecs-task-definition-nonroot-user": {
    "id": "ECS_TASK_DEFINITION_NONROOT_USER",
    "default_name": "ecs-task-definition-nonroot-user",
    "description": "Checks if ECSTaskDefinitions specify a user for Amazon Elastic Container Service (Amazon ECS) EC2 launch type containers to run on. The rule is NON_COMPLIANT if the ‘user’ parameter is not present or set to ‘root’.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ECS::TaskDefinition"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "ECS",
      "TASK",
      "DEFINITION",
      "NONROOT",
      "ROOT",
      "USER"
    ]
  },
  "autoscaling-multiple-instance-types": {
    "id": "AUTOSCALING_MULTIPLE_INSTANCE_TYPES",
    "default_name": "autoscaling-multiple-instance-types",
    "description": "Checks if an Amazon Elastic Compute Cloud (Amazon EC2) Auto Scaling group uses multiple instance types. This rule is NON_COMPLIANT if the Amazon EC2 Auto Scaling group has only one instance type defined.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::AutoScaling::AutoScalingGroup"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "ASG",
      "AUTOSCALING",
      "GROUP",
      "MULTIPLE",
      "MIXED",
      "POLICY",
      "INSTANCE",
      "TYPE"
    ]
  },
  "ecs-containers-readonly-access": {
    "id": "ECS_CONTAINERS_READONLY_ACCESS",
    "default_name": "ecs-containers-readonly-access",
    "description": "Checks if Amazon Elastic Container Service (Amazon ECS) Containers only have read-only access to its root filesystems. The rule is NON_COMPLIANT if the readonlyRootFilesystem parameter in the container definition of ECSTaskDefinitions is set to ‘false’.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ECS::TaskDefinition"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "ECS",
      "CONTAINER",
      "TASK",
      "DEFINITION",
      "READONLY",
      "ROOTFILESYSTEM"
    ]
  },
  "ecs-task-definition-pid-mode-check": {
    "id": "ECS_TASK_DEFINITION_PID_MODE_CHECK",
    "default_name": "ecs-task-definition-pid-mode-check",
    "description": "Checks if ECSTaskDefinitions are configured to share a host’s process namespace with its Amazon Elastic Container Service (Amazon ECS) containers. The rule is NON_COMPLIANT if the pidMode parameter is set to ‘host’.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ECS::TaskDefinition"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "ECS",
      "TASK",
      "DEFINITION",
      "PID",
      "CONTAINER",
      "HOST",
      "NAMESPACE"
    ]
  },
  "opensearch-audit-logging-enabled": {
    "id": "OPENSEARCH_AUDIT_LOGGING_ENABLED",
    "default_name": "opensearch-audit-logging-enabled",
    "description": "Checks if Amazon OpenSearch Service domains have audit logging enabled. The rule is NON_COMPLIANT if an OpenSearch Service domain does not have audit logging enabled.",
    "parameters": {
      "required": {},
      "optional": {
        "cloudWatchLogsLogGroupArnList": {
          "type": "CSV",
          "description": "Comma-separated list of Amazon CloudWatch Logs log groups that should be configured for audit logs."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::OpenSearch::Domain"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "OPENSEARCH",
      "DOMAIN",
      "AUDIT",
      "LOGS",
      "SEARCH",
      "LOGGING"
    ]
  },
  "opensearch-https-required": {
    "id": "OPENSEARCH_HTTPS_REQUIRED",
    "default_name": "opensearch-https-required",
    "description": "Checks whether connections to OpenSearch domains are using HTTPS. The rule is NON_COMPLIANT if the Amazon OpenSearch domain 'EnforceHTTPS' is not 'true' or is 'true' and 'TLSSecurityPolicy' is not in 'tlsPolicies'.",
    "parameters": {
      "required": {},
      "optional": {
        "tlsPolicies": {
          "type": "CSV",
          "description": "Comma-separated list of TLS security policies to check against the Amazon OpensSearch domain."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::OpenSearch::Domain"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "OPENSEARCH",
      "ENCRYPTED",
      "ENCRYPTION",
      "HTTPS",
      "DOMAIN",
      "TLS"
    ]
  },
  "eks-cluster-supported-version": {
    "id": "EKS_CLUSTER_SUPPORTED_VERSION",
    "default_name": "eks-cluster-supported-version",
    "description": "Checks if an Amazon Elastic Kubernetes Service (EKS) cluster is running a supported Kubernetes version. This rule is NON_COMPLIANT if an EKS cluster is running an unsupported version (less than the parameter 'oldestVersionSupported').",
    "parameters": {
      "required": {
        "oldestVersionSupported": {
          "type": "String",
          "description": "Value of the oldest version of Kubernetes supported on AWS."
        }
      },
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EKS::Cluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "EKS",
      "CLUSTER",
      "VERSION",
      "KUBERNETES"
    ]
  },
  "lambda-vpc-multi-az-check": {
    "id": "LAMBDA_VPC_MULTI_AZ_CHECK",
    "default_name": "lambda-vpc-multi-az-check",
    "description": "Checks if Lambda has more than 1 availability zone associated. The rule is NON_COMPLIANT if only 1 availability zone is associated with the Lambda or the number of availability zones associated is less than number specified in the optional parameter.",
    "parameters": {
      "required": {},
      "optional": {
        "availabilityZones": {
          "type": "int",
          "description": "Number of expected Availability zones."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::Lambda::Function"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "LAMBDA",
      "AVAILABILITY",
      "ZONE",
      "FUNCTION",
      "VPC"
    ]
  },
  "ecs-container-insights-enabled": {
    "id": "ECS_CONTAINER_INSIGHTS_ENABLED",
    "default_name": "ecs-container-insights-enabled",
    "description": "Checks if Amazon Elastic Container Service clusters have container insights enabled. The rule is NON_COMPLIANT if container insights are not enabled.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ECS::Cluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "ECS",
      "CONTAINER",
      "INSIGHTS",
      "CLUSTER",
      "ELASTIC"
    ]
  },
  "rds-cluster-default-admin-check": {
    "id": "RDS_CLUSTER_DEFAULT_ADMIN_CHECK",
    "default_name": "rds-cluster-default-admin-check",
    "description": "Checks if an Amazon Relational Database Service (Amazon RDS) database cluster has changed the admin username from its default value. The rule is NON_COMPLIANT if the admin username is set to the default value.",
    "parameters": {
      "required": {},
      "optional": {
        "validAdminUserNames": {
          "type": "CSV",
          "description": "Comma-separated list of admin username(s) that Amazon RDS clusters can use. Cannot include 'postgres' or 'admin' as valid username(s) as these are default values."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBCluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "RDS",
      "USERNAME",
      "ADMIN",
      "ADMINISTRATOR",
      "DATABASE",
      "DEFAULT",
      "POSTGRES",
      "AURORA",
      "CLUSTER",
      "MYSQL"
    ]
  },
  "ecs-task-definition-log-configuration": {
    "id": "ECS_TASK_DEFINITION_LOG_CONFIGURATION",
    "default_name": "ecs-task-definition-log-configuration",
    "description": "Checks if logConfiguration is set on active ECS Task Definitions. This rule is NON_COMPLIANT if an active ECSTaskDefinition does not have the logConfiguration resource defined or the value for logConfiguration is null in at least one container definition.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ECS::TaskDefinition"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "ECS",
      "FARGATE",
      "EC2",
      "TASK",
      "DEFINITION",
      "LOGGING"
    ]
  },
  "s3-bucket-acl-prohibited": {
    "id": "S3_BUCKET_ACL_PROHIBITED",
    "default_name": "s3-bucket-acl-prohibited",
    "description": "Checks if Amazon Simple Storage Service (Amazon S3) Buckets allow user permissions through access control lists (ACLs). The rule is NON_COMPLIANT if ACLs are configured for user access in Amazon S3 Buckets.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::S3::Bucket"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "S3",
      "BUCKET",
      "ACL",
      "ACCESS",
      "CONTROL"
    ]
  },
  "ecr-private-tag-immutability-enabled": {
    "id": "ECR_PRIVATE_TAG_IMMUTABILITY_ENABLED",
    "default_name": "ecr-private-tag-immutability-enabled",
    "description": "Checks if a private Amazon Elastic Container Registry (ECR) repository has tag immutability enabled. This rule is NON_COMPLIANT if tag immutability is not enabled for the private ECR repository.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ECR::Repository"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "ECR",
      "REPOSITORY",
      "IMAGE",
      "TAG",
      "IMMUTABILITY",
      "CONTAINER",
      "REGISTRY",
      "PRIVATE"
    ]
  },
  "netfw-stateless-rule-group-not-empty": {
    "id": "NETFW_STATELESS_RULE_GROUP_NOT_EMPTY",
    "default_name": "netfw-stateless-rule-group-not-empty",
    "description": "Checks if a Stateless Network Firewall Rule Group contains rules. The rule is NON_COMPLIANT if there are no rules in a Stateless Network Firewall Rule Group.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::NetworkFirewall::RuleGroup"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "STATELESS",
      "NETWORK",
      "FIREWALL",
      "RULE",
      "GROUP",
      "NETFW"
    ]
  },
  "opensearch-data-node-fault-tolerance": {
    "id": "OPENSEARCH_DATA_NODE_FAULT_TOLERANCE",
    "default_name": "opensearch-data-node-fault-tolerance",
    "description": "Checks if Amazon OpenSearch Service domains are configured with at least three data nodes and zoneAwarenessEnabled is true. The rule is NON_COMPLIANT for an OpenSearch domain if 'instanceCount' is less than 3 or 'zoneAwarenessEnabled' is set to 'false'.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::OpenSearch::Domain"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "OPENSEARCH",
      "DATA",
      "NODE",
      "INSTANCE",
      "FAULT",
      "TOLERANCE",
      "HIGH",
      "AVAILABILITY"
    ]
  },
  "opensearch-encrypted-at-rest": {
    "id": "OPENSEARCH_ENCRYPTED_AT_REST",
    "default_name": "opensearch-encrypted-at-rest",
    "description": "Checks if Amazon OpenSearch Service domains have encryption at rest configuration enabled. The rule is NON_COMPLIANT if EncryptionAtRestOptions field is not enabled.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::OpenSearch::Domain"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "OPENSEARCH",
      "DOMAIN",
      "ENCRYPTED",
      "ENCRYPTION",
      "REST"
    ]
  },
  "rds-instance-default-admin-check": {
    "id": "RDS_INSTANCE_DEFAULT_ADMIN_CHECK",
    "default_name": "rds-instance-default-admin-check",
    "description": "Checks if an Amazon Relational Database Service (Amazon RDS) database has changed the admin username from its default value. This rule will only run on RDS database instances. The rule is NON_COMPLIANT if the admin username is set to the default value.",
    "parameters": {
      "required": {},
      "optional": {
        "validAdminUserNames": {
          "type": "CSV",
          "description": "Comma-separated list of admin username(s) that Amazon RDS instances can use. (Cannot include 'postgres' or 'admin' as valid username(s) as these are default values.)"
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBInstance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "RDS",
      "USERNAME",
      "ADMIN",
      "ADMINISTRATOR",
      "DATABASE",
      "DEFAULT",
      "POSTGRES",
      "AURORA",
      "INSTANCE",
      "POSTGRESQL"
    ]
  },
  "opensearch-access-control-enabled": {
    "id": "OPENSEARCH_ACCESS_CONTROL_ENABLED",
    "default_name": "opensearch-access-control-enabled",
    "description": "Checks if Amazon OpenSearch Service domains have fine-grained access control enabled. The rule is NON_COMPLIANT if AdvancedSecurityOptions is not enabled for the OpenSearch Service domain.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::OpenSearch::Domain"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "OPENSEARCH",
      "DOMAIN",
      "ACCESS",
      "CONTROL",
      "ENABLED"
    ]
  },
  "ecs-containers-nonprivileged": {
    "id": "ECS_CONTAINERS_NONPRIVILEGED",
    "default_name": "ecs-containers-nonprivileged",
    "description": "Checks if the privileged parameter in the container definition of ECSTaskDefinitions is set to ‘true’. The rule is NON_COMPLIANT if the privileged parameter is ‘true’.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ECS::TaskDefinition"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "ECS",
      "CONTAINER",
      "TASK",
      "DEFINITION",
      "PRIVILEGED",
      "USER"
    ]
  },
  "autoscaling-capacity-rebalancing": {
    "id": "AUTOSCALING_CAPACITY_REBALANCING",
    "default_name": "autoscaling-capacity-rebalancing",
    "description": "Checks if Capacity Rebalancing is enabled for Amazon EC2 Auto Scaling groups that use multiple instance types. The rule is NON_COMPLIANT if capacity Rebalancing is not enabled.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::AutoScaling::AutoScalingGroup"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "AUTOSCALING",
      "GROUP",
      "CAPACITY",
      "REBALANCING"
    ]
  },
  "netfw-policy-default-action-fragment-packets": {
    "id": "NETFW_POLICY_DEFAULT_ACTION_FRAGMENT_PACKETS",
    "default_name": "netfw-policy-default-action-fragment-packets",
    "description": "Checks if an AWS Network Firewall policy is configured with a user defined stateless default action for fragmented packets. The rule is NON_COMPLIANT if stateless default action for fragmented packets does not match with user defined default action.",
    "parameters": {
      "required": {
        "statelessFragmentDefaultActions": {
          "type": "CSV",
          "description": "Comma-separated list of values. You can select a max of two. Valid values include 'aws:pass', 'aws:drop', and 'aws:forward_to_sfe'."
        }
      },
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::NetworkFirewall::FirewallPolicy"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "NETFW",
      "NETWORK",
      "FIREWALL",
      "POLICY",
      "DEFAULT",
      "ACTION",
      "FRAGMENT",
      "PACKETS"
    ]
  },
  "s3-version-lifecycle-policy-check": {
    "id": "S3_VERSION_LIFECYCLE_POLICY_CHECK",
    "default_name": "s3-version-lifecycle-policy-check",
    "description": "Checks if Amazon Simple Storage Service (Amazon S3) version enabled buckets have lifecycle policy configured. The rule is NON_COMPLIANT if Amazon S3 lifecycle policy is not enabled.",
    "parameters": {
      "required": {},
      "optional": {
        "bucketNames": {
          "type": "CSV",
          "description": "Comma-separated list of Amazon S3 bucket names that have lifecycle policy enabled."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::S3::Bucket"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "S3",
      "VERSION",
      "VERSIONING",
      "LIFECYCLE",
      "POLICY"
    ]
  },
  "ecr-private-image-scanning-enabled": {
    "id": "ECR_PRIVATE_IMAGE_SCANNING_ENABLED",
    "default_name": "ecr-private-image-scanning-enabled",
    "description": "Checks if a private Amazon Elastic Container Registry (ECR) repository has image scanning enabled. The rule is NON_COMPLIANT if the private ECR repository's scan frequency is not on scan on push or continuous scan.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": [
          "AWS::ECR::Repository"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "ECR",
      "ELASTIC",
      "CONTAINER",
      "REGISTRY",
      "REPOSITORY",
      "PRIVATE",
      "IMAGE",
      "SCANNING",
      "ENABLED",
      "PERIODIC"
    ]
  },
  "opensearch-in-vpc-only": {
    "id": "OPENSEARCH_IN_VPC_ONLY",
    "default_name": "opensearch-in-vpc-only",
    "description": "Checks if Amazon OpenSearch Service domains are in an Amazon Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if an OpenSearch Service domain endpoint is public.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::OpenSearch::Domain"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "OPENSEARCH",
      "DOMAIN",
      "VPC"
    ]
  },
  "opensearch-logs-to-cloudwatch": {
    "id": "OPENSEARCH_LOGS_TO_CLOUDWATCH",
    "default_name": "opensearch-logs-to-cloudwatch",
    "description": "Checks if Amazon OpenSearch Service domains are configured to send logs to Amazon CloudWatch Logs. The rule is NON_COMPLIANT if logging is not configured.",
    "parameters": {
      "required": {},
      "optional": {
        "logTypes": {
          "type": "CSV",
          "description": "Comma-separated list of logs that are enabled. Valid values are 'search', 'index', 'error'."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::OpenSearch::Domain"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "OPENSEARCH",
      "LOGS",
      "CLOUDWATCH",
      "SEARCH",
      "INDEX",
      "ERROR"
    ]
  },
  "ecs-no-environment-secrets": {
    "id": "ECS_NO_ENVIRONMENT_SECRETS",
    "default_name": "ecs-no-environment-secrets",
    "description": "Checks if secrets are passed as container environment variables. The rule is NON_COMPLIANT if 1 or more environment variable key matches a key listed in the 'secretKeys' parameter (excluding environmental variables from other locations such as Amazon S3).",
    "parameters": {
      "required": {
        "secretKeys": {
          "type": "CSV",
          "description": "Comma-separated list of key names to search for in the environment variables of container definitions within Task Definitions. Extra spaces will be removed."
        }
      },
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ECS::TaskDefinition"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "ECS",
      "FARGATE",
      "EC2",
      "TASK",
      "DEFINITION",
      "SSM",
      "ENVIRONMENT",
      "VARIABLES",
      "CONTAINER"
    ]
  },
  "s3-resources-protected-by-backup-plan": {
    "id": "S3_RESOURCES_PROTECTED_BY_BACKUP_PLAN",
    "default_name": "s3-resources-protected-by-backup-plan",
    "description": "Checks if Amazon Simple Storage Service (Amazon S3) buckets are protected by a backup plan. The rule is NON_COMPLIANT if the Amazon S3 bucket is not covered by a backup plan.",
    "parameters": {
      "required": {},
      "optional": {
        "resourceTags": {
          "type": "String",
          "description": "Tags for Amazon S3 buckets for the rule to check, in JSON format."
        },
        "resourceId": {
          "type": "String",
          "description": "Name of Amazon S3 bucket for the rule to check."
        },
        "crossRegionList": {
          "type": "String",
          "description": "Comma-separated list of destination regions for the cross-region backup copy to be kept"
        },
        "crossAccountList": {
          "type": "String",
          "description": "Comma-separated list of destination accounts for cross-account backup copy to be kept"
        },
        "maxRetentionDays": {
          "type": "int",
          "description": "The maximum retention period in days for the Backup Vault Lock"
        },
        "minRetentionDays": {
          "type": "int",
          "description": "The minimum retention period in days for the Backup Vault Lock"
        },
        "backupVaultLockCheck": {
          "type": "String",
          "description": "Accepted values: 'True' or 'False'. Enter 'True' for the rule to check if the resource is backed up in a locked vault"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": [
          "AWS::S3::Bucket"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "AWSBackup"
    ]
  },
  "s3-last-backup-recovery-point-created": {
    "id": "S3_LAST_BACKUP_RECOVERY_POINT_CREATED",
    "default_name": "s3-last-backup-recovery-point-created",
    "description": "Checks if a recovery point was created for Amazon Simple Storage Service (Amazon S3). The rule is NON_COMPLIANT if the Amazon S3 bucket does not have a corresponding recovery point created within the specified time period.",
    "parameters": {
      "required": {},
      "optional": {
        "resourceTags": {
          "type": "String",
          "description": "Tags of Amazon S3 bucket for the rule to check, in JSON format."
        },
        "resourceId": {
          "type": "String",
          "description": "Name of Amazon S3 bucket for the rule to check."
        },
        "recoveryPointAgeValue": {
          "type": "int",
          "description": "Numerical value for maximum allowed age. No more than 744 for hours, 31 for days.",
          "defaultValue": "1"
        },
        "recoveryPointAgeUnit": {
          "type": "String",
          "description": "Unit of time for maximum allowed age. Accepted values: 'hours', 'days'.",
          "defaultValue": "days"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": [
          "AWS::S3::Bucket"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "AWSBackup"
    ]
  },
  "dynamodb-last-backup-recovery-point-created": {
    "id": "DYNAMODB_LAST_BACKUP_RECOVERY_POINT_CREATED",
    "default_name": "dynamodb-last-backup-recovery-point-created",
    "description": "Checks if a recovery point was created for Amazon DynamoDB Tables within the specified period. The rule is NON_COMPLIANT if the DynamoDB Table does not have a corresponding recovery point created within the specified time period.",
    "parameters": {
      "required": {},
      "optional": {
        "resourceTags": {
          "type": "String",
          "description": "Tags of the DynamoDB Tables for the rule to check, in JSON format."
        },
        "resourceId": {
          "type": "String",
          "description": "Name of DynamoDB Table for the rule to check."
        },
        "recoveryPointAgeValue": {
          "type": "int",
          "description": "Numerical value for maximum allowed age. No more than 744 for hours, 31 for days.",
          "defaultValue": "1"
        },
        "recoveryPointAgeUnit": {
          "type": "String",
          "description": "Unit of time for maximum allowed age. Accepted values: 'hours', 'days'.",
          "defaultValue": "days"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": [
          "AWS::DynamoDB::Table"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "AWSBackup"
    ]
  },
  "ebs-last-backup-recovery-point-created": {
    "id": "EBS_LAST_BACKUP_RECOVERY_POINT_CREATED",
    "default_name": "ebs-last-backup-recovery-point-created",
    "description": "Checks if a recovery point was created for Amazon Elastic Block Store (Amazon EBS). The rule is NON_COMPLIANT if the Amazon EBS volume does not have a corresponding recovery point created within the specified time period.",
    "parameters": {
      "required": {},
      "optional": {
        "resourceTags": {
          "type": "String",
          "description": "Tags of Amazon EBS volumes for the rule to check, in JSON format."
        },
        "resourceId": {
          "type": "String",
          "description": "ID of Amazon EBS volume for the rule to check."
        },
        "recoveryPointAgeValue": {
          "type": "int",
          "description": "Numerical value for maximum allowed age. No more than 744 for hours, 31 for days.",
          "defaultValue": "1"
        },
        "recoveryPointAgeUnit": {
          "type": "String",
          "description": "Unit of time for maximum allowed age. Accepted values: 'hours', 'days'.",
          "defaultValue": "days"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": [
          "AWS::EC2::Volume"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "AWSBackup"
    ]
  },
  "fsx-resources-protected-by-backup-plan": {
    "id": "FSX_RESOURCES_PROTECTED_BY_BACKUP_PLAN",
    "default_name": "fsx-resources-protected-by-backup-plan",
    "description": "Checks if Amazon FSx File Systems are protected by a backup plan. The rule is NON_COMPLIANT if the Amazon FSx File System is not covered by a backup plan.",
    "parameters": {
      "required": {},
      "optional": {
        "resourceTags": {
          "type": "String",
          "description": "Tags of Amazon FSx File Systems for the rule to check, in JSON format."
        },
        "resourceId": {
          "type": "String",
          "description": "ID of the Amazon FSx File System for the rule to check."
        },
        "crossRegionList": {
          "type": "String",
          "description": "Comma-separated list of destination regions for the cross-region backup copy to be kept"
        },
        "crossAccountList": {
          "type": "String",
          "description": "Comma-separated list of destination accounts for cross-account backup copy to be kept"
        },
        "maxRetentionDays": {
          "type": "int",
          "description": "The maximum retention period in days for the Backup Vault Lock"
        },
        "minRetentionDays": {
          "type": "int",
          "description": "The minimum retention period in days for the Backup Vault Lock"
        },
        "backupVaultLockCheck": {
          "type": "String",
          "description": "Accepted values: 'True' or 'False'. Enter 'True' for the rule to check if the resource is backed up in a locked vault"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": []
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "AWSBackup"
    ]
  },
  "backup-recovery-point-manual-deletion-disabled": {
    "id": "BACKUP_RECOVERY_POINT_MANUAL_DELETION_DISABLED",
    "default_name": "backup-recovery-point-manual-deletion-disabled",
    "description": "Checks if a backup vault has an attached resource-based policy which prevents deletion of recovery points. The rule is NON_COMPLIANT if the Backup Vault does not have resource-based policies or has policies without a suitable 'Deny' statement.",
    "parameters": {
      "required": {},
      "optional": {
        "principalArnList": {
          "type": "CSV",
          "description": "Comma-separated list of AWS Identity and Access Management (IAM) Amazon Resource Names (ARNs) for the rule to NOT check."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::Backup::BackupVault"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "AWSBackup"
    ]
  },
  "dynamodb-resources-protected-by-backup-plan": {
    "id": "DYNAMODB_RESOURCES_PROTECTED_BY_BACKUP_PLAN",
    "default_name": "dynamodb-resources-protected-by-backup-plan",
    "description": "Checks if Amazon DynamoDB tables are protected by a backup plan. The rule is NON_COMPLIANT if the DynamoDB Table is not covered by a backup plan.",
    "parameters": {
      "required": {},
      "optional": {
        "resourceTags": {
          "type": "String",
          "description": "Tags for DynamoDB tables for the rule to check, in JSON format."
        },
        "resourceId": {
          "type": "String",
          "description": "Name of DynamoDB table for the rule to check."
        },
        "crossRegionList": {
          "type": "String",
          "description": "Comma-separated list of destination regions for the cross-region backup copy to be kept"
        },
        "crossAccountList": {
          "type": "String",
          "description": "Comma-separated list of destination accounts for cross-account backup copy to be kept"
        },
        "maxRetentionDays": {
          "type": "int",
          "description": "The maximum retention period in days for the Backup Vault Lock"
        },
        "minRetentionDays": {
          "type": "int",
          "description": "The minimum retention period in days for the Backup Vault Lock"
        },
        "backupVaultLockCheck": {
          "type": "String",
          "description": "Accepted values: 'True' or 'False'. Enter 'True' for the rule to check if the resource is backed up in a locked vault"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": [
          "AWS::DynamoDB::Table"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "AWSBackup"
    ]
  },
  "efs-resources-protected-by-backup-plan": {
    "id": "EFS_RESOURCES_PROTECTED_BY_BACKUP_PLAN",
    "default_name": "efs-resources-protected-by-backup-plan",
    "description": "Checks if Amazon Elastic File System (Amazon EFS) File Systems are protected by a backup plan. The rule is NON_COMPLIANT if the EFS File System is not covered by a backup plan.",
    "parameters": {
      "required": {},
      "optional": {
        "resourceTags": {
          "type": "String",
          "description": "Tags for EFS File Systems for the rule to check, in JSON format."
        },
        "resourceId": {
          "type": "String",
          "description": "ID of the EFS File System for the rule to check."
        },
        "crossRegionList": {
          "type": "String",
          "description": "Comma-separated list of destination regions for the cross-region backup copy to be kept"
        },
        "crossAccountList": {
          "type": "String",
          "description": "Comma-separated list of destination accounts for cross-account backup copy to be kept"
        },
        "maxRetentionDays": {
          "type": "int",
          "description": "The maximum retention period in days for the Backup Vault Lock"
        },
        "minRetentionDays": {
          "type": "int",
          "description": "The minimum retention period in days for the Backup Vault Lock"
        },
        "backupVaultLockCheck": {
          "type": "String",
          "description": "Accepted values: 'True' or 'False'. Enter 'True' for the rule to check if the resource is backed up in a locked vault"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": [
          "AWS::EFS::FileSystem"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "AWSBackup"
    ]
  },
  "storagegateway-last-backup-recovery-point-created": {
    "id": "STORAGEGATEWAY_LAST_BACKUP_RECOVERY_POINT_CREATED",
    "default_name": "storagegateway-last-backup-recovery-point-created",
    "description": "Checks if a recovery point was created for AWS Storage Gateway volumes. The rule is NON_COMPLIANT if the Storage Gateway volume does not have a corresponding recovery point created within the specified time period.",
    "parameters": {
      "required": {},
      "optional": {
        "resourceTags": {
          "type": "String",
          "description": "Tags of Storage Gateway volumes for the rule to check, in JSON format."
        },
        "resourceId": {
          "type": "String",
          "description": "ID of Storage Gateway volume for the rule to check."
        },
        "recoveryPointAgeValue": {
          "type": "int",
          "description": "Numerical value for maximum allowed age. No more than 744 for hours, 31 for days.",
          "defaultValue": "1"
        },
        "recoveryPointAgeUnit": {
          "type": "String",
          "description": "Unit of time for maximum allowed age. Accepted values: 'hours', 'days'.",
          "defaultValue": "days"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": []
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "AWSBackup"
    ]
  },
  "backup-recovery-point-encrypted": {
    "id": "BACKUP_RECOVERY_POINT_ENCRYPTED",
    "default_name": "backup-recovery-point-encrypted",
    "description": "Checks if a recovery point is encrypted. The rule is NON_COMPLIANT if the recovery point is not encrypted.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::Backup::RecoveryPoint"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "AWSBackup"
    ]
  },
  "fsx-last-backup-recovery-point-created": {
    "id": "FSX_LAST_BACKUP_RECOVERY_POINT_CREATED",
    "default_name": "fsx-last-backup-recovery-point-created",
    "description": "Checks if a recovery point was created for Amazon FSx File Systems. The rule is NON_COMPLIANT if the Amazon FSx File System does not have a corresponding recovery point created within the specified time period.",
    "parameters": {
      "required": {},
      "optional": {
        "resourceTags": {
          "type": "String",
          "description": "Tags of Amazon FSx File Systems for the rule to check, in JSON format."
        },
        "resourceId": {
          "type": "String",
          "description": "ID of Amazon FSx File System for the rule to check."
        },
        "recoveryPointAgeValue": {
          "type": "int",
          "description": "Numerical value for maximum allowed age. No more than 744 for hours, 31 for days.",
          "defaultValue": "1"
        },
        "recoveryPointAgeUnit": {
          "type": "String",
          "description": "Unit of time for maximum allowed age. Accepted values: 'hours', 'days'.",
          "defaultValue": "days"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": []
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "AWSBackup"
    ]
  },
  "rds-last-backup-recovery-point-created": {
    "id": "RDS_LAST_BACKUP_RECOVERY_POINT_CREATED",
    "default_name": "rds-last-backup-recovery-point-created",
    "description": "Checks if a recovery point was created for Amazon Relational Database Service (Amazon RDS). The rule is NON_COMPLIANT if the Amazon RDS instance does not have a corresponding recovery point created within the specified time period.",
    "parameters": {
      "required": {},
      "optional": {
        "resourceTags": {
          "type": "String",
          "description": "Tags of Amazon RDS instances for the rule to check, in JSON format."
        },
        "resourceId": {
          "type": "String",
          "description": "ID of Amazon RDS instance for the rule to check."
        },
        "recoveryPointAgeValue": {
          "type": "int",
          "description": "Numerical value for maximum allowed age. No more than 744 for hours, 31 for days.",
          "defaultValue": "1"
        },
        "recoveryPointAgeUnit": {
          "type": "String",
          "description": "Unit of time for maximum allowed age. Accepted values: 'hours', 'days'.",
          "defaultValue": "days"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBInstance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "AWSBackup"
    ]
  },
  "ec2-last-backup-recovery-point-created": {
    "id": "EC2_LAST_BACKUP_RECOVERY_POINT_CREATED",
    "default_name": "ec2-last-backup-recovery-point-created",
    "description": "Checks if a recovery point was created for Amazon Elastic Compute Cloud (Amazon EC2) instances. The rule is NON_COMPLIANT if the Amazon EC2 instance does not have a corresponding recovery point created within the specified time period.",
    "parameters": {
      "required": {},
      "optional": {
        "resourceTags": {
          "type": "String",
          "description": "Tags of Amazon EC2 instances for the rule to check, in JSON format."
        },
        "resourceId": {
          "type": "String",
          "description": "ID of Amazon EC2 instance for the rule to check."
        },
        "recoveryPointAgeValue": {
          "type": "int",
          "description": "Numerical value for maximum allowed age. No more than 744 for hours, 31 for days.",
          "defaultValue": "1"
        },
        "recoveryPointAgeUnit": {
          "type": "String",
          "description": "Unit of time for maximum allowed age. Accepted values: 'hours', 'days'.",
          "defaultValue": "days"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": [
          "AWS::EC2::Instance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "AWSBackup"
    ]
  },
  "ec2-resources-protected-by-backup-plan": {
    "id": "EC2_RESOURCES_PROTECTED_BY_BACKUP_PLAN",
    "default_name": "ec2-resources-protected-by-backup-plan",
    "description": "Checks if Amazon Elastic Compute Cloud (Amazon EC2) instances are protected by a backup plan. The rule is NON_COMPLIANT if the Amazon EC2 instance is not covered by a backup plan.",
    "parameters": {
      "required": {},
      "optional": {
        "resourceTags": {
          "type": "String",
          "description": "Tags for Amazon EC2 instances for the rule to check, in JSON format."
        },
        "resourceId": {
          "type": "String",
          "description": "ID of Amazon EC2 instance for the rule to check."
        },
        "crossRegionList": {
          "type": "String",
          "description": "Comma-separated list of destination regions for the cross-region backup copy to be kept"
        },
        "crossAccountList": {
          "type": "String",
          "description": "Comma-separated list of destination accounts for cross-account backup copy to be kept"
        },
        "maxRetentionDays": {
          "type": "int",
          "description": "The maximum retention period in days for the Backup Vault Lock"
        },
        "minRetentionDays": {
          "type": "int",
          "description": "The minimum retention period in days for the Backup Vault Lock"
        },
        "backupVaultLockCheck": {
          "type": "String",
          "description": "Accepted values: 'True' or 'False'. Enter 'True' for the rule to check if the resource is backed up in a locked vault"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": [
          "AWS::EC2::Instance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "AWSBackup"
    ]
  },
  "storagegateway-resources-protected-by-backup-plan": {
    "id": "STORAGEGATEWAY_RESOURCES_PROTECTED_BY_BACKUP_PLAN",
    "default_name": "storagegateway-resources-protected-by-backup-plan",
    "description": "Checks if AWS Storage Gateway volumes are protected by a backup plan. The rule is NON_COMPLIANT if the Storage Gateway volume is not covered by a backup plan.",
    "parameters": {
      "required": {},
      "optional": {
        "resourceTags": {
          "type": "String",
          "description": "Tags for Storage Gateway Volumes for the rule to check, in JSON format."
        },
        "resourceId": {
          "type": "String",
          "description": "ID of Storage Gateway volume for the rule to check."
        },
        "crossRegionList": {
          "type": "String",
          "description": "Comma-separated list of destination regions for the cross-region backup copy to be kept"
        },
        "crossAccountList": {
          "type": "String",
          "description": "Comma-separated list of destination accounts for cross-account backup copy to be kept"
        },
        "maxRetentionDays": {
          "type": "int",
          "description": "The maximum retention period in days for the Backup Vault Lock"
        },
        "minRetentionDays": {
          "type": "int",
          "description": "The minimum retention period in days for the Backup Vault Lock"
        },
        "backupVaultLockCheck": {
          "type": "String",
          "description": "Accepted values: 'True' or 'False'. Enter 'True' for the rule to check if the resource is backed up in a locked vault"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": []
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "AWSBackup"
    ]
  },
  "aurora-last-backup-recovery-point-created": {
    "id": "AURORA_LAST_BACKUP_RECOVERY_POINT_CREATED",
    "default_name": "aurora-last-backup-recovery-point-created",
    "description": "Checks if a recovery point was created for Amazon Aurora DB clusters. The rule is NON_COMPLIANT if the Amazon Relational Database Service (Amazon RDS) DB Cluster does not have a corresponding recovery point created within the specified time period.",
    "parameters": {
      "required": {},
      "optional": {
        "resourceTags": {
          "type": "String",
          "description": "Tags of Aurora DB clusters for the rule to check, in JSON format."
        },
        "resourceId": {
          "type": "String",
          "description": "ID of Aurora DB cluster for the rule to check."
        },
        "recoveryPointAgeValue": {
          "type": "int",
          "description": "Numerical value for maximum allowed age. No more than 744 for hours, 31 for days.",
          "defaultValue": "1"
        },
        "recoveryPointAgeUnit": {
          "type": "String",
          "description": "Unit of time for maximum allowed age. Accepted values: 'hours', 'days'.",
          "defaultValue": "days"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBCluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "AWSBackup"
    ]
  },
  "rds-resources-protected-by-backup-plan": {
    "id": "RDS_RESOURCES_PROTECTED_BY_BACKUP_PLAN",
    "default_name": "rds-resources-protected-by-backup-plan",
    "description": "Checks if Amazon Relational Database Service (Amazon RDS) instances are protected by a backup plan. The rule is NON_COMPLIANT if the Amazon RDS Database instance is not covered by a backup plan.",
    "parameters": {
      "required": {},
      "optional": {
        "resourceTags": {
          "type": "String",
          "description": "Tags for Amazon RDS instances for the rule to check, in JSON format."
        },
        "resourceId": {
          "type": "String",
          "description": "ID of Amazon RDS instance for the rule to check."
        },
        "crossRegionList": {
          "type": "String",
          "description": "Comma-separated list of destination regions for the cross-region backup copy to be kept"
        },
        "crossAccountList": {
          "type": "String",
          "description": "Comma-separated list of destination accounts for cross-account backup copy to be kept"
        },
        "maxRetentionDays": {
          "type": "int",
          "description": "The maximum retention period in days for the Backup Vault Lock"
        },
        "minRetentionDays": {
          "type": "int",
          "description": "The minimum retention period in days for the Backup Vault Lock"
        },
        "backupVaultLockCheck": {
          "type": "String",
          "description": "Accepted values: 'True' or 'False'. Enter 'True' for the rule to check if the resource is backed up in a locked vault"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBInstance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "AWSBackup"
    ]
  },
  "backup-plan-min-frequency-and-min-retention-check": {
    "id": "BACKUP_PLAN_MIN_FREQUENCY_AND_MIN_RETENTION_CHECK",
    "default_name": "backup-plan-min-frequency-and-min-retention-check",
    "description": "Checks if a backup plan has a backup rule that satisfies the required frequency and retention period. The rule is NON_COMPLIANT if recovery points are not created at least as often as the specified frequency or expire before the specified period.",
    "parameters": {
      "required": {},
      "optional": {
        "requiredFrequencyValue": {
          "type": "int",
          "description": "Numerical value for required backup frequency. Maximum of 24 for hours, 31 for days.",
          "defaultValue": "1"
        },
        "requiredRetentionDays": {
          "type": "int",
          "description": "Required retention period in days.",
          "defaultValue": "35"
        },
        "requiredFrequencyUnit": {
          "type": "String",
          "description": "Unit of time for required backup frequency. Accepted values: 'hours', 'days'.",
          "defaultValue": "days"
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::Backup::BackupPlan"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "AWSBackup"
    ]
  },
  "ebs-resources-protected-by-backup-plan": {
    "id": "EBS_RESOURCES_PROTECTED_BY_BACKUP_PLAN",
    "default_name": "ebs-resources-protected-by-backup-plan",
    "description": "Checks if Amazon Elastic Block Store (Amazon EBS) volumes are protected by a backup plan. The rule is NON_COMPLIANT if the Amazon EBS volume is not covered by a backup plan.",
    "parameters": {
      "required": {},
      "optional": {
        "resourceTags": {
          "type": "String",
          "description": "Tags for Amazon EBS volumes for the rule to check, in JSON format."
        },
        "resourceId": {
          "type": "String",
          "description": "ID of Amazon EBS volume for the rule to check."
        },
        "crossRegionList": {
          "type": "String",
          "description": "Comma-separated list of destination regions for the cross-region backup copy to be kept"
        },
        "crossAccountList": {
          "type": "String",
          "description": "Comma-separated list of destination accounts for cross-account backup copy to be kept"
        },
        "maxRetentionDays": {
          "type": "int",
          "description": "The maximum retention period in days for the Backup Vault Lock"
        },
        "minRetentionDays": {
          "type": "int",
          "description": "The minimum retention period in days for the Backup Vault Lock"
        },
        "backupVaultLockCheck": {
          "type": "String",
          "description": "Accepted values: 'True' or 'False'. Enter 'True' for the rule to check if the resource is backed up in a locked vault"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": [
          "AWS::EC2::Volume"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "AWSBackup"
    ]
  },
  "aurora-resources-protected-by-backup-plan": {
    "id": "AURORA_RESOURCES_PROTECTED_BY_BACKUP_PLAN",
    "default_name": "aurora-resources-protected-by-backup-plan",
    "description": "Checks if Amazon Aurora DB clusters are protected by a backup plan. The rule is NON_COMPLIANT if the Amazon Relational Database Service (Amazon RDS) Database Cluster is not protected by a backup plan.",
    "parameters": {
      "required": {},
      "optional": {
        "resourceTags": {
          "type": "String",
          "description": "Tags of Aurora DB clusters for the rule to check, in JSON format."
        },
        "resourceId": {
          "type": "String",
          "description": "ID of Aurora DB cluster for the rule to check."
        },
        "crossRegionList": {
          "type": "String",
          "description": "Comma-separated list of destination regions for the cross-region backup copy to be kept"
        },
        "crossAccountList": {
          "type": "String",
          "description": "Comma-separated list of destination accounts for cross-account backup copy to be kept"
        },
        "maxRetentionDays": {
          "type": "int",
          "description": "The maximum retention period in days for the Backup Vault Lock"
        },
        "minRetentionDays": {
          "type": "int",
          "description": "The minimum retention period in days for the Backup Vault Lock"
        },
        "backupVaultLockCheck": {
          "type": "String",
          "description": "Accepted values: 'True' or 'False'. Enter 'True' for the rule to check if the resource is backed up in a locked vault"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBCluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "AWSBackup"
    ]
  },
  "backup-recovery-point-minimum-retention-check": {
    "id": "BACKUP_RECOVERY_POINT_MINIMUM_RETENTION_CHECK",
    "default_name": "backup-recovery-point-minimum-retention-check",
    "description": "Checks if a recovery point expires no earlier than after the specified period. The rule is NON_COMPLIANT if the recovery point has a retention point that is less than the required retention period.",
    "parameters": {
      "required": {},
      "optional": {
        "requiredRetentionDays": {
          "type": "int",
          "description": "Required retention period in days.",
          "defaultValue": "35"
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::Backup::RecoveryPoint"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "AWSBackup"
    ]
  },
  "efs-last-backup-recovery-point-created": {
    "id": "EFS_LAST_BACKUP_RECOVERY_POINT_CREATED",
    "default_name": "efs-last-backup-recovery-point-created",
    "description": "Checks if a recovery point was created for Amazon Elastic File System (Amazon EFS) File Systems. The rule is NON_COMPLIANT if the Amazon EFS File System does not have a corresponding Recovery Point created within the specified time period.",
    "parameters": {
      "required": {},
      "optional": {
        "resourceTags": {
          "type": "String",
          "description": "Tags of Amazon EFS File Systems for the rule to check, in JSON format."
        },
        "resourceId": {
          "type": "String",
          "description": "ID of EFS File System for the rule to check."
        },
        "recoveryPointAgeValue": {
          "type": "int",
          "description": "Numerical value for maximum allowed age. No more than 744 for hours, 31 for days.",
          "defaultValue": "1"
        },
        "recoveryPointAgeUnit": {
          "type": "String",
          "description": "Unit of time for maximum allowed age. Accepted values: 'hours', 'days'.",
          "defaultValue": "days"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": [
          "AWS::EFS::FileSystem"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "AWSBackup"
    ]
  },
  "s3-account-level-public-access-blocks-periodic": {
    "id": "S3_ACCOUNT_LEVEL_PUBLIC_ACCESS_BLOCKS_PERIODIC",
    "default_name": "s3-account-level-public-access-blocks-periodic",
    "description": "Checks if the required public access block settings are configured at the account level. The rule is NON_COMPLIANT if the configuration item does not match one or more settings from parameters (or default).",
    "parameters": {
      "required": {},
      "optional": {
        "IgnorePublicAcls": {
          "type": "String",
          "description": "IgnorePublicAcls is enforced or not, default True"
        },
        "BlockPublicPolicy": {
          "type": "String",
          "description": "BlockPublicPolicy is enforced or not, default True"
        },
        "BlockPublicAcls": {
          "type": "String",
          "description": "BlockPublicAcls is enforced or not, default True"
        },
        "RestrictPublicBuckets": {
          "type": "String",
          "description": "RestrictPublicBuckets is enforced or not, default True"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": []
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "S3",
      "PUBLIC",
      "ACCESS",
      "BLOCKS"
    ]
  },
  "ssm-document-not-public": {
    "id": "SSM_DOCUMENT_NOT_PUBLIC",
    "default_name": "ssm-document-not-public",
    "description": "Checks if AWS Systems Manager documents owned by the account are public. The rule is NON_COMPLIANT if Systems Manager documents with the owner 'Self' are public.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "SSM",
      "SYSTEMS",
      "MANAGER",
      "SYSTEMS MANAGER",
      "DOCUMENT",
      "RUNBOOK",
      "PUBLIC",
      "PERIODIC"
    ]
  },
  "api-gw-associated-with-waf": {
    "id": "API_GW_ASSOCIATED_WITH_WAF",
    "default_name": "api-gw-associated-with-waf",
    "description": "Checks if an Amazon API Gateway API stage is using an AWS WAF web access control list (web ACL). The rule is NON_COMPLIANT if an AWS WAF Web ACL is not used or if a used AWS Web ACL does not match what is listed in the rule parameter.",
    "parameters": {
      "required": {},
      "optional": {
        "WebAclArns": {
          "type": "CSV",
          "description": "Comma-separated list of web ACL Amazon Resource Names (ARNs)."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ApiGateway::Stage"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "API",
      "GateWay",
      "Stage",
      "WAF",
      "WAFv2"
    ]
  },
  "ec2-instance-profile-attached": {
    "id": "EC2_INSTANCE_PROFILE_ATTACHED",
    "default_name": "ec2-instance-profile-attached",
    "description": "Checks if an EC2 instance has an AWS Identity and Access Management (IAM) profile attached to it. The rule is NON_COMPLIANT if no IAM profile is attached to the EC2 instance.",
    "parameters": {
      "required": {},
      "optional": {
        "IamInstanceProfileArnList": {
          "type": "CSV",
          "description": "Comma-separated list of IAM profile Amazon Resource Names (ARNs) that can be attached to Amazon EC2 instances."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::Instance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "EC2",
      "INSTANCE",
      "PROFILE"
    ]
  },
  "ecs-task-definition-user-for-host-mode-check": {
    "id": "ECS_TASK_DEFINITION_USER_FOR_HOST_MODE_CHECK",
    "default_name": "ecs-task-definition-user-for-host-mode-check",
    "description": "Checks if Amazon ECS task definitions with host network mode have 'privileged' or 'user' in the container definition. The rule is NON_COMPLIANT if the latest revision of a task definition has privileged=false or is empty and user=root or is empty.",
    "parameters": {
      "required": {},
      "optional": {
        "SkipInactiveTaskDefinitions": {
          "type": "boolean",
          "description": "Boolean flag to not check INACTIVE Amazon EC2 task definitions. If set to 'true', the rule won't evaluate INACTIVE Amazon EC2 task definitions. If set to 'false', the rule will evaluate the latest revision of INACTIVE Amazon EC2 task definitions."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ECS::TaskDefinition"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "ECS",
      "TaskDefinition",
      "HostModeCheck"
    ]
  },
  "elasticsearch-logs-to-cloudwatch": {
    "id": "ELASTICSEARCH_LOGS_TO_CLOUDWATCH",
    "default_name": "elasticsearch-logs-to-cloudwatch",
    "description": "Checks if OpenSearch Service (previously called Elasticsearch) domains are configured to send logs to CloudWatch Logs. The rule is COMPLIANT if a log is enabled for an OpenSearch Service domain. The rule is NON_COMPLIANT if logging is not configured.",
    "parameters": {
      "required": {},
      "optional": {
        "logTypes": {
          "type": "CSV",
          "description": "Comma-separated list of logs that are enabled. Valid values are 'search', 'index', 'error'."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::Elasticsearch::Domain"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "Elasticsearch",
      "CloudWatch",
      "Logs"
    ]
  },
  "no-unrestricted-route-to-igw": {
    "id": "NO_UNRESTRICTED_ROUTE_TO_IGW",
    "default_name": "no-unrestricted-route-to-igw",
    "description": "Checks if there are public routes in the route table to an Internet gateway (IGW). The rule is NON_COMPLIANT if a route to an IGW has a destination CIDR block of '0.0.0.0/0' or '::/0' or if a destination CIDR block does not match the rule parameter.",
    "parameters": {
      "required": {},
      "optional": {
        "routeTableIds": {
          "type": "CSV",
          "description": "Comma-separated list of route table IDs that can have routes to an Internet Gateway with a destination CIDR block of '0.0.0.0/0' or '::/0'."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::RouteTable"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "Internet",
      "Gateway",
      "Public",
      "Route"
    ]
  },
  "rds-cluster-multi-az-enabled": {
    "id": "RDS_CLUSTER_MULTI_AZ_ENABLED",
    "default_name": "rds-cluster-multi-az-enabled",
    "description": "Checks if Multi-Availability Zone (Multi-AZ) replication is enabled on Amazon Aurora and Hermes clusters managed by Amazon Relational Database Service (Amazon RDS). The rule is NON_COMPLIANT if an Amazon RDS instance is not configured with Multi-AZ.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBCluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "RDS",
      "DBCluster",
      "Multi-AZ",
      "Hermes",
      "Aurora"
    ]
  },
  "redshift-enhanced-vpc-routing-enabled": {
    "id": "REDSHIFT_ENHANCED_VPC_ROUTING_ENABLED",
    "default_name": "redshift-enhanced-vpc-routing-enabled",
    "description": "Checks if Amazon Redshift cluster has 'enhancedVpcRouting' enabled. The rule is NON_COMPLIANT if 'enhancedVpcRouting' is not enabled or if the configuration.enhancedVpcRouting field is 'false'. ",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::Redshift::Cluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "Redshift",
      "Cluster",
      "EnhancedVPCRouting"
    ]
  },
  "rds-automatic-minor-version-upgrade-enabled": {
    "id": "RDS_AUTOMATIC_MINOR_VERSION_UPGRADE_ENABLED",
    "default_name": "rds-automatic-minor-version-upgrade-enabled",
    "description": "Checks if Amazon Relational Database Service (Amazon RDS) database instances are configured for automatic minor version upgrades. The rule is NON_COMPLIANT if the value of 'autoMinorVersionUpgrade' is false.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBInstance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "RDS",
      "Auto",
      "minor",
      "version",
      "upgrade"
    ]
  },
  "secretsmanager-secret-periodic-rotation": {
    "id": "SECRETSMANAGER_SECRET_PERIODIC_ROTATION",
    "default_name": "secretsmanager-secret-periodic-rotation",
    "description": "Checks if AWS Secrets Manager secrets have been rotated in the past 90 days by examining 'LastRotatedDate' value of the secret.  If 'LastRotatedDate' doesn't exist then this rule will check for the creation date of the secret.",
    "parameters": {
      "required": {},
      "optional": {
        "maxDaysSinceRotation": {
          "type": "int",
          "description": "The number of days in which a secret can remain unchanged. "
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "SecretsManager",
      "Secret",
      "Periodic",
      "Rotation"
    ]
  },
  "iam-inline-policy-blocked-kms-actions": {
    "id": "IAM_INLINE_POLICY_BLOCKED_KMS_ACTIONS",
    "default_name": "iam-inline-policy-blocked-kms-actions",
    "description": "Checks if the inline policies attached to your IAM users, roles, and groups do not allow blocked actions on all AWS KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all AWS KMS keys in an inline policy.",
    "parameters": {
      "required": {
        "blockedActionsPatterns": {
          "type": "CSV",
          "description": "Comma-separated list of blocked KMS action patterns, for example, kms:*, kms:Decrypt, kms:ReEncrypt*."
        }
      },
      "optional": {
        "excludeRoleByManagementAccount": {
          "type": "boolean",
          "description": "Exclude a role if it is only assumable by organization management account."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::IAM::Group",
          "AWS::IAM::Role",
          "AWS::IAM::User"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "IAM",
      "Zelkova"
    ]
  },
  "api-gw-xray-enabled": {
    "id": "API_GW_XRAY_ENABLED",
    "default_name": "api-gw-xray-enabled",
    "description": "Checks if AWS X-Ray tracing is enabled on Amazon API Gateway REST APIs. The rule is COMPLIANT if X-Ray tracing is enabled and NON_COMPLIANT otherwise.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ApiGateway::Stage"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "API",
      "Gateway",
      "Rest",
      "X-Ray",
      "Tracing"
    ]
  },
  "autoscaling-launch-config-public-ip-disabled": {
    "id": "AUTOSCALING_LAUNCH_CONFIG_PUBLIC_IP_DISABLED",
    "default_name": "autoscaling-launch-config-public-ip-disabled",
    "description": "Checks if Amazon EC2 Auto Scaling groups have public IP addresses enabled through Launch Configurations. The rule is NON_COMPLIANT if the Launch Configuration for an Amazon EC2 Auto Scaling group has AssociatePublicIpAddress set to 'true'.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::AutoScaling::LaunchConfiguration"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "Auto",
      "Scaling",
      "launch",
      "configuration",
      "public",
      "IP"
    ]
  },
  "elastic-beanstalk-managed-updates-enabled": {
    "id": "ELASTIC_BEANSTALK_MANAGED_UPDATES_ENABLED",
    "default_name": "elastic-beanstalk-managed-updates-enabled",
    "description": "Checks if managed platform updates in an AWS Elastic Beanstalk environment is enabled. The rule is NON_COMPLIANT if the value for ?ManagedActionsEnabled? is set to false or if a parameter is provided whose value does not match the existing configurations.",
    "parameters": {
      "required": {},
      "optional": {
        "UpdateLevel": {
          "type": "String",
          "description": "Indicates whether update levels are set to 'minor' version updates or a 'patch' version updates."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ElasticBeanstalk::Environment"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "Elastic",
      "Beanstalk",
      "Managed",
      "Updates"
    ]
  },
  "rds-cluster-iam-authentication-enabled": {
    "id": "RDS_CLUSTER_IAM_AUTHENTICATION_ENABLED",
    "default_name": "rds-cluster-iam-authentication-enabled",
    "description": "Checks if an Amazon Relational Database Service (Amazon RDS) cluster has AWS Identity and Access Management (IAM) authentication enabled. The rule is NON_COMPLIANT if an Amazon RDS Cluster does not have IAM authentication enabled.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBCluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "RDS",
      "IAM",
      "Authentication"
    ]
  },
  "redshift-cluster-kms-enabled": {
    "id": "REDSHIFT_CLUSTER_KMS_ENABLED",
    "default_name": "redshift-cluster-kms-enabled",
    "description": "Checks if Amazon Redshift clusters are encrypted. The rule is COMPLIANT if encryption is enabled. The rule is NON_COMPLIANT if the cluster is not encrypted or if the encryption key is different from the key provided in the rule parameter.",
    "parameters": {
      "required": {},
      "optional": {
        "kmsKeyArns": {
          "type": "CSV",
          "description": "Comma-separated list of KMS Key Amazon Resource Names (ARNs) used in Amazon RedShift clusters for encryption."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::Redshift::Cluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "Redshift",
      "Cluster",
      "Kms",
      "EncryptionEnabled"
    ]
  },
  "secretsmanager-secret-unused": {
    "id": "SECRETSMANAGER_SECRET_UNUSED",
    "default_name": "secretsmanager-secret-unused",
    "description": "Checks if AWS Secrets Manager secrets have been accessed in the past 90 days. This rule is NON_COMPLIANT if a secret has not been accessed in 90 days.",
    "parameters": {
      "required": {},
      "optional": {
        "unusedForDays": {
          "type": "int",
          "description": "The number of days in which a secret can remain unused. Valid value is a positive integer."
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "SecretsManager",
      "Secret",
      "Unused"
    ]
  },
  "vpc-network-acl-unused-check": {
    "id": "VPC_NETWORK_ACL_UNUSED_CHECK",
    "default_name": "vpc-network-acl-unused-check",
    "description": "Checks if there are unused Network Access Control Lists (NACLs). The rule is NON_COMPLIANT if an NACL is not associated with a subnet.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::NetworkAcl"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "NetworkAcl",
      "NACL",
      "unused"
    ]
  },
  "iam-customer-policy-blocked-kms-actions": {
    "id": "IAM_CUSTOMER_POLICY_BLOCKED_KMS_ACTIONS",
    "default_name": "iam-customer-policy-blocked-kms-actions",
    "description": "Checks if the managed AWS Identity and Access Management (IAM) policies that you create do not allow blocked actions on AWS KMS) keys. The rule is NON_COMPLIANT if any blocked action is allowed on AWS KMS keys by the managed IAM policy.",
    "parameters": {
      "required": {
        "blockedActionsPatterns": {
          "type": "CSV",
          "description": "Comma-separated list of blocked KMS action patterns, for example, kms:*, kms:Decrypt, kms:ReEncrypt*."
        }
      },
      "optional": {
        "excludePermissionBoundaryPolicy": {
          "type": "boolean",
          "description": "Boolean flag to exclude the evaluation of IAM policies used as permissions boundaries. If set to 'true', the rule will not include permissions boundaries in the evaluation. Otherwise, all IAM policies in scope are evaluated when value is set to 'false.' Default value is 'false'."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::IAM::Policy"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "IAM Policy",
      "Zelkova"
    ]
  },
  "api-gw-ssl-enabled": {
    "id": "API_GW_SSL_ENABLED",
    "default_name": "api-gw-ssl-enabled",
    "description": "Checks if a REST API stage uses an SSL certificate. The rule is NON_COMPLIANT if the REST API stage does not have an associated SSL certificate.",
    "parameters": {
      "required": {},
      "optional": {
        "CertificateIDs": {
          "type": "CSV",
          "description": "Comma-separated list of client certificate IDs configured on a REST API stage."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ApiGateway::Stage"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "API",
      "REST",
      "ClientCertificate",
      "Stage"
    ]
  },
  "aurora-mysql-backtracking-enabled": {
    "id": "AURORA_MYSQL_BACKTRACKING_ENABLED",
    "default_name": "aurora-mysql-backtracking-enabled",
    "description": "Checks if an Amazon Aurora MySQL cluster has backtracking enabled. The rule is NON_COMPLIANT if the Aurora cluster uses MySQL and it does not have backtracking enabled.",
    "parameters": {
      "required": {},
      "optional": {
        "BacktrackWindowInHours": {
          "type": "double",
          "description": "Amount of time in hours (up to 72) to backtrack your Aurora MySQL cluster."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBCluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "Aurora",
      "MySQL",
      "RDSCluster",
      "Backtracking"
    ]
  },
  "beanstalk-enhanced-health-reporting-enabled": {
    "id": "BEANSTALK_ENHANCED_HEALTH_REPORTING_ENABLED",
    "default_name": "beanstalk-enhanced-health-reporting-enabled",
    "description": "checks for Elastic Beanstalk environment is configured for 'enhanced' health reporting and NON_COMPLIANT if configured for 'basic' health reporting",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ElasticBeanstalk::Environment"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "ElasticBeanstalk",
      "Environment",
      "EnhancedHealthReporting"
    ]
  },
  "ec2-instance-multiple-eni-check": {
    "id": "EC2_INSTANCE_MULTIPLE_ENI_CHECK",
    "default_name": "ec2-instance-multiple-eni-check",
    "description": "Checks if Amazon Elastic Compute Cloud (Amazon EC2) uses multiple Elastic Network Interfaces (ENIs) or Elastic Fabric Adapters (EFAs). The rule is NON_COMPLIANT an Amazon EC2 instance use multiple network interfaces.",
    "parameters": {
      "required": {},
      "optional": {
        "NetworkInterfaceIds": {
          "type": "CSV",
          "description": "Comma-separated list of network instance IDs"
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::Instance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "EC2",
      "Instance",
      "ENI",
      "EFA",
      "Network",
      "Interface"
    ]
  },
  "elbv2-acm-certificate-required": {
    "id": "ELBV2_ACM_CERTIFICATE_REQUIRED",
    "default_name": "elbv2-acm-certificate-required",
    "description": "Checks if Application Load Balancers and Network Load Balancers are configured to use certificates from Amazon Certificate Manager (ACM). This rule is NON_COMPLIANT if at least 1 load balancer is configured without a certificate from ACM.",
    "parameters": {
      "required": {},
      "optional": {
        "AcmCertificatesAllowed": {
          "type": "CSV",
          "description": "Comma-separated list of certificate Amazon Resource Names (ARNs)."
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "ELBV2",
      "ACM"
    ]
  },
  "iam-policy-no-statements-with-full-access": {
    "id": "IAM_POLICY_NO_STATEMENTS_WITH_FULL_ACCESS",
    "default_name": "iam-policy-no-statements-with-full-access",
    "description": "Checks if AWS Identity and Access Management (IAM) policies grant permissions to all actions on individual AWS resources. The rule is NON_COMPLIANT if the managed IAM policy allows full access to at least 1 AWS service.",
    "parameters": {
      "required": {},
      "optional": {
        "excludePermissionBoundaryPolicy": {
          "type": "boolean",
          "description": "Boolean flag to exclude the evaluation of IAM policies used as permissions boundaries. If set to 'true', the rule will not include permissions boundaries in the evaluation. Otherwise, all IAM policies in scope are evaluated when value is set to 'false.' Default value is 'false'."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::IAM::Policy"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "IAM",
      "Policy",
      "FullAccess",
      "Service"
    ]
  },
  "s3-bucket-level-public-access-prohibited": {
    "id": "S3_BUCKET_LEVEL_PUBLIC_ACCESS_PROHIBITED",
    "default_name": "s3-bucket-level-public-access-prohibited",
    "description": "Checks if S3 buckets are publicly accessible. The rule is NON_COMPLIANT if an S3 bucket is not listed in the excludedPublicBuckets parameter and bucket level settings are public.",
    "parameters": {
      "required": {},
      "optional": {
        "excludedPublicBuckets": {
          "type": "CSV",
          "description": "Comma-separated list of known allowed public Amazon S3 bucket names."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::S3::Bucket"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "S3",
      "Bucket",
      "PublicAccess"
    ]
  },
  "secretsmanager-using-cmk": {
    "id": "SECRETSMANAGER_USING_CMK",
    "default_name": "secretsmanager-using-cmk",
    "description": "Checks if all secrets in AWS Secrets Manager are encrypted using an AWS Key Management Service (AWS KMS) customer master key (CMK). This rule is NON_COMPLIANT if a secret is encrypted using the default AWS KMS key",
    "parameters": {
      "required": {},
      "optional": {
        "kmsKeyArns": {
          "type": "CSV",
          "description": "Comma-separated list of KMS key Amazon Resource Names (ARNs) to check if the keys are used in the encryption."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::SecretsManager::Secret"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "SecretsManager",
      "CMK"
    ]
  },
  "account-part-of-organizations": {
    "id": "ACCOUNT_PART_OF_ORGANIZATIONS",
    "default_name": "account-part-of-organizations",
    "description": "Rule checks whether AWS account is part of AWS Organizations. The rule is NON_COMPLIANT if the AWS account is not part of AWS Organizations or AWS Organizations master account ID does not match rule parameter MasterAccountId.",
    "parameters": {
      "required": {},
      "optional": {
        "MasterAccountId": {
          "type": "String",
          "description": "The master account ID for an AWS account."
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "Organizations",
      "Account"
    ]
  },
  "alb-http-drop-invalid-header-enabled": {
    "id": "ALB_HTTP_DROP_INVALID_HEADER_ENABLED",
    "default_name": "alb-http-drop-invalid-header-enabled",
    "description": "Checks if rule evaluates AWS Application Load Balancers (ALB) to ensure they are configured to drop http headers. The rule is NON_COMPLIANT if the value of routing.http.drop_invalid_header_fields.enabled is set to false.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ElasticLoadBalancingV2::LoadBalancer"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "ELBv2",
      "http headers"
    ]
  },
  "alb-waf-enabled": {
    "id": "ALB_WAF_ENABLED",
    "default_name": "alb-waf-enabled",
    "description": "Checks if AWS WAF is enabled on Application Load Balancers (ALBs). The rule is NON_COMPLIANT if key: waf.enabled is set to false.",
    "parameters": {
      "required": {},
      "optional": {
        "wafWebAclIds": {
          "type": "CSV",
          "description": "Comma separated list of web ACL ID (for WAF) or web ACL ARN (for WAFV2) checking for ALB association."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ElasticLoadBalancingV2::LoadBalancer"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "Application LoadBalancer",
      "WAF",
      "Webacl"
    ]
  },
  "cloudtrail-security-trail-enabled": {
    "id": "CLOUDTRAIL_SECURITY_TRAIL_ENABLED",
    "default_name": "cloudtrail-security-trail-enabled",
    "description": "Checks that there is at least one AWS CloudTrail trail defined with security best practices.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "CloudTrail",
      "Security"
    ]
  },
  "cw-loggroup-retention-period-check": {
    "id": "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
    "default_name": "cw-loggroup-retention-period-check",
    "description": "Checks whether Amazon CloudWatch LogGroup retention period is set to specific number of days. The rule is NON_COMPLIANT if the retention period is not set or is less than the configured retention period.",
    "parameters": {
      "required": {},
      "optional": {
        "LogGroupNames": {
          "type": "CSV",
          "description": "A comma-separated list of Log Group names to check the retention period."
        },
        "MinRetentionTime": {
          "type": "int",
          "description": "Specify the retention time. Valid values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, and 3653. The default retention period is 365 days."
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "Logs",
      "CloudWatch",
      "LogGroup"
    ]
  },
  "dynamodb-in-backup-plan": {
    "id": "DYNAMODB_IN_BACKUP_PLAN",
    "default_name": "dynamodb-in-backup-plan",
    "description": "Checks if an Amazon DynamoDB table is present in AWS Backup plans. The rule is NON_COMPLIANT if DynamoDB tables are not present in any AWS Backup plan.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "DynamoDB",
      "Backup"
    ]
  },
  "ebs-in-backup-plan": {
    "id": "EBS_IN_BACKUP_PLAN",
    "default_name": "ebs-in-backup-plan",
    "description": "Check if Amazon Elastic Block Store (Amazon EBS) volumes are added in backup plans of AWS Backup. The rule is NON_COMPLIANT if Amazon EBS volumes are not included in backup plans.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "EBS",
      "BACKUP"
    ]
  },
  "ec2-imdsv2-check": {
    "id": "EC2_IMDSV2_CHECK",
    "default_name": "ec2-imdsv2-check",
    "description": "Checks if your Amazon Elastic Compute Cloud (Amazon EC2) instance metadata version is configured with Instance Metadata Service Version 2 (IMDSv2). The rule is NON_COMPLIANT if the HttpTokens is set to optional.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::Instance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "EC2",
      "IMDSv2",
      "metadata"
    ]
  },
  "efs-in-backup-plan": {
    "id": "EFS_IN_BACKUP_PLAN",
    "default_name": "efs-in-backup-plan",
    "description": "Checks if Amazon Elastic File System (Amazon EFS) file systems are added in the backup plans of AWS Backup. The rule is NON_COMPLIANT if EFS file systems are not included in the backup plans.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "EFS",
      "BACKUP"
    ]
  },
  "eks-endpoint-no-public-access": {
    "id": "EKS_ENDPOINT_NO_PUBLIC_ACCESS",
    "default_name": "eks-endpoint-no-public-access",
    "description": "Checks if the Amazon Elastic Kubernetes Service (Amazon EKS) endpoint is not publicly accessible. The rule is NON_COMPLIANT if the endpoint is publicly accessible.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "EKS"
    ]
  },
  "eks-secrets-encrypted": {
    "id": "EKS_SECRETS_ENCRYPTED",
    "default_name": "eks-secrets-encrypted",
    "description": "Checks whether Amazon Elastic Kubernetes Service clusters are configured to have Kubernetes secrets encrypted using AWS Key Management Service (KMS) keys. This rule is NON_COMPLIANT if an EKS cluster does not have an encryptionConfig.",
    "parameters": {
      "required": {},
      "optional": {
        "kmsKeyArns": {
          "type": "CSV",
          "description": "Comma separated list of Amazon Resource Name (ARN) of the KMS key that should be used for encrypted secrets in an EKS cluster."
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "EKS"
    ]
  },
  "elasticsearch-node-to-node-encryption-check": {
    "id": "ELASTICSEARCH_NODE_TO_NODE_ENCRYPTION_CHECK",
    "default_name": "elasticsearch-node-to-node-encryption-check",
    "description": "Check if OpenSearch Service (previously called Elasticsearch) nodes are encrypted end to end. The rule is NON_COMPLIANT if the node-to-node encryption is not enabled on the domain.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::Elasticsearch::Domain"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "Elasticsearch Encryption"
    ]
  },
  "elb-cross-zone-load-balancing-enabled": {
    "id": "ELB_CROSS_ZONE_LOAD_BALANCING_ENABLED",
    "default_name": "elb-cross-zone-load-balancing-enabled",
    "description": "Checks if cross-zone load balancing is enabled for Classic Load Balancers. The rule is NON_COMPLIANT if cross-zone load balancing is not enabled for Classic Load Balancers.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ElasticLoadBalancing::LoadBalancer"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "LoadBalancer",
      "ElasticLoadBalancing",
      "ClassicLoadBalancer",
      "Cross Zone Load Balancing"
    ]
  },
  "elb-tls-https-listeners-only": {
    "id": "ELB_TLS_HTTPS_LISTENERS_ONLY",
    "default_name": "elb-tls-https-listeners-only",
    "description": "Checks if your Classic Load Balancer is configured with SSL or HTTPS listeners. The rule is NON_COMPLIANT if a listener is not configured with SSL or HTTPS.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ElasticLoadBalancing::LoadBalancer"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": null
  },
  "iam-no-inline-policy-check": {
    "id": "IAM_NO_INLINE_POLICY_CHECK",
    "default_name": "iam-no-inline-policy-check",
    "description": "Checks if the inline policy feature is not in use. The rule is NON_COMPLIANT if an AWS Identity and Access Management (IAM) user, IAM role or IAM group has any inline policy.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::IAM::User",
          "AWS::IAM::Role",
          "AWS::IAM::Group"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "IAM",
      "Role",
      "User",
      "Group",
      "Inline Policy"
    ]
  },
  "rds-cluster-deletion-protection-enabled": {
    "id": "RDS_CLUSTER_DELETION_PROTECTION_ENABLED",
    "default_name": "rds-cluster-deletion-protection-enabled",
    "description": "Checks if an Amazon Relational Database Service (Amazon RDS) cluster has deletion protection enabled. The rule is NON_COMPLIANT if an Amazon RDS cluster does not have deletion protection enabled.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBCluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "RDS",
      "DBCluster",
      "Deletion Protection"
    ]
  },
  "rds-instance-deletion-protection-enabled": {
    "id": "RDS_INSTANCE_DELETION_PROTECTION_ENABLED",
    "default_name": "rds-instance-deletion-protection-enabled",
    "description": "Checks if an Amazon Relational Database Service (Amazon RDS) instance has deletion protection enabled. The rule is NON_COMPLIANT if an Amazon RDS instance does not have deletion protection enabled; for example, deletionProtection is set to false.",
    "parameters": {
      "required": {},
      "optional": {
        "databaseEngines": {
          "type": "CSV",
          "description": "Comma-separated list of RDS database engines to include in the evaluation of the rule."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBInstance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "RDS",
      "DBInstance",
      "Deletion Protection"
    ]
  },
  "rds-instance-iam-authentication-enabled": {
    "id": "RDS_INSTANCE_IAM_AUTHENTICATION_ENABLED",
    "default_name": "rds-instance-iam-authentication-enabled",
    "description": "Checks if an Amazon Relational Database Service (Amazon RDS) instance has AWS Identity and Access Management (IAM) authentication enabled. The rule is NON_COMPLIANT if an Amazon RDS instance does not have IAM authentication enabled.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBInstance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "RDS",
      "IAM Authentication"
    ]
  },
  "rds-in-backup-plan": {
    "id": "RDS_IN_BACKUP_PLAN",
    "default_name": "rds-in-backup-plan",
    "description": "Checks if Amazon Relational Database Service (Amazon RDS) databases are present in AWS Backup plans. The rule is NON_COMPLIANT if Amazon RDS databases are not included in any AWS Backup plan.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "RDS",
      "Backup"
    ]
  },
  "rds-logging-enabled": {
    "id": "RDS_LOGGING_ENABLED",
    "default_name": "rds-logging-enabled",
    "description": "Checks if respective logs of Amazon Relational Database Service (Amazon RDS) are enabled. The rule is NON_COMPLIANT if any log types are not enabled.",
    "parameters": {
      "required": {},
      "optional": {
        "additionalLogs": {
          "type": "StringMap",
          "description": "Comma-separated list of engine names and log type names."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBInstance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "RDS",
      "Database Logs"
    ]
  },
  "redshift-backup-enabled": {
    "id": "REDSHIFT_BACKUP_ENABLED",
    "default_name": "redshift-backup-enabled",
    "description": "Checks that Amazon Redshift automated snapshots are enabled for clusters.",
    "parameters": {
      "required": {},
      "optional": {
        "MinRetentionPeriod": {
          "type": "int",
          "description": "Minimum value for the retention period. Minimum value is 1."
        },
        "MaxRetentionPeriod": {
          "type": "int",
          "description": "Maximum value for the retention period. Maximum value is 35."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::Redshift::Cluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "Redshift",
      "Backup"
    ]
  },
  "wafv2-logging-enabled": {
    "id": "WAFV2_LOGGING_ENABLED",
    "default_name": "wafv2-logging-enabled",
    "description": "Checks if logging is enabled on AWS WAFv2 regional and global web access control lists (web ACLs). The rule is NON_COMPLIANT if the logging is enabled but the logging destination does not match the value of the parameter.",
    "parameters": {
      "required": {},
      "optional": {
        "KinesisFirehoseDeliveryStreamArns": {
          "type": "CSV",
          "description": "Comma separated list of Kinesis Firehose delivery stream ARNs"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "WAFv2",
      "Logging",
      "WebACL"
    ]
  },
  "subnet-auto-assign-public-ip-disabled": {
    "id": "SUBNET_AUTO_ASSIGN_PUBLIC_IP_DISABLED",
    "default_name": "subnet-auto-assign-public-ip-disabled",
    "description": "Checks if Amazon Virtual Private Cloud (Amazon VPC) subnets are assigned a public IP address. This rule is NON_COMPLIANT if Amazon VPC has subnets that are assigned a public IP address.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::Subnet"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "EC2",
      "VPC",
      "AWS subnet",
      "MapPublicIpOnLaunch"
    ]
  },
  "dynamodb-pitr-enabled": {
    "id": "DYNAMODB_PITR_ENABLED",
    "default_name": "dynamodb-pitr-enabled",
    "description": "Checks if point-in-time recovery (PITR) is enabled for Amazon DynamoDB tables. The rule is NON_COMPLIANT if PITR is not enabled for DynamoDB tables.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::DynamoDB::Table"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "DynamoDB"
    ]
  },
  "dynamodb-table-encrypted-kms": {
    "id": "DYNAMODB_TABLE_ENCRYPTED_KMS",
    "default_name": "dynamodb-table-encrypted-kms",
    "description": "Checks whether Amazon DynamoDB table is encrypted with AWS Key Management Service (KMS). The rule is NON_COMPLIANT if Amazon DynamoDB table is not encrypted with AWS KMS.",
    "parameters": {
      "required": {},
      "optional": {
        "kmsKeyArns": {
          "type": "CSV",
          "description": "Comma separated list of AWS KMS key ARNs allowed for encrypting Amazon DynamoDB Tables."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::DynamoDB::Table"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "DynamoDB",
      "Kms"
    ]
  },
  "ec2-ebs-encryption-by-default": {
    "id": "EC2_EBS_ENCRYPTION_BY_DEFAULT",
    "default_name": "ec2-ebs-encryption-by-default",
    "description": "Checks if Amazon Elastic Block Store (EBS) encryption is enabled by default. The rule is NON_COMPLIANT if the encryption is not enabled.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "EC2",
      "EBS"
    ]
  },
  "rds-snapshot-encrypted": {
    "id": "RDS_SNAPSHOT_ENCRYPTED",
    "default_name": "rds-snapshot-encrypted",
    "description": "Checks if Amazon Relational Database Service (Amazon RDS) DB snapshots are encrypted. The rule is NON_COMPLIANT if the Amazon RDS DB snapshots are not encrypted.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBSnapshot",
          "AWS::RDS::DBClusterSnapshot"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "RDS",
      "Snapshots"
    ]
  },
  "redshift-require-tls-ssl": {
    "id": "REDSHIFT_REQUIRE_TLS_SSL",
    "default_name": "redshift-require-tls-ssl",
    "description": "Checks if Amazon Redshift clusters require TLS/SSL encryption to connect to SQL clients. The rule is NON_COMPLIANT if any Amazon Redshift cluster has parameter require_SSL not set to true.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::Redshift::Cluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "Redshift",
      "SSL"
    ]
  },
  "s3-bucket-default-lock-enabled": {
    "id": "S3_BUCKET_DEFAULT_LOCK_ENABLED",
    "default_name": "s3-bucket-default-lock-enabled",
    "description": "Checks if the S3 bucket has lock enabled, by default. The rule is NON_COMPLIANT if the lock is not enabled.",
    "parameters": {
      "required": {},
      "optional": {
        "mode": {
          "type": "String",
          "description": "mode: (optional): A mode parameter with valid values of GOVERNANCE or COMPLIANCE."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::S3::Bucket"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "S3"
    ]
  },
  "securityhub-enabled": {
    "id": "SECURITYHUB_ENABLED",
    "default_name": "securityhub-enabled",
    "description": "Checks if AWS Security Hub is enabled for an AWS Account. The rule is NON_COMPLIANT if AWS Security Hub is not enabled.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "SECURITY HUB"
    ]
  },
  "sns-encrypted-kms": {
    "id": "SNS_ENCRYPTED_KMS",
    "default_name": "sns-encrypted-kms",
    "description": "Checks if an SNS topic is encrypted with AWS Key Management Service (AWS KMS). The rule is NON_COMPLIANT if the SNS topic is not encrypted with AWS KMS or if a KMS key ID used to encrypt the SNS topic is not present in the 'kmsKeyIds' input parameter.",
    "parameters": {
      "required": {},
      "optional": {
        "kmsKeyIds": {
          "type": "CSV",
          "description": "Comma separated list of AWS KMS key ARNs allowed for encrypting Amazon SNS Topic."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::SNS::Topic"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "SNS",
      "Kms"
    ]
  },
  "s3-default-encryption-kms": {
    "id": "S3_DEFAULT_ENCRYPTION_KMS",
    "default_name": "s3-default-encryption-kms",
    "description": "Checks if the S3 buckets are encrypted with AWS Key Management Service (AWS KMS). The rule is NON_COMPLIANT if the S3 bucket is not encrypted with an AWS KMS key.",
    "parameters": {
      "required": {},
      "optional": {
        "kmsKeyArns": {
          "type": "CSV",
          "description": "Comma separated list of AWS KMS key ARNs allowed for encrypting Amazon S3 Buckets."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::S3::Bucket"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "S3",
      "Kms"
    ]
  },
  "secretsmanager-rotation-enabled-check": {
    "id": "SECRETSMANAGER_ROTATION_ENABLED_CHECK",
    "default_name": "secretsmanager-rotation-enabled-check",
    "description": "Checks whether AWS Secret Manager secret has rotation enabled. If the maximumAllowedRotationFrequency or the maximumAllowedRotationFrequencyInHours parameter is specified, the rotation frequency of the secret is compared with the maximum allowed frequency.",
    "parameters": {
      "required": {},
      "optional": {
        "maximumAllowedRotationFrequency": {
          "type": "int",
          "description": "Maximum allowed rotation frequency of the secret in days."
        },
        "maximumAllowedRotationFrequencyInHours": {
          "type": "int",
          "description": "Maximum allowed rotation frequency of the secret in hours."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::SecretsManager::Secret"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "secretsmanager",
      "secret"
    ]
  },
  "secretsmanager-scheduled-rotation-success-check": {
    "id": "SECRETSMANAGER_SCHEDULED_ROTATION_SUCCESS_CHECK",
    "default_name": "secretsmanager-scheduled-rotation-success-check",
    "description": "Checks and verifies whether AWS Secret Manager secret rotation has rotated successfully as per the rotation schedule.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::SecretsManager::Secret"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "secretsmanager",
      "secret"
    ]
  },
  "ec2-stopped-instance": {
    "id": "EC2_STOPPED_INSTANCE",
    "default_name": "ec2-stopped-instance",
    "description": "Checks whether there are instances stopped for more than the allowed number of days.",
    "parameters": {
      "required": {},
      "optional": {
        "AllowedDays": {
          "type": "int",
          "description": "Number of days the instance can be stopped for before it becomes non-compliant. The default number of days is 30.",
          "defaultValue": "30"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "EC2"
    ]
  },
  "api-gw-cache-enabled-and-encrypted": {
    "id": "API_GW_CACHE_ENABLED_AND_ENCRYPTED",
    "default_name": "api-gw-cache-enabled-and-encrypted",
    "description": "Checks if all methods in Amazon API Gateway stages have cache enabled and cache encrypted. The rule is NON_COMPLIANT if any method in an Amazon API Gateway stage is not configured to cache or the cache is not encrypted.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ApiGateway::Stage"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "API Gateway",
      "REST API"
    ]
  },
  "elasticache-redis-cluster-automatic-backup-check": {
    "id": "ELASTICACHE_REDIS_CLUSTER_AUTOMATIC_BACKUP_CHECK",
    "default_name": "elasticache-redis-cluster-automatic-backup-check",
    "description": "The rule is NON_COMPLIANT if SnapshotRetentionLimit for Redis cluster is less than the SnapshotRetentionPeriod parameter, i.e from 0 to 15 as the default is 15.",
    "parameters": {
      "required": {},
      "optional": {
        "snapshotRetentionPeriod": {
          "type": "int",
          "description": "Minimum snapshot retention period in days for Redis cluster. Default is 15 days.",
          "defaultValue": "15"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": []
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "ElastiCache",
      "Periodic"
    ]
  },
  "emr-master-no-public-ip": {
    "id": "EMR_MASTER_NO_PUBLIC_IP",
    "default_name": "emr-master-no-public-ip",
    "description": "Checks if Amazon EMR clusters' master nodes have public IPs. The rule is NON_COMPLIANT if the master node has a public IP.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": []
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "EMR"
    ]
  },
  "guardduty-non-archived-findings": {
    "id": "GUARDDUTY_NON_ARCHIVED_FINDINGS",
    "default_name": "guardduty-non-archived-findings",
    "description": "Checks if Amazon GuardDuty has findings that are non-archived. The rule is NON_COMPLIANT if GuardDuty has non-archived low/medium/high severity findings older than the specified number in the daysLowSev/daysMediumSev/daysHighSev parameter.",
    "parameters": {
      "required": {},
      "optional": {
        "daysLowSev": {
          "type": "int",
          "description": "The number of days Amazon GuardDuty low severity findings are allowed to stay non archived. The default is 30 days.",
          "defaultValue": "30"
        },
        "daysMediumSev": {
          "type": "int",
          "description": "The number of days Amazon GuardDuty medium severity findings are allowed to stay non archived. The default is 7 days.",
          "defaultValue": "7"
        },
        "daysHighSev": {
          "type": "int",
          "description": "The number of days Amazon GuardDuty high severity findings are allowed to stay non archived. The default is 1 day.",
          "defaultValue": "1"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "GuardDuty",
      "GuardDuty Findings"
    ]
  },
  "rds-enhanced-monitoring-enabled": {
    "id": "RDS_ENHANCED_MONITORING_ENABLED",
    "default_name": "rds-enhanced-monitoring-enabled",
    "description": "Checks if enhanced monitoring is enabled for Amazon RDS instances. This rule is NON_COMPLIANT if 'monitoringInterval' is '0' in the configuration item of the RDS instance, or if 'monitoringInterval' does not match the rule parameter value.",
    "parameters": {
      "required": {},
      "optional": {
        "monitoringInterval": {
          "type": "int",
          "description": "An integer value in seconds between points when enhanced monitoring metrics are collected for the database instance. The valid values are 1, 5, 10, 15, 30, and 60."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBInstance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "RDS",
      "ENHANCED",
      "MONITORING"
    ]
  },
  "s3-account-level-public-access-blocks": {
    "id": "S3_ACCOUNT_LEVEL_PUBLIC_ACCESS_BLOCKS",
    "default_name": "s3-account-level-public-access-blocks",
    "description": "Checks whether the required public access block settings are configured from account level. The rule is NON_COMPLIANT when the public access block settings are not configured from account level.",
    "parameters": {
      "required": {},
      "optional": {
        "IgnorePublicAcls": {
          "type": "String",
          "description": "IgnorePublicAcls is enforced or not, default True",
          "defaultValue": "True"
        },
        "BlockPublicPolicy": {
          "type": "String",
          "description": "BlockPublicPolicy is enforced or not, default True",
          "defaultValue": "True"
        },
        "BlockPublicAcls": {
          "type": "String",
          "description": "BlockPublicAcls is enforced or not, default True",
          "defaultValue": "True"
        },
        "RestrictPublicBuckets": {
          "type": "String",
          "description": "RestrictPublicBuckets is enforced or not, default True",
          "defaultValue": "True"
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::S3::AccountPublicAccessBlock"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "S3"
    ]
  },
  "sagemaker-endpoint-configuration-kms-key-configured": {
    "id": "SAGEMAKER_ENDPOINT_CONFIGURATION_KMS_KEY_CONFIGURED",
    "default_name": "sagemaker-endpoint-configuration-kms-key-configured",
    "description": "Checks if AWS Key Management Service (AWS KMS) key is configured for an Amazon SageMaker endpoint configuration. The rule is NON_COMPLIANT if 'KmsKeyId' is not specified for the Amazon SageMaker endpoint configuration.",
    "parameters": {
      "required": {},
      "optional": {
        "kmsKeyArns": {
          "type": "String",
          "description": "Comma-separated list of specific AWS KMS key ARNs allowed for an Amazon SageMaker endpoint configuration."
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "SageMaker Endpoint Config",
      "KMS Key"
    ]
  },
  "service-vpc-endpoint-enabled": {
    "id": "SERVICE_VPC_ENDPOINT_ENABLED",
    "default_name": "service-vpc-endpoint-enabled",
    "description": "Checks if Service Endpoint for the service provided in rule parameter is created for each Amazon Virtual Private Cloud (Amazon VPC). The rule is NON_COMPLIANT if an Amazon VPC doesn't have an Amazon VPC endpoint created for the service.",
    "parameters": {
      "required": {
        "serviceName": {
          "type": "String",
          "description": "The short name or suffix for the service. Note: To get a list of available service names or valid suffix list, use DescribeVpcEndpointServices."
        }
      },
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "VPC",
      "VPCEndpoint",
      "VPCServiceEndpoint"
    ]
  },
  "sagemaker-notebook-instance-kms-key-configured": {
    "id": "SAGEMAKER_NOTEBOOK_INSTANCE_KMS_KEY_CONFIGURED",
    "default_name": "sagemaker-notebook-instance-kms-key-configured",
    "description": "Checks if an AWS Key Management Service (AWS KMS) key is configured for an Amazon SageMaker notebook instance. The rule is NON_COMPLIANT if 'KmsKeyId' is not specified for the SageMaker notebook instance.",
    "parameters": {
      "required": {},
      "optional": {
        "kmsKeyArns": {
          "type": "String",
          "description": "Comma-separated list of AWS KMS key ARNs allowed for an Amazon SageMaker notebook instance."
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "SageMaker Notebook Instance",
      "KMS Key"
    ]
  },
  "sagemaker-notebook-no-direct-internet-access": {
    "id": "SAGEMAKER_NOTEBOOK_NO_DIRECT_INTERNET_ACCESS",
    "default_name": "sagemaker-notebook-no-direct-internet-access",
    "description": "Checks if direct internet access is disabled for an Amazon SageMaker notebook instance. The rule is NON_COMPLIANT if a SageMaker notebook instance is internet-enabled.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "SageMaker Notebook Instance"
    ]
  },
  "cloudwatch-log-group-encrypted": {
    "id": "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
    "default_name": "cloudwatch-log-group-encrypted",
    "description": "Checks if Amazon CloudWatch Log Groups are encrypted with any AWS KMS key or a specified AWS KMS key Id. The rule is NON_COMPLIANT if a CloudWatch Log Group is not encrypted with a KMS key or is encrypted with a KMS key not supplied in the rule parameter.",
    "parameters": {
      "required": {},
      "optional": {
        "KmsKeyId": {
          "type": "String",
          "description": "Amazon Resource Name (ARN) of the ID for the KMS key that is used to encrypt the log group."
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "CloudWatch",
      "KMS"
    ]
  },
  "ebs-snapshot-public-restorable-check": {
    "id": "EBS_SNAPSHOT_PUBLIC_RESTORABLE_CHECK",
    "default_name": "ebs-snapshot-public-restorable-check",
    "description": "Checks if Amazon Elastic Block Store (Amazon EBS) snapshots are not publicly restorable. The rule is NON_COMPLIANT if one or more snapshots with RestorableByUserIds field are set to all, that is, Amazon EBS snapshots are public.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "EC2",
      "EBS"
    ]
  },
  "ec2-instance-no-public-ip": {
    "id": "EC2_INSTANCE_NO_PUBLIC_IP",
    "default_name": "ec2-instance-no-public-ip",
    "description": "Checks if EC2 instances have a public IP association. The rule is NON_COMPLIANT if the publicIp field is present in the EC2 instance configuration item. The rule applies only to IPv4.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::Instance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "EC2",
      "PublicIP",
      "Instance"
    ]
  },
  "ec2-security-group-attached-to-eni": {
    "id": "EC2_SECURITY_GROUP_ATTACHED_TO_ENI",
    "default_name": "ec2-security-group-attached-to-eni",
    "description": "Checks if non-default security groups are attached to elastic network interfaces. The rule is NON_COMPLIANT if the security group is not associated with a network interface.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::SecurityGroup"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "VPC",
      "Security Group"
    ]
  },
  "efs-encrypted-check": {
    "id": "EFS_ENCRYPTED_CHECK",
    "default_name": "efs-encrypted-check",
    "description": "Checks whether Amazon EFS are configured to encrypt file data using AWS KMS. The rule is NON_COMPLIANT if the Encrypted key is set to False on DescribeFileSystems or, if specified, KmsKeyId key on DescribeFileSystems is not matching KmsKeyId parameter.",
    "parameters": {
      "required": {},
      "optional": {
        "KmsKeyId": {
          "type": "String",
          "description": "Amazon Resource Name (ARN) of the KMS key that is used to encrypt the EFS file system."
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "EFS",
      "KMS"
    ]
  },
  "elasticsearch-encrypted-at-rest": {
    "id": "ELASTICSEARCH_ENCRYPTED_AT_REST",
    "default_name": "elasticsearch-encrypted-at-rest",
    "description": "Checks if Amazon OpenSearch Service (previously called Elasticsearch) domains have encryption at rest configuration enabled. The rule is NON_COMPLIANT if the EncryptionAtRestOptions field is not enabled.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "ElasticSearch",
      "Encryption"
    ]
  },
  "elasticsearch-in-vpc-only": {
    "id": "ELASTICSEARCH_IN_VPC_ONLY",
    "default_name": "elasticsearch-in-vpc-only",
    "description": "Checks if Amazon OpenSearch Service (previously called Elasticsearch) domains are in Amazon Virtual Private Cloud (Amazon VPC). The rule is NON_COMPLIANT if an OpenSearch Service domain endpoint is public.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "Elasticsearch"
    ]
  },
  "redshift-cluster-public-access-check": {
    "id": "REDSHIFT_CLUSTER_PUBLIC_ACCESS_CHECK",
    "default_name": "redshift-cluster-public-access-check",
    "description": "Checks if Amazon Redshift clusters are not publicly accessible. The rule is NON_COMPLIANT if the publiclyAccessible field is True in the cluster configuration item.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::Redshift::Cluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "Redshift",
      "Cluster"
    ]
  },
  "vpc-sg-open-only-to-authorized-ports": {
    "id": "VPC_SG_OPEN_ONLY_TO_AUTHORIZED_PORTS",
    "default_name": "vpc-sg-open-only-to-authorized-ports",
    "description": "Checks if security groups allowing unrestricted incoming traffic ('0.0.0.0/0' or '::/0') only allow inbound TCP or UDP connections on authorized ports. The rule is NON_COMPLIANT if such security groups do not have ports specified in the rule parameters.",
    "parameters": {
      "required": {},
      "optional": {
        "authorizedTcpPorts": {
          "type": "String",
          "description": " Comma-separated list of TCP ports authorized to be open to 0.0.0.0/0 or ::/0. Ranges are defined by dash, for example, \"443,1020-1025\"."
        },
        "authorizedUdpPorts": {
          "type": "String",
          "description": " Comma-separated list of UDP ports authorized to be open to 0.0.0.0/0 or ::/0. Ranges are defined by dash, for example, \"500,1020-1025\"."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::SecurityGroup"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "VPC",
      "Security Group"
    ]
  },
  "dms-replication-not-public": {
    "id": "DMS_REPLICATION_NOT_PUBLIC",
    "default_name": "dms-replication-not-public",
    "description": "Checks if AWS Database Migration Service (AWS DMS) replication instances are public. The rule is NON_COMPLIANT if PubliclyAccessible field is set to true.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "DMS",
      "Database Migration Service"
    ]
  },
  "vpc-vpn-2-tunnels-up": {
    "id": "VPC_VPN_2_TUNNELS_UP",
    "default_name": "vpc-vpn-2-tunnels-up",
    "description": "Checks if both virtual private network (VPN) tunnels provided by AWS Site-to-Site VPN are in UP status. The rule is NON_COMPLIANT if one or both tunnels are in DOWN status.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::VPNConnection"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "EC2",
      "VPC",
      "VPN"
    ]
  },
  "cloudtrail-s3-dataevents-enabled": {
    "id": "CLOUDTRAIL_S3_DATAEVENTS_ENABLED",
    "default_name": "cloudtrail-s3-dataevents-enabled",
    "description": "Checks if at least one AWS CloudTrail trail is logging Amazon Simple Storage Service (Amazon S3) data events for all S3 buckets. The rule is NON_COMPLIANT if there are trails or if no trails record S3 data events.",
    "parameters": {
      "required": {},
      "optional": {
        "S3BucketNames": {
          "type": "String",
          "description": "Comma-separated list of S3 bucket names for which data events logging should be enabled. Default behavior checks for all S3 buckets."
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "S3",
      "CloudTrail",
      "Data Events",
      "Event Selectors"
    ]
  },
  "api-gw-endpoint-type-check": {
    "id": "API_GW_ENDPOINT_TYPE_CHECK",
    "default_name": "api-gw-endpoint-type-check",
    "description": "Checks that Amazon API Gateway APIs are of type as specified in the rule parameter 'endpointConfigurationTypes'. The rule returns COMPLIANT if any of the RestApi endpoint types matches the endpointConfigurationTypes configured in the rule parameter.",
    "parameters": {
      "required": {
        "endpointConfigurationTypes": {
          "type": "String",
          "description": "Comma-separated list of allowed endpointConfigurationTypes. Allowed values are REGIONAL, PRIVATE and EDGE."
        }
      },
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ApiGateway::RestApi"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "API Gateway",
      "REST API"
    ]
  },
  "alb-http-to-https-redirection-check": {
    "id": "ALB_HTTP_TO_HTTPS_REDIRECTION_CHECK",
    "default_name": "alb-http-to-https-redirection-check",
    "description": "Checks whether HTTP to HTTPS redirection is configured on all HTTP listeners of Application Load Balancers. The rule is NON_COMPLIANT if one or more HTTP listeners of Application Load Balancer do not have HTTP to HTTPS redirection configured.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "EC2",
      "ELB"
    ]
  },
  "emr-kerberos-enabled": {
    "id": "EMR_KERBEROS_ENABLED",
    "default_name": "emr-kerberos-enabled",
    "description": "The rule is NON_COMPLIANT if a security configuration is not attached to the cluster or the security configuration does not satisfy the specified rule parameters.",
    "parameters": {
      "required": {},
      "optional": {
        "TicketLifetimeInHours": {
          "type": "int",
          "description": "Period for which Kerberos ticket issued by cluster's KDC is valid."
        },
        "Realm": {
          "type": "String",
          "description": "Kereberos realm name of the other realm in the trust relationship."
        },
        "Domain": {
          "type": "String",
          "description": "Domain name of the other realm in the trust relationship."
        },
        "AdminServer": {
          "type": "String",
          "description": "Fully qualified domain of the admin server in the other realm of the trust relationship."
        },
        "KdcServer": {
          "type": "String",
          "description": "Fully qualified domain of the KDC server in the other realm of the trust relationship."
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "EMR",
      "Kerberos"
    ]
  },
  "kms-cmk-not-scheduled-for-deletion": {
    "id": "KMS_CMK_NOT_SCHEDULED_FOR_DELETION",
    "default_name": "kms-cmk-not-scheduled-for-deletion",
    "description": "Checks if AWS Key Management Service (AWS KMS) keys are not scheduled for deletion in AWS KMS. The rule is NON_COMPLAINT if KMS keys are scheduled for deletion.",
    "parameters": {
      "required": {},
      "optional": {
        "kmsKeyIds": {
          "type": "String",
          "description": "(Optional) Comma-separated list of specific customer managed key IDs not to be scheduled for deletion. If you do not specify any keys, the rule checks all the keys."
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": [
          "AWS::KMS::Key"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "Kms"
    ]
  },
  "api-gw-execution-logging-enabled": {
    "id": "API_GW_EXECUTION_LOGGING_ENABLED",
    "default_name": "api-gw-execution-logging-enabled",
    "description": "Checks if all methods in Amazon API Gateway stages have logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if loggingLevel is neither ERROR nor INFO.",
    "parameters": {
      "required": {},
      "optional": {
        "loggingLevel": {
          "type": "String",
          "description": "Comma-separated list of specific logging levels (for example, ERROR, INFO or ERROR,INFO).",
          "defaultValue": "ERROR,INFO"
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ApiGateway::Stage",
          "AWS::ApiGatewayV2::Stage"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "API Gateway",
      "Logging"
    ]
  },
  "elb-deletion-protection-enabled": {
    "id": "ELB_DELETION_PROTECTION_ENABLED",
    "default_name": "elb-deletion-protection-enabled",
    "description": "Checks if an Elastic Load Balancer has deletion protection enabled. The rule is NON_COMPLIANT if deletion_protection.enabled is false.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ElasticLoadBalancingV2::LoadBalancer"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "ALB",
      "NLB",
      "Deletion protection"
    ]
  },
  "internet-gateway-authorized-vpc-only": {
    "id": "INTERNET_GATEWAY_AUTHORIZED_VPC_ONLY",
    "default_name": "internet-gateway-authorized-vpc-only",
    "description": "Checks if internet gateways are attached to an authorized virtual private cloud (Amazon VPC). The rule is NON_COMPLIANT if internet gateways are attached to an unauthorized VPC.",
    "parameters": {
      "required": {},
      "optional": {
        "AuthorizedVpcIds": {
          "type": "String",
          "description": "Comma-separated list of the authorized VPC IDs with attached IGWs. If parameter is not provided all attached IGWs will be NON_COMPLIANT."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::InternetGateway"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "VPC",
      "Internet Gateway"
    ]
  },
  "lambda-concurrency-check": {
    "id": "LAMBDA_CONCURRENCY_CHECK",
    "default_name": "lambda-concurrency-check",
    "description": "Checks if the Lambda function is configured with a function-level concurrent execution limit. The rule is NON_COMPLIANT if the Lambda function is not configured with a function-level concurrent execution limit.",
    "parameters": {
      "required": {},
      "optional": {
        "ConcurrencyLimitLow": {
          "type": "String",
          "description": "Minimum concurrency execution limit"
        },
        "ConcurrencyLimitHigh": {
          "type": "String",
          "description": "Maximum concurrency execution limit"
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::Lambda::Function"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "Lambda"
    ]
  },
  "lambda-dlq-check": {
    "id": "LAMBDA_DLQ_CHECK",
    "default_name": "lambda-dlq-check",
    "description": "Checks if a Lambda function is configured with a dead-letter queue. The rule is NON_COMPLIANT if the Lambda function is not configured with a dead-letter queue.",
    "parameters": {
      "required": {},
      "optional": {
        "dlqArns": {
          "type": "String",
          "description": "Comma-separated list of Amazon SQS and Amazon SNS ARNs that must be configured as the Lambda function dead-letter queue target."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::Lambda::Function"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "SNS",
      "Lambda",
      "SQS",
      "DLQ"
    ]
  },
  "lambda-inside-vpc": {
    "id": "LAMBDA_INSIDE_VPC",
    "default_name": "lambda-inside-vpc",
    "description": "Checks if a Lambda function is allowed access to a virtual private cloud (VPC). The rule is NON_COMPLIANT if the Lambda function is not VPC enabled.",
    "parameters": {
      "required": {},
      "optional": {
        "subnetIds": {
          "type": "String",
          "description": "Comma-separated list of Subnet IDs that Lambda functions can be associated with."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::Lambda::Function"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "VPC",
      "Lambda"
    ]
  },
  "iam-policy-in-use": {
    "id": "IAM_POLICY_IN_USE",
    "default_name": "iam-policy-in-use",
    "description": "Checks whether the IAM policy ARN is attached to an IAM user, or a group with one or more IAM users, or an IAM role with one or more trusted entity.",
    "parameters": {
      "required": {
        "policyARN": {
          "type": "String",
          "description": "An IAM policy ARN to be checked."
        }
      },
      "optional": {
        "policyUsageType": {
          "type": "String",
          "description": "Specify whether you expect the policy to be attached to an IAM user, group or role. Valid values are IAM_USER, IAM_GROUP, IAM_ROLE, or ANY. Default value is ANY."
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "IAM",
      "Periodic"
    ]
  },
  "fms-shield-resource-policy-check": {
    "id": "FMS_SHIELD_RESOURCE_POLICY_CHECK",
    "default_name": "fms-shield-resource-policy-check",
    "description": "Checks whether an Application Load Balancer, Amazon CloudFront distributions, Elastic Load Balancer or Elastic IP has AWS Shield protection. It also checks if they have web ACL associated for Application Load Balancer and Amazon CloudFront distributions.",
    "parameters": {
      "required": {
        "webACLId": {
          "type": "String",
          "description": "The WebACLId of the web ACL."
        },
        "resourceTypes": {
          "type": "String",
          "description": "The resource scope which this config rule will be applied to."
        }
      },
      "optional": {
        "resourceTags": {
          "type": "String",
          "description": "The resource tags that the rule should be associated with (for example, { \"tagKey1\" : [\"tagValue1\"], \"tagKey2\" : [\"tagValue2\", \"tagValue3\"] })."
        },
        "excludeResourceTags": {
          "type": "boolean",
          "description": "If true, exclude the resources that match the resourceTags. If false, include all the resources that match the resourceTags."
        },
        "fmsManagedToken": {
          "type": "String",
          "description": "A token generated by AWS Firewall Manager when creating the rule in your account. AWS Config ignores this parameter when you create this rule."
        },
        "fmsRemediationEnabled": {
          "type": "boolean",
          "description": "If true, AWS Firewall Manager will update NON_COMPLIANT resources according to FMS policy. AWS Config ignores this parameter when you create this rule."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ElasticLoadBalancingV2::LoadBalancer",
          "AWS::WAFRegional::WebACL",
          "AWS::EC2::EIP",
          "AWS::ElasticLoadBalancing::LoadBalancer",
          "AWS::ShieldRegional::Protection"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "FM",
      "FMS",
      "WebACL"
    ]
  },
  "iam-user-mfa-enabled": {
    "id": "IAM_USER_MFA_ENABLED",
    "default_name": "iam-user-mfa-enabled",
    "description": "Checks if the AWS Identity and Access Management (IAM) users have multi-factor authentication (MFA) enabled. The rule is NON_COMPLIANT if MFA is not enabled for at least one IAM user.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "IAM",
      "Periodic"
    ]
  },
  "s3-bucket-policy-grantee-check": {
    "id": "S3_BUCKET_POLICY_GRANTEE_CHECK",
    "default_name": "s3-bucket-policy-grantee-check",
    "description": "Checks that the access granted by the Amazon S3 bucket is restricted to any of the AWS principals, federated users, service principals, IP addresses, or VPCs that you provide. The rule is COMPLIANT if a bucket policy is not present.",
    "parameters": {
      "required": {},
      "optional": {
        "awsPrincipals": {
          "type": "CSV",
          "description": "Comma-separated list of principals such as IAM User ARNs, IAM Role ARNs and AWS accounts, for example 'arn:aws:iam::111122223333:user/Alice, arn:aws:iam::444455556666:role/Bob, 123456789012'."
        },
        "servicePrincipals": {
          "type": "CSV",
          "description": "Comma-separated list of service principals, for example 'cloudtrail.amazonaws.com, lambda.amazonaws.com'."
        },
        "federatedUsers": {
          "type": "CSV",
          "description": "Comma-separated list of identity providers for web identity federation such as Amazon Cognito and SAML identity providers. For example 'cognito-identity.amazonaws.com, arn:aws:iam::111122223333:saml-provider/my-provider'."
        },
        "ipAddresses": {
          "type": "CSV",
          "description": "Comma-separated list of CIDR formatted IP addresses, for example '10.0.0.1, 192.168.1.0/24, 2001:db8::/32'."
        },
        "vpcIds": {
          "type": "CSV",
          "description": "Comma-separated list of Amazon Virtual Private Clouds (Amazon VPC) IDs, for example 'vpc-1234abc0, vpc-ab1234c0'."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::S3::Bucket"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "S3",
      "Zelkova"
    ]
  },
  "codepipeline-deployment-count-check": {
    "id": "CODEPIPELINE_DEPLOYMENT_COUNT_CHECK",
    "default_name": "codepipeline-deployment-count-check",
    "description": "Checks if the first deployment stage of AWS CodePipeline performs more than one deployment. Optionally checks if each of the subsequent remaining stages deploy to more than the specified number of deployments (deploymentLimit).",
    "parameters": {
      "required": {},
      "optional": {
        "deploymentLimit": {
          "type": "int",
          "description": "The maximum number of deployments each stage can perform."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::CodePipeline::Pipeline"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "CodePipeline"
    ]
  },
  "codepipeline-region-fanout-check": {
    "id": "CODEPIPELINE_REGION_FANOUT_CHECK",
    "default_name": "codepipeline-region-fanout-check",
    "description": "Checks whether each stage in the AWS CodePipeline deploys to more regions than N times the number of regions the pipeline has deployed to in all previous stages, where N is regionFanoutFactor. The first deployment stage can deploy to only one region.",
    "parameters": {
      "required": {},
      "optional": {
        "regionFanoutFactor": {
          "type": "int",
          "description": "regionFanoutFactor * the number of regions the AWS CodePipeline has deployed to in all previous stages is the maximum number of regions any stage can deploy to.",
          "defaultValue": "3"
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::CodePipeline::Pipeline"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "CodePipeline"
    ]
  },
  "access-keys-rotated": {
    "id": "ACCESS_KEYS_ROTATED",
    "default_name": "access-keys-rotated",
    "description": "Checks whether the active access keys are rotated within the number of days specified in maxAccessKeyAge. The rule is non-compliant if the access keys have not been rotated for more than maxAccessKeyAge number of days.",
    "parameters": {
      "required": {
        "maxAccessKeyAge": {
          "type": "int",
          "description": "Maximum number of days without rotation. Default 90.",
          "defaultValue": "90"
        }
      },
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": [
          "AWS::IAM::User"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "IAM",
      "Periodic"
    ]
  },
  "mfa-enabled-for-iam-console-access": {
    "id": "MFA_ENABLED_FOR_IAM_CONSOLE_ACCESS",
    "default_name": "mfa-enabled-for-iam-console-access",
    "description": "Checks if AWS multi-factor authentication (MFA) is enabled for all AWS Identity and Access Management (IAM) users that use a console password. The rule is COMPLIANT if MFA is enabled.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "IAM",
      "Periodic"
    ]
  },
  "cmk-backing-key-rotation-enabled": {
    "id": "CMK_BACKING_KEY_ROTATION_ENABLED",
    "default_name": "cmk-backing-key-rotation-enabled",
    "description": "Checks if automatic key rotation is enabled for each key and matches to the key ID of the customer created AWS KMS key. The rule is NON_COMPLIANT if the AWS Config recorder role for a resource does not have the kms:DescribeKey permission.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "kms",
      "Periodic"
    ]
  },
  "iam-role-managed-policy-check": {
    "id": "IAM_ROLE_MANAGED_POLICY_CHECK",
    "default_name": "iam-role-managed-policy-check",
    "description": "Checks that the AWS Identity and Access Management (IAM) role is attached to all AWS managed policies specified in the list of managed policies. The rule is non-compliant if the IAM role is not attached to the AWS managed policy.",
    "parameters": {
      "required": {
        "managedPolicyArns": {
          "type": "CSV",
          "description": "Comma-separated list of AWS managed policy ARNs."
        }
      },
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::IAM::Role"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "IAM"
    ]
  },
  "cloud-trail-cloud-watch-logs-enabled": {
    "id": "CLOUD_TRAIL_CLOUD_WATCH_LOGS_ENABLED",
    "default_name": "cloud-trail-cloud-watch-logs-enabled",
    "description": "Checks if AWS CloudTrail trails are configured to send logs to CloudWatch logs. The trail is NON_COMPLIANT if the CloudWatchLogsLogGroupArn property of the trail is empty.",
    "parameters": {
      "required": {},
      "optional": {
        "expectedDeliveryWindowAge": {
          "type": "int",
          "description": "Maximum age in hours of the most recent delivery to CloudWatch logs that satisfies compliance."
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "CloudTrail",
      "Periodic"
    ]
  },
  "multi-region-cloudtrail-enabled": {
    "id": "MULTI_REGION_CLOUD_TRAIL_ENABLED",
    "default_name": "multi-region-cloudtrail-enabled",
    "description": "Checks that there is at least one multi-region AWS CloudTrail. The rule is non-compliant if the trails do not match input parameters",
    "parameters": {
      "required": {},
      "optional": {
        "s3BucketName": {
          "type": "String",
          "description": "Name of Amazon S3 bucket for AWS CloudTrail to deliver log files to."
        },
        "snsTopicArn": {
          "type": "String",
          "description": "Amazon SNS topic ARN for AWS CloudTrail to use for notifications."
        },
        "cloudWatchLogsLogGroupArn": {
          "type": "String",
          "description": "Amazon CloudWatch log group ARN for AWS CloudTrail to send data to."
        },
        "includeManagementEvents": {
          "type": "boolean",
          "description": "Event selector to include management events for the AWS CloudTrail."
        },
        "readWriteType": {
          "type": "String",
          "description": "Type of events to record. Valid values are ReadOnly, WriteOnly and ALL."
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "CloudTrail",
      "Periodic"
    ]
  },
  "iam-user-unused-credentials-check": {
    "id": "IAM_USER_UNUSED_CREDENTIALS_CHECK",
    "default_name": "iam-user-unused-credentials-check",
    "description": "Checks whether your AWS Identity and Access Management (IAM) users have passwords or active access keys that have not been used within the specified number of days you provided.",
    "parameters": {
      "required": {
        "maxCredentialUsageAge": {
          "type": "int",
          "description": "Maximum number of days a credential cannot be used. The default value is 90 days.",
          "defaultValue": "90"
        }
      },
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "IAM",
      "Periodic"
    ]
  },
  "iam-policy-no-statements-with-admin-access": {
    "id": "IAM_POLICY_NO_STATEMENTS_WITH_ADMIN_ACCESS",
    "default_name": "iam-policy-no-statements-with-admin-access",
    "description": "Checks whether the default version of AWS Identity and Access Management (IAM) policies do not have administrator access. If any statement has \"Effect\": \"Allow\" with \"Action\": \"*\" over \"Resource\": \"*\", the rule is non-compliant.",
    "parameters": {
      "required": {},
      "optional": {
        "excludePermissionBoundaryPolicy": {
          "type": "boolean",
          "description": "Boolean flag to exclude the evaluation of IAM policies used as permissions boundaries. If set to 'true', the rule will not include permissions boundaries in the evaluation. Otherwise, all IAM policies in scope are evaluated when value is set to 'false.' Default value is 'false'."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::IAM::Policy"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "IAM"
    ]
  },
  "vpc-flow-logs-enabled": {
    "id": "VPC_FLOW_LOGS_ENABLED",
    "default_name": "vpc-flow-logs-enabled",
    "description": "Checks if Amazon Virtual Private Cloud (Amazon VPC) flow logs are found and enabled for all Amazon VPCs. The rule is NON_COMPLIANT if flow logs are not enabled for at least one Amazon VPC.",
    "parameters": {
      "required": {},
      "optional": {
        "trafficType": {
          "type": "String",
          "description": "TrafficType of flow logs"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "EC2"
    ]
  },
  "root-account-hardware-mfa-enabled": {
    "id": "ROOT_ACCOUNT_HARDWARE_MFA_ENABLED",
    "default_name": "root-account-hardware-mfa-enabled",
    "description": "Checks whether your AWS account is enabled to use multi-factor authentication (MFA) hardware device to sign in with root credentials.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "IAM",
      "Periodic"
    ]
  },
  "cloud-trail-encryption-enabled": {
    "id": "CLOUD_TRAIL_ENCRYPTION_ENABLED",
    "default_name": "cloud-trail-encryption-enabled",
    "description": "Checks whether AWS CloudTrail is configured to use the server side encryption (SSE) AWS Key Management Service (AWS KMS) customer master key (CMK) encryption. The rule is compliant if the KmsKeyId is defined.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "CloudTrail",
      "Periodic"
    ]
  },
  "cloud-trail-log-file-validation-enabled": {
    "id": "CLOUD_TRAIL_LOG_FILE_VALIDATION_ENABLED",
    "default_name": "cloud-trail-log-file-validation-enabled",
    "description": "Checks if AWS CloudTrail creates a signed digest file with logs. AWS recommends that the file validation must be enabled on all trails. The rule is NON_COMPLIANT if the validation is not enabled.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "CloudTrail",
      "Periodic"
    ]
  },
  "dynamodb-table-encryption-enabled": {
    "id": "DYNAMODB_TABLE_ENCRYPTION_ENABLED",
    "default_name": "dynamodb-table-encryption-enabled",
    "description": "Checks whether the Amazon DynamoDB tables are encrypted and checks their status. The rule is compliant if the status is enabled or enabling.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::DynamoDB::Table"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "DynamoDb"
    ]
  },
  "elb-logging-enabled": {
    "id": "ELB_LOGGING_ENABLED",
    "default_name": "elb-logging-enabled",
    "description": "Checks whether the Application Load Balancers and the Classic Load Balancers have logging enabled.",
    "parameters": {
      "required": {},
      "optional": {
        "s3BucketNames": {
          "type": "CSV",
          "description": "Comma-separated list of Amazon S3 bucket names for Amazon ELB to deliver the log files."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ElasticLoadBalancing::LoadBalancer",
          "AWS::ElasticLoadBalancingV2::LoadBalancer"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "ElasticLoadBalancing",
      "ELB"
    ]
  },
  "ec2-instance-managed-by-systems-manager": {
    "id": "EC2_INSTANCE_MANAGED_BY_SSM",
    "default_name": "ec2-instance-managed-by-systems-manager",
    "description": "Checks if your Amazon EC2 instances are managed by AWS Systems Manager (SSM Agent). The rule is NON_COMPLIANT if the EC2 instance previously associated with an SSM Agent instance inventory becomes unreachable or is not managed by SSM Agent.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::Instance",
          "AWS::SSM::ManagedInstanceInventory"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "EC2",
      "SystemsManager"
    ]
  },
  "ec2-managedinstance-association-compliance-status-check": {
    "id": "EC2_MANAGEDINSTANCE_ASSOCIATION_COMPLIANCE_STATUS_CHECK",
    "default_name": "ec2-managedinstance-association-compliance-status-check",
    "description": "Checks whether the compliance status of the AWS Systems Manager association compliance is COMPLIANT or NON_COMPLIANT after the association execution on the instance. The rule is compliant if the field status is COMPLIANT.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::SSM::AssociationCompliance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "SystemsManager",
      "StateManager"
    ]
  },
  "ec2-managedinstance-patch-compliance-status-check": {
    "id": "EC2_MANAGEDINSTANCE_PATCH_COMPLIANCE_STATUS_CHECK",
    "default_name": "ec2-managedinstance-patch-compliance-status-check",
    "description": "Checks if the compliance status of the AWS Systems Manager patch compliance is COMPLIANT or NON_COMPLIANT after the patch installation on the instance. The rule is compliant if the field status is COMPLIANT.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::SSM::PatchCompliance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "SystemsManager",
      "PatchManager"
    ]
  },
  "guardduty-enabled-centralized": {
    "id": "GUARDDUTY_ENABLED_CENTRALIZED",
    "default_name": "guardduty-enabled-centralized",
    "description": "Checks if Amazon GuardDuty is enabled in your AWS account and AWS Region. If you provide an AWS account for centralization, the rule evaluates the GuardDuty results in the centralized account. The rule is COMPLIANT when GuardDuty is enabled.",
    "parameters": {
      "required": {},
      "optional": {
        "CentralMonitoringAccount": {
          "type": "String",
          "description": "Comma separated list of AWS Accounts (12-digit) where Amazon GuardDuty results are allowed to be centralized.",
          "defaultValue": ""
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "GuardDuty"
    ]
  },
  "rds-snapshots-public-prohibited": {
    "id": "RDS_SNAPSHOTS_PUBLIC_PROHIBITED",
    "default_name": "rds-snapshots-public-prohibited",
    "description": "Checks if Amazon Relational Database Service (Amazon RDS) snapshots are public. The rule is non-compliant if any existing and new Amazon RDS snapshots are public.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBSnapshot",
          "AWS::RDS::DBClusterSnapshot"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "RDS"
    ]
  },
  "s3-bucket-blacklisted-actions-prohibited": {
    "id": "S3_BUCKET_BLACKLISTED_ACTIONS_PROHIBITED",
    "default_name": "s3-bucket-blacklisted-actions-prohibited",
    "description": "Checks that the S3 bucket policy does not allow blacklisted bucket-level and object-level actions for principals from other AWS Accounts. The rule is non-compliant if any blacklisted actions are allowed by the S3 bucket policy.",
    "parameters": {
      "required": {
        "blacklistedActionPattern": {
          "type": "CSV",
          "description": "Comma-separated list of blacklisted action patterns, for example, s3:GetBucket* and s3:DeleteObject."
        }
      },
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::S3::Bucket"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "S3",
      "Zelkova"
    ]
  },
  "s3-bucket-policy-not-more-permissive": {
    "id": "S3_BUCKET_POLICY_NOT_MORE_PERMISSIVE",
    "default_name": "s3-bucket-policy-not-more-permissive",
    "description": "Verifies that your Amazon S3 bucket policies do not allow other inter-account permissions than the control S3 bucket policy that you provide.",
    "parameters": {
      "required": {
        "controlPolicy": {
          "type": "String",
          "description": "Amazon S3 bucket policy that defines an upper bound on the permissions of your S3 buckets. The policy can be a maximum of 1024 characters long."
        }
      },
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::S3::Bucket"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "S3",
      "Zelkova"
    ]
  },
  "iam-root-access-key-check": {
    "id": "IAM_ROOT_ACCESS_KEY_CHECK",
    "default_name": "iam-root-access-key-check",
    "description": "Checks whether the root user access key is available. The rule is compliant if the user access key does not exist.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "IAM",
      "Periodic"
    ]
  },
  "vpc-default-security-group-closed": {
    "id": "VPC_DEFAULT_SECURITY_GROUP_CLOSED",
    "default_name": "vpc-default-security-group-closed",
    "description": "Checks if the default security group of any Amazon Virtual Private Cloud (Amazon VPC) does not allow inbound or outbound traffic. The rule is NON_COMPLIANT if the default security group has one or more inbound or outbound traffic rules.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::SecurityGroup"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "VPC"
    ]
  },
  "rds-instance-public-access-check": {
    "id": "RDS_INSTANCE_PUBLIC_ACCESS_CHECK",
    "default_name": "rds-instance-public-access-check",
    "description": "Checks if the Amazon Relational Database Service (Amazon RDS) instances are not publicly accessible. The rule is NON_COMPLIANT if the publiclyAccessible field is true in the instance configuration item.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBInstance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "RDS"
    ]
  },
  "iam-policy-blacklisted-check": {
    "id": "IAM_POLICY_BLACKLISTED_CHECK",
    "default_name": "iam-policy-blacklisted-check",
    "description": "Checks in each AWS Identity and Access Management (IAM) resource, if a policy Amazon Resource Name (ARN) in the input parameter is attached to the IAM resource. The rule is NON_COMPLIANT if the policy ARN is attached to the IAM resource.",
    "parameters": {
      "required": {
        "policyArns": {
          "type": "CSV",
          "description": "Comma separated list of IAM policy arns which should not be attached to any IAM entity.",
          "defaultValue": "arn:aws:iam::aws:policy/AdministratorAccess"
        }
      },
      "optional": {
        "exceptionList": {
          "type": "CSV",
          "description": "Comma separated list of resourcetypes and list of resource name pairs. (for example, users:[user1;user2], groups:[group1;group2], roles:[role1;role2;role3])."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::IAM::User",
          "AWS::IAM::Group",
          "AWS::IAM::Role"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "IAM"
    ]
  },
  "lambda-function-settings-check": {
    "id": "LAMBDA_FUNCTION_SETTINGS_CHECK",
    "default_name": "lambda-function-settings-check",
    "description": "Checks that the AWS Lambda function settings for runtime, role, timeout, and memory size match the expected values.",
    "parameters": {
      "required": {
        "runtime": {
          "type": "CSV",
          "description": "Comma-separated list of AWS Lambda runtime values"
        }
      },
      "optional": {
        "role": {
          "type": "String",
          "description": "Name or ARN of the AWS Lambda execution role"
        },
        "timeout": {
          "type": "int",
          "description": "AWS Lambda function timeout in seconds",
          "defaultValue": "3"
        },
        "memorySize": {
          "type": "int",
          "description": "AWS Lambda function size in megabytes",
          "defaultValue": "128"
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::Lambda::Function"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "Lambda"
    ]
  },
  "s3-bucket-replication-enabled": {
    "id": "S3_BUCKET_REPLICATION_ENABLED",
    "default_name": "s3-bucket-replication-enabled",
    "description": "Checks if S3 buckets have replication rules enabled. The rule is NON_COMPLIANT if an S3 bucket does not have a replication rule or has a replication rule that is not enabled.",
    "parameters": {
      "required": {},
      "optional": {
        "ReplicationType": {
          "type": "String",
          "description": "Accepted values: 'CROSS-REGION' and 'SAME-REGION'. Enter 'CROSS-REGION' for the rule to check that all buckets have only Cross-Region Replication enabled. Enter 'SAME-REGION' for the rule to check that all buckets have only Same-Region Replication enabled."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::S3::Bucket"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "S3"
    ]
  },
  "cloudformation-stack-drift-detection-check": {
    "id": "CLOUDFORMATION_STACK_DRIFT_DETECTION_CHECK",
    "default_name": "cloudformation-stack-drift-detection-check",
    "description": "Checks whether your CloudFormation stacks' actual configuration differs, or has drifted, from its expected configuration.",
    "parameters": {
      "required": {
        "cloudformationRoleArn": {
          "type": "String",
          "description": "The AWS CloudFormation role ARN with IAM policy permissions to detect drift for AWS CloudFormation Stacks"
        }
      },
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::CloudFormation::Stack"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "CloudFormation"
    ]
  },
  "fms-webacl-resource-policy-check": {
    "id": "FMS_WEBACL_RESOURCE_POLICY_CHECK",
    "default_name": "fms-webacl-resource-policy-check",
    "description": "Checks whether the web ACL is associated with Application Load Balancers, API Gateway stage or CloudFront distributions. When AWS Firewall Manager creates this rule, the FMS policy owner specifies the webACLId in the FMS policy.",
    "parameters": {
      "required": {
        "webACLId": {
          "type": "String",
          "description": "The WebACLId of the web ACL."
        }
      },
      "optional": {
        "resourceTags": {
          "type": "String",
          "description": "The resource tags (ApplicationLoadBalancer, ApiGatewayStage and CloudFront distributions) that the rule should be associated with. (for example, { \"tagKey1\" : [\"tagValue1\"], \"tagKey2\" : [\"tagValue2\", \"tagValue3\"] })"
        },
        "excludeResourceTags": {
          "type": "boolean",
          "description": "If true, exclude resources that match resourceTags."
        },
        "fmsManagedToken": {
          "type": "String",
          "description": "A token generated by AWS Firewall Manager when creating the rule in customer account. AWS Config ignores this parameter when customer creates this rule."
        },
        "fmsRemediationEnabled": {
          "type": "boolean",
          "description": "If true, AWS Firewall Manager will update non-compliant resources according to FMS policy. AWS Config ignores this parameter when customer creates this rule."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ApiGateway::Stage",
          "AWS::ElasticLoadBalancingV2::LoadBalancer",
          "AWS::WAFRegional::WebACL"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "FM",
      "FMS",
      "WebACL"
    ]
  },
  "fms-webacl-rulegroup-association-check": {
    "id": "FMS_WEBACL_RULEGROUP_ASSOCIATION_CHECK",
    "default_name": "fms-webacl-rulegroup-association-check",
    "description": "Checks whether the RuleGroupId and WafOverrideAction pairs are associated with the WebACL at highest priority. When AWS Firewall manager creates this rule, the FMS policy owner specifies the ruleGroups in the policy and can optionally enable remediation.",
    "parameters": {
      "required": {
        "ruleGroups": {
          "type": "String",
          "description": "Comma-separated list of RuleGroupIds and WafOverrideAction pairs. (for example, ruleGroupId-1:NONE, ruleGroupId2:COUNT)"
        }
      },
      "optional": {
        "fmsManagedToken": {
          "type": "String",
          "description": "A token generated by AWS Firewall Manager when creating the rule in customer account. AWS Config ignores this parameter when customer creates this rule."
        },
        "fmsRemediationEnabled": {
          "type": "boolean",
          "description": "If true, AWS Firewall Manager will update non-compliant resources according to FMS policy. AWS Config ignores this parameter when customer creates this rule."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::WAFRegional::WebACL"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "FM",
      "FMS",
      "WebACL"
    ]
  },
  "lambda-function-public-access-prohibited": {
    "id": "LAMBDA_FUNCTION_PUBLIC_ACCESS_PROHIBITED",
    "default_name": "lambda-function-public-access-prohibited",
    "description": "Checks whether the Lambda function policy prohibits public access.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::Lambda::Function"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "Lambda",
      "Zelkova"
    ]
  },
  "codebuild-project-envvar-awscred-check": {
    "id": "CODEBUILD_PROJECT_ENVVAR_AWSCRED_CHECK",
    "default_name": "codebuild-project-envvar-awscred-check",
    "description": "Checks if the project contains environment variables AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY. The rule is NON_COMPLIANT when the project environment variables contains plaintext credentials.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::CodeBuild::Project"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "CodeBuild"
    ]
  },
  "codebuild-project-source-repo-url-check": {
    "id": "CODEBUILD_PROJECT_SOURCE_REPO_URL_CHECK",
    "default_name": "codebuild-project-source-repo-url-check",
    "description": "Checks if the Bitbucket source repository URL contains sign-in credentials or not. The rule is NON_COMPLIANT if the URL contains any sign-in information and COMPLIANT if it doesn't.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::CodeBuild::Project"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "CodeBuild"
    ]
  },
  "elb-acm-certificate-required": {
    "id": "ELB_ACM_CERTIFICATE_REQUIRED",
    "default_name": "elb-acm-certificate-required",
    "description": "This rule checks whether the Elastic Load Balancer(s) uses SSL certificates provided by AWS Certificate Manager. You must use an SSL or HTTPS listener with your Elastic Load Balancer to use this rule.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ElasticLoadBalancing::LoadBalancer"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "ElasticLoadBalancing"
    ]
  },
  "elb-custom-security-policy-ssl-check": {
    "id": "ELB_CUSTOM_SECURITY_POLICY_SSL_CHECK",
    "default_name": "elb-custom-security-policy-ssl-check",
    "description": "Checks whether your Classic Load Balancer SSL listeners are using a custom policy. The rule is only applicable if there are SSL listeners for the Classic Load Balancer.",
    "parameters": {
      "required": {
        "sslProtocolsAndCiphers": {
          "type": "String",
          "description": "Comma separated list of ciphers and protocols."
        }
      },
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ElasticLoadBalancing::LoadBalancer"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "ElasticLoadBalancing"
    ]
  },
  "elb-predefined-security-policy-ssl-check": {
    "id": "ELB_PREDEFINED_SECURITY_POLICY_SSL_CHECK",
    "default_name": "elb-predefined-security-policy-ssl-check",
    "description": "Checks if your Classic Load Balancer SSL listeners use a predefined policy. The rule is NON_COMPLIANT if the Classic Load Balancer HTTPS/SSL listener's policy does not equal the value of the parameter 'predefinedPolicyName'.",
    "parameters": {
      "required": {
        "predefinedPolicyName": {
          "type": "String",
          "description": "Name of the predefined policy."
        }
      },
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ElasticLoadBalancing::LoadBalancer"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "ElasticLoadBalancing"
    ]
  },
  "iam-group-has-users-check": {
    "id": "IAM_GROUP_HAS_USERS_CHECK",
    "default_name": "iam-group-has-users-check",
    "description": "Checks whether IAM groups have at least one IAM user.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::IAM::Group"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": null
  },
  "s3-bucket-server-side-encryption-enabled": {
    "id": "S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED",
    "default_name": "s3-bucket-server-side-encryption-enabled",
    "description": "Checks if S3 buckets have default encryption enabled or have bucket policies that explicitly deny put-object requests without server side encryption using AES-256 or AWS KMS. The rule is NON_COMPLIANT if an S3 bucket is not encrypted by default.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::S3::Bucket"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "S3",
      "Zelkova"
    ]
  },
  "autoscaling-group-elb-healthcheck-required": {
    "id": "AUTOSCALING_GROUP_ELB_HEALTHCHECK_REQUIRED",
    "default_name": "autoscaling-group-elb-healthcheck-required",
    "description": "Checks if your Amazon EC2 Auto Scaling groups that are associated with a Classic Load Balancer use Elastic Load Balancing health checks. The rule is NON_COMPLIANT if the Amazon EC2 Auto Scaling groups are not using Elastic Load Balancing health checks.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::AutoScaling::AutoScalingGroup"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "AutoScaling"
    ]
  },
  "dynamodb-autoscaling-enabled": {
    "id": "DYNAMODB_AUTOSCALING_ENABLED",
    "default_name": "dynamodb-autoscaling-enabled",
    "description": "Checks if Amazon DynamoDB tables or global secondary indexes can process read/write capacity using on-demand mode or provisioned mode with auto scaling enabled. The rule is NON_COMPLIANT if either mode is used without auto scaling enabled",
    "parameters": {
      "required": {},
      "optional": {
        "minProvisionedReadCapacity": {
          "type": "int",
          "description": "Minimum provisioned capacity."
        },
        "maxProvisionedReadCapacity": {
          "type": "int",
          "description": "Maximum provisioned capacity."
        },
        "targetReadUtilization": {
          "type": "double",
          "description": "Target utilization of read capacity"
        },
        "minProvisionedWriteCapacity": {
          "type": "int",
          "description": "Minimum provisioned capacity."
        },
        "maxProvisionedWriteCapacity": {
          "type": "int",
          "description": "Maximum provisioned capacity."
        },
        "targetWriteUtilization": {
          "type": "double",
          "description": "Target utilization of write capacity"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": {
        "resource_types": [
          "AWS::DynamoDB::Table"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "DynamoDb",
      "Periodic"
    ]
  },
  "s3-bucket-public-read-prohibited": {
    "id": "S3_BUCKET_PUBLIC_READ_PROHIBITED",
    "default_name": "s3-bucket-public-read-prohibited",
    "description": "Checks that your Amazon S3 buckets do not allow public read access. The rule checks the Block Public Access settings, the bucket policy, and the bucket access control list (ACL).",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::S3::Bucket"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "S3",
      "Zelkova"
    ]
  },
  "s3-bucket-public-write-prohibited": {
    "id": "S3_BUCKET_PUBLIC_WRITE_PROHIBITED",
    "default_name": "s3-bucket-public-write-prohibited",
    "description": "Checks that your Amazon S3 buckets do not allow public write access. The rule checks the Block Public Access settings, the bucket policy, and the bucket access control list (ACL).",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::S3::Bucket"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "S3",
      "Zelkova"
    ]
  },
  "cloudformation-stack-notification-check": {
    "id": "CLOUDFORMATION_STACK_NOTIFICATION_CHECK",
    "default_name": "cloudformation-stack-notification-check",
    "description": "Checks if your CloudFormation stacks send event notifications to an Amazon SNS topic. Optionally checks if specified Amazon SNS topics are used. The rule is NON_COMPLIANT if CloudFormation stacks do not send notifications.",
    "parameters": {
      "required": {},
      "optional": {
        "snsTopic1": {
          "type": "String",
          "description": "SNS Topic ARN."
        },
        "snsTopic2": {
          "type": "String",
          "description": "SNS Topic ARN."
        },
        "snsTopic3": {
          "type": "String",
          "description": "SNS Topic ARN."
        },
        "snsTopic4": {
          "type": "String",
          "description": "SNS Topic ARN."
        },
        "snsTopic5": {
          "type": "String",
          "description": "SNS Topic ARN."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::CloudFormation::Stack"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "CloudFormation"
    ]
  },
  "cloudwatch-alarm-action-check": {
    "id": "CLOUDWATCH_ALARM_ACTION_CHECK",
    "default_name": "cloudwatch-alarm-action-check",
    "description": "Checks if CloudWatch alarms have an action configured for the ALARM, INSUFFICIENT_DATA, or OK state. Optionally checks if any actions match a named ARN. The rule is NON_COMPLIANT if there is no action specified for the alarm or optional parameter.",
    "parameters": {
      "required": {
        "alarmActionRequired": {
          "type": "String",
          "description": "Alarms have at least one action.",
          "defaultValue": "true"
        },
        "insufficientDataActionRequired": {
          "type": "String",
          "description": "Alarms have at least one action when the alarm transitions to the INSUFFICIENT_DATA state from any other state.",
          "defaultValue": "true"
        },
        "okActionRequired": {
          "type": "String",
          "description": "Alarms have at least one action when the alarm transitions to an OK state from any other state.",
          "defaultValue": "false"
        }
      },
      "optional": {
        "action1": {
          "type": "String",
          "description": "The action to execute, specified as an ARN."
        },
        "action2": {
          "type": "String",
          "description": "The action to execute, specified as an ARN."
        },
        "action3": {
          "type": "String",
          "description": "The action to execute, specified as an ARN."
        },
        "action4": {
          "type": "String",
          "description": "The action to execute, specified as an ARN."
        },
        "action5": {
          "type": "String",
          "description": "The action to execute, specified as an ARN."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::CloudWatch::Alarm"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "CloudWatch"
    ]
  },
  "cloudwatch-alarm-resource-check": {
    "id": "CLOUDWATCH_ALARM_RESOURCE_CHECK",
    "default_name": "cloudwatch-alarm-resource-check",
    "description": "Checks if a resource type has a CloudWatch alarm for the named metric. For resource type, you can specify EBS volumes, EC2 instances, Amazon RDS clusters, or S3 buckets. The rule is COMPLIANT if the named metric has a resource ID and CloudWatch alarm.",
    "parameters": {
      "required": {
        "resourceType": {
          "type": "String",
          "description": "AWS resource type. The value can be one of the following: AWS::EC2::Volume, AWS::EC2::Instance, AWS::RDS::DBCluster, or AWS::S3::Bucket."
        },
        "metricName": {
          "type": "String",
          "description": "The name for the metric associated with the alarm (for example, 'CPUUtilization' for EC2 instances)."
        }
      },
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "CloudWatch"
    ]
  },
  "cloudwatch-alarm-settings-check": {
    "id": "CLOUDWATCH_ALARM_SETTINGS_CHECK",
    "default_name": "cloudwatch-alarm-settings-check",
    "description": "Checks whether CloudWatch alarms with the given metric name have the specified settings.",
    "parameters": {
      "required": {
        "metricName": {
          "type": "String",
          "description": "The name for the metric associated with the alarm."
        }
      },
      "optional": {
        "threshold": {
          "type": "int",
          "description": "The value against which the specified statistic is compared."
        },
        "evaluationPeriods": {
          "type": "int",
          "description": "The number of periods over which data is compared to the specified threshold."
        },
        "period": {
          "type": "int",
          "description": "The period, in seconds, during which the specified statistic is applied.",
          "defaultValue": "300"
        },
        "comparisonOperator": {
          "type": "String",
          "description": "The operation for comparing the specified statistic and threshold (for example, 'GreaterThanThreshold')."
        },
        "statistic": {
          "type": "String",
          "description": "The statistic for the metric associated with the alarm (for example, 'Average' or 'Sum')."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::CloudWatch::Alarm"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "CloudWatch"
    ]
  },
  "acm-certificate-expiration-check": {
    "id": "ACM_CERTIFICATE_EXPIRATION_CHECK",
    "default_name": "acm-certificate-expiration-check",
    "description": "Checks whether ACM Certificates in your account are marked for expiration within the specified number of days. Certificates provided by ACM are automatically renewed. ACM does not automatically renew certificates that you import.",
    "parameters": {
      "required": {},
      "optional": {
        "daysToExpiration": {
          "type": "int",
          "description": "Specify the number of days before the rule flags the ACM Certificate as noncompliant.",
          "defaultValue": "14"
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ACM::Certificate"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "ACM"
    ]
  },
  "iam-user-group-membership-check": {
    "id": "IAM_USER_GROUP_MEMBERSHIP_CHECK",
    "default_name": "iam-user-group-membership-check",
    "description": "Checks whether IAM users are members of at least one IAM group.",
    "parameters": {
      "required": {},
      "optional": {
        "groupNames": {
          "type": "String",
          "description": "Comma separated list of IAM groups in which IAM users must be members."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::IAM::User"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "IAM"
    ]
  },
  "ec2-instance-detailed-monitoring-enabled": {
    "id": "EC2_INSTANCE_DETAILED_MONITORING_ENABLED",
    "default_name": "ec2-instance-detailed-monitoring-enabled",
    "description": "Checks whether detailed monitoring is enabled for EC2 instances.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::Instance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "EC2"
    ]
  },
  "ec2-managedinstance-inventory-blacklisted": {
    "id": "EC2_MANAGEDINSTANCE_INVENTORY_BLACKLISTED",
    "default_name": "ec2-managedinstance-inventory-blacklisted",
    "description": "Checks whether instances managed by Amazon EC2 Systems Manager are configured to collect blacklisted inventory types.",
    "parameters": {
      "required": {
        "inventoryNames": {
          "type": "CSV",
          "description": "Comma separated list of Systems Manager inventory types (for example, 'AWS:Network, AWS:WindowsUpdate')."
        }
      },
      "optional": {
        "platformType": {
          "type": "String",
          "description": "Platform type (for example, 'Linux')."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::SSM::ManagedInstanceInventory"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "SystemsManager"
    ]
  },
  "ec2-volume-inuse-check": {
    "id": "EC2_VOLUME_INUSE_CHECK",
    "default_name": "ec2-volume-inuse-check",
    "description": "Checks whether EBS volumes are attached to EC2 instances.",
    "parameters": {
      "required": {},
      "optional": {
        "deleteOnTermination": {
          "type": "boolean",
          "description": "EBS volumes are marked for deletion when an instance is terminated."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::Volume"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "EC2"
    ]
  },
  "iam-user-no-policies-check": {
    "id": "IAM_USER_NO_POLICIES_CHECK",
    "default_name": "iam-user-no-policies-check",
    "description": "Checks if none of your AWS Identity and Access Management (IAM) users have policies attached. IAM users must inherit permissions from IAM groups or roles. The rule is NON_COMPLIANT if there is at least one IAM user with policies attached.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::IAM::User"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "IAM"
    ]
  },
  "s3-bucket-ssl-requests-only": {
    "id": "S3_BUCKET_SSL_REQUESTS_ONLY",
    "default_name": "s3-bucket-ssl-requests-only",
    "description": "Checks if S3 buckets have policies that require requests to use SSL/TLS. The rule is NON_COMPLIANT if any S3 bucket has policies allowing HTTP requests.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::S3::Bucket"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "S3",
      "Zelkova"
    ]
  },
  "ec2-managedinstance-applications-blacklisted": {
    "id": "EC2_MANAGEDINSTANCE_APPLICATIONS_BLACKLISTED",
    "default_name": "ec2-managedinstance-applications-blacklisted",
    "description": "Checks that none of the specified applications are installed on the instance. Optionally, specify the version. Newer versions will not be blacklisted. Optionally, specify the platform to apply the rule only to instances running that platform.",
    "parameters": {
      "required": {
        "applicationNames": {
          "type": "CSV",
          "description": "Comma-separated list of application names. Optionally, specify versions appended with ':' (for example, 'Chrome:0.5.3, Firefox')."
        }
      },
      "optional": {
        "platformType": {
          "type": "String",
          "description": "Platform type (for example, 'Linux')."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::SSM::ManagedInstanceInventory"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "SystemsManager"
    ]
  },
  "ec2-managedinstance-applications-required": {
    "id": "EC2_MANAGEDINSTANCE_APPLICATIONS_REQUIRED",
    "default_name": "ec2-managedinstance-applications-required",
    "description": "Checks whether all of the specified applications are installed on the instance. Optionally, specify the minimum acceptable version. Optionally, specify the platform to apply the rule only to instances running that platform.",
    "parameters": {
      "required": {
        "applicationNames": {
          "type": "CSV",
          "description": "Comma-separated list of application names. Optionally, specify versions appended with ':' (for example, 'Chrome:0.5.3, Firefox')."
        }
      },
      "optional": {
        "platformType": {
          "type": "String",
          "description": "Platform type (for example, 'Linux')."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::SSM::ManagedInstanceInventory"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "SystemsManager"
    ]
  },
  "ec2-managedinstance-platform-check": {
    "id": "EC2_MANAGEDINSTANCE_PLATFORM_CHECK",
    "default_name": "ec2-managedinstance-platform-check",
    "description": "Checks whether EC2 managed instances have the desired configurations.",
    "parameters": {
      "required": {
        "platformType": {
          "type": "String",
          "description": "Platform type (for example, 'Linux')."
        }
      },
      "optional": {
        "platformVersion": {
          "type": "String",
          "description": "Platform version (for example, '2016.09')."
        },
        "agentVersion": {
          "type": "String",
          "description": "Agent version (for example, '2.0.433.0')."
        },
        "platformName": {
          "type": "String",
          "description": "The version of the platform (for example, '2016.09')"
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::SSM::ManagedInstanceInventory"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "SystemsManager"
    ]
  },
  "redshift-cluster-configuration-check": {
    "id": "REDSHIFT_CLUSTER_CONFIGURATION_CHECK",
    "default_name": "redshift-cluster-configuration-check",
    "description": "Checks if Amazon Redshift clusters have the specified settings. The rule is NON_COMPLIANT if the Amazon Redshift cluster is not encrypted or encrypted with another key, or if a cluster does not have audit logging enabled.",
    "parameters": {
      "required": {
        "clusterDbEncrypted": {
          "type": "boolean",
          "description": "Database encryption is enabled.",
          "defaultValue": "true"
        },
        "loggingEnabled": {
          "type": "boolean",
          "description": "Audit logging is enabled.",
          "defaultValue": "true"
        }
      },
      "optional": {
        "nodeTypes": {
          "type": "CSV",
          "description": "Specify node type.",
          "defaultValue": "dc1.large"
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::Redshift::Cluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "Redshift"
    ]
  },
  "redshift-cluster-maintenancesettings-check": {
    "id": "REDSHIFT_CLUSTER_MAINTENANCESETTINGS_CHECK",
    "default_name": "redshift-cluster-maintenancesettings-check",
    "description": "Checks if Amazon Redshift clusters have the specified maintenance settings. The rule is NON_COMPLIANT if the automatic upgrades to major version is disabled.",
    "parameters": {
      "required": {
        "allowVersionUpgrade": {
          "type": "boolean",
          "description": "Allow version upgrade is enabled.",
          "defaultValue": "true"
        }
      },
      "optional": {
        "preferredMaintenanceWindow": {
          "type": "String",
          "description": "Scheduled maintenance window for clusters (for example, Mon:09:30-Mon:10:00)."
        },
        "automatedSnapshotRetentionPeriod": {
          "type": "int",
          "description": "Number of days to retain automated snapshots.",
          "defaultValue": "1"
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::Redshift::Cluster"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "Redshift"
    ]
  },
  "s3-bucket-logging-enabled": {
    "id": "S3_BUCKET_LOGGING_ENABLED",
    "default_name": "s3-bucket-logging-enabled",
    "description": "Checks if logging is enabled for your S3 buckets. The rule is NON_COMPLIANT if logging is not enabled.",
    "parameters": {
      "required": {},
      "optional": {
        "targetBucket": {
          "type": "String",
          "description": "Target S3 bucket for storing server access logs."
        },
        "targetPrefix": {
          "type": "String",
          "description": "Prefix of the S3 bucket for storing server access logs."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::S3::Bucket"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "S3"
    ]
  },
  "s3-bucket-versioning-enabled": {
    "id": "S3_BUCKET_VERSIONING_ENABLED",
    "default_name": "s3-bucket-versioning-enabled",
    "description": "Checks whether versioning is enabled for your S3 buckets.",
    "parameters": {
      "required": {},
      "optional": {
        "isMfaDeleteEnabled": {
          "type": "String",
          "description": "MFA delete is enabled for your S3 buckets."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::S3::Bucket"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "S3"
    ]
  },
  "dynamodb-throughput-limit-check": {
    "id": "DYNAMODB_THROUGHPUT_LIMIT_CHECK",
    "default_name": "dynamodb-throughput-limit-check",
    "description": "Checks whether provisioned DynamoDB throughput is approaching the maximum limit for your account.",
    "parameters": {
      "required": {},
      "optional": {
        "accountRCUThresholdPercentage": {
          "type": "int",
          "description": "Percentage of provisioned read capacity units for your account. When this value is reached, the rule is marked as noncompliant.",
          "defaultValue": "80"
        },
        "accountWCUThresholdPercentage": {
          "type": "int",
          "description": "Percentage of provisioned write capacity units for your account. When this value is reached, the rule is marked as noncompliant.",
          "defaultValue": "80"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "DynamoDb",
      "Periodic"
    ]
  },
  "approved-amis-by-id": {
    "id": "APPROVED_AMIS_BY_ID",
    "default_name": "approved-amis-by-id",
    "description": "Checks if running EC2 instances are using specified Amazon Machine Images (AMIs). Specify a list of approved AMI IDs. Running instances with AMIs that are not on this list are NON_COMPLIANT.",
    "parameters": {
      "required": {
        "amiIds": {
          "type": "CSV",
          "description": "Specify AMI IDs (comma separated list of up to 10)."
        }
      },
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::Instance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "EC2"
    ]
  },
  "approved-amis-by-tag": {
    "id": "APPROVED_AMIS_BY_TAG",
    "default_name": "approved-amis-by-tag",
    "description": "Checks if running instances are using specified Amazon Machine Images (AMIs). Specify the tags that identify the AMIs. Running instances with AMIs that don't have at least one of the specified tags are NON_COMPLIANT.",
    "parameters": {
      "required": {
        "amisByTagKeyAndValue": {
          "type": "StringMap",
          "description": "Specify AMIs by tag (comma separated list up to 10; for example, 'tag-key:tag-value').",
          "defaultValue": "tag-key:tag-value,other-tag-key"
        }
      },
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::Instance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "EC2"
    ]
  },
  "db-instance-backup-enabled": {
    "id": "DB_INSTANCE_BACKUP_ENABLED",
    "default_name": "db-instance-backup-enabled",
    "description": "Checks whether RDS DB instances have backups enabled.",
    "parameters": {
      "required": {},
      "optional": {
        "backupRetentionPeriod": {
          "type": "int",
          "description": "Retention period for backups."
        },
        "backupRetentionMinimum": {
          "type": "int",
          "description": "Minimum retention period for backups."
        },
        "preferredBackupWindow": {
          "type": "String",
          "description": "Time range in which backups are created."
        },
        "checkReadReplicas": {
          "type": "boolean",
          "description": "Checks whether RDS DB instances have backups enabled for read replicas."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBInstance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "RDS"
    ]
  },
  "desired-instance-type": {
    "id": "DESIRED_INSTANCE_TYPE",
    "default_name": "desired-instance-type",
    "description": "Checks if your EC2 instances are of a specific instance type. The rule is NON_COMPLIANT if an EC2 instance is not specified in the parameter list. For a list of supported EC2 instance types, see Instance types in the EC2 User Guide for Linux Instances.",
    "parameters": {
      "required": {
        "instanceType": {
          "type": "CSV",
          "description": "Comma separated list of EC2 instance types (for example, 't2.small, m4.large')."
        }
      },
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::Instance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "EC2"
    ]
  },
  "ebs-optimized-instance": {
    "id": "EBS_OPTIMIZED_INSTANCE",
    "default_name": "ebs-optimized-instance",
    "description": "Checks if Amazon EBS optimization is enabled for your Amazon Elastic Compute Cloud (Amazon EC2) instances that can be Amazon EBS-optimized. The rule is NON_COMPLIANT if EBS optimization is not enabled for an Amazon EC2 instance that can be EBS-optimized.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::Instance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "EC2"
    ]
  },
  "iam-password-policy": {
    "id": "IAM_PASSWORD_POLICY",
    "default_name": "iam-password-policy",
    "description": "Checks if the account password policy for AWS Identity and Access Management (IAM) users meets the specified requirements indicated in the parameters. The rule is NON_COMPLIANT if the account password policy does not meet the specified requirements.",
    "parameters": {
      "required": {},
      "optional": {
        "RequireUppercaseCharacters": {
          "type": "boolean",
          "description": "Require at least one uppercase character in password.",
          "defaultValue": "true"
        },
        "RequireLowercaseCharacters": {
          "type": "boolean",
          "description": "Require at least one lowercase character in password.",
          "defaultValue": "true"
        },
        "RequireSymbols": {
          "type": "boolean",
          "description": "Require at least one symbol in password.",
          "defaultValue": "true"
        },
        "RequireNumbers": {
          "type": "boolean",
          "description": "Require at least one number in password.",
          "defaultValue": "true"
        },
        "MinimumPasswordLength": {
          "type": "int",
          "description": "Password minimum length.",
          "defaultValue": "14"
        },
        "PasswordReusePrevention": {
          "type": "int",
          "description": "Number of passwords before allowing reuse.",
          "defaultValue": "24"
        },
        "MaxPasswordAge": {
          "type": "int",
          "description": "Number of days before password expiration.",
          "defaultValue": "90"
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "IAM",
      "Periodic"
    ]
  },
  "rds-multi-az-support": {
    "id": "RDS_MULTI_AZ_SUPPORT",
    "default_name": "rds-multi-az-support",
    "description": "Checks whether high availability is enabled for your RDS DB instances.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBInstance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "RDS"
    ]
  },
  "rds-storage-encrypted": {
    "id": "RDS_STORAGE_ENCRYPTED",
    "default_name": "rds-storage-encrypted",
    "description": "Checks if storage encryption is enabled for your Amazon Relational Database Service (Amazon RDS) DB instances. The rule is NON_COMPLIANT if storage encryption is not enabled.",
    "parameters": {
      "required": {},
      "optional": {
        "kmsKeyId": {
          "type": "String",
          "description": "KMS key ID or ARN used to encrypt the stosrage."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::RDS::DBInstance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "RDS"
    ]
  },
  "cloudtrail-enabled": {
    "id": "CLOUD_TRAIL_ENABLED",
    "default_name": "cloudtrail-enabled",
    "description": "Checks if an AWS CloudTrail trail is enabled in your AWS account. The rule is NON_COMPLIANT if a trail is not enabled. Optionally, the rule checks a specific S3 bucket, Amazon Simple Notification Service (Amazon SNS) topic, and CloudWatch log group.",
    "parameters": {
      "required": {},
      "optional": {
        "s3BucketName": {
          "type": "String",
          "description": "Name of S3 bucket for CloudTrail to deliver log files to."
        },
        "snsTopicArn": {
          "type": "String",
          "description": "SNS topic ARN for CloudTrail to use for notifications."
        },
        "cloudWatchLogsLogGroupArn": {
          "type": "String",
          "description": "CloudWatch log group ARN for CloudTrail to send data to."
        }
      }
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "CloudTrail",
      "Periodic"
    ]
  },
  "desired-instance-tenancy": {
    "id": "DESIRED_INSTANCE_TENANCY",
    "default_name": "desired-instance-tenancy",
    "description": "Checks EC2 instances for a 'tenancy' value. Also checks if AMI IDs are specified to be launched from those AMIs or if Host IDs are launched on those Dedicated Hosts. The rule is COMPLIANT if the instance matches a host and an AMI, if specified, in a list.",
    "parameters": {
      "required": {
        "tenancy": {
          "type": "String",
          "description": "Desired tenancy of the instances. Valid values are DEDICATED, HOST and DEFAULT."
        }
      },
      "optional": {
        "imageId": {
          "type": "CSV",
          "description": "The rule evaluates instances launched only from AMIs with the specified IDs. Separate multiple AMI IDs with commas."
        },
        "hostId": {
          "type": "CSV",
          "description": "The IDs of the EC2 Dedicated Hosts on which the instances are meant to be launched. Separate multiple Host IDs with commas."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::Instance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "EC2"
    ]
  },
  "eip-attached": {
    "id": "EIP_ATTACHED",
    "default_name": "eip-attached",
    "description": "Checks if all Elastic IP addresses that are allocated to an AWS account are attached to EC2 instances or in-use elastic network interfaces. The rule is NON_COMPLIANT if the 'AssociationId' is null for the Elastic IP address.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::EIP"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "EC2"
    ]
  },
  "encrypted-volumes": {
    "id": "ENCRYPTED_VOLUMES",
    "default_name": "encrypted-volumes",
    "description": "Checks if attached Amazon EBS volumes are encrypted and optionally are encrypted with a specified KMS key. The rule is NON_COMPLIANT if attached EBS volumes are unencrypted or are encrypted with a KMS key not in the supplied parameters.",
    "parameters": {
      "required": {},
      "optional": {
        "kmsId": {
          "type": "String",
          "description": "ID or ARN of the KMS key that is used to encrypt the volume."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::Volume"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "EC2"
    ]
  },
  "restricted-ssh": {
    "id": "INCOMING_SSH_DISABLED",
    "default_name": "restricted-ssh",
    "description": "Checks whether security groups that are in use disallow unrestricted incoming SSH traffic.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::SecurityGroup"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "EC2"
    ]
  },
  "ec2-instances-in-vpc": {
    "id": "INSTANCES_IN_VPC",
    "default_name": "ec2-instances-in-vpc",
    "description": "Checks whether your EC2 instances belong to a virtual private cloud (VPC).",
    "parameters": {
      "required": {},
      "optional": {
        "vpcId": {
          "type": "String",
          "description": "VPC ID that contains these EC2 instances."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::Instance"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "EC2"
    ]
  },
  "required-tags": {
    "id": "REQUIRED_TAGS",
    "default_name": "required-tags",
    "description": "Checks whether your resources have the tags that you specify.",
    "parameters": {
      "required": {
        "tag1Key": {
          "type": "String",
          "description": "Key of the required tag.",
          "defaultValue": "CostCenter"
        }
      },
      "optional": {
        "tag1Value": {
          "type": "CSV",
          "description": "Optional value of the required tag. Separate multiple values with commas."
        },
        "tag2Key": {
          "type": "String",
          "description": "Key of a second required tag."
        },
        "tag2Value": {
          "type": "CSV",
          "description": "Optional value of the second required tag. Separate multiple values with commas."
        },
        "tag3Key": {
          "type": "String",
          "description": "Key of a third required tag."
        },
        "tag3Value": {
          "type": "CSV",
          "description": "Optional value of the third required tag. Separate multiple values with commas."
        },
        "tag4Key": {
          "type": "String",
          "description": "Key of a fourth required tag."
        },
        "tag4Value": {
          "type": "CSV",
          "description": "Optional value of the fourth required tag. Separate multiple values with commas."
        },
        "tag5Key": {
          "type": "String",
          "description": "Key of a fifth required tag."
        },
        "tag5Value": {
          "type": "CSV",
          "description": "Optional value of the fifth required tag. Separate multiple values with commas."
        },
        "tag6Key": {
          "type": "String",
          "description": "Key of a sixth required tag."
        },
        "tag6Value": {
          "type": "CSV",
          "description": "Optional value of the sixth required tag. Separate multiple values with commas."
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::ACM::Certificate",
          "AWS::AutoScaling::AutoScalingGroup",
          "AWS::CloudFormation::Stack",
          "AWS::CodeBuild::Project",
          "AWS::DynamoDB::Table",
          "AWS::EC2::CustomerGateway",
          "AWS::EC2::Instance",
          "AWS::EC2::InternetGateway",
          "AWS::EC2::NetworkAcl",
          "AWS::EC2::NetworkInterface",
          "AWS::EC2::RouteTable",
          "AWS::EC2::SecurityGroup",
          "AWS::EC2::Subnet",
          "AWS::EC2::Volume",
          "AWS::EC2::VPC",
          "AWS::EC2::VPNConnection",
          "AWS::EC2::VPNGateway",
          "AWS::ElasticLoadBalancing::LoadBalancer",
          "AWS::ElasticLoadBalancingV2::LoadBalancer",
          "AWS::RDS::DBInstance",
          "AWS::RDS::DBSecurityGroup",
          "AWS::RDS::DBSnapshot",
          "AWS::RDS::DBSubnetGroup",
          "AWS::RDS::EventSubscription",
          "AWS::Redshift::Cluster",
          "AWS::Redshift::ClusterParameterGroup",
          "AWS::Redshift::ClusterSecurityGroup",
          "AWS::Redshift::ClusterSnapshot",
          "AWS::Redshift::ClusterSubnetGroup",
          "AWS::S3::Bucket"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": false,
      "max_frequency": null
    },
    "labels": [
      "AWS"
    ]
  },
  "restricted-common-ports": {
    "id": "RESTRICTED_INCOMING_TRAFFIC",
    "default_name": "restricted-common-ports",
    "description": "Checks if the security groups in use do not allow unrestricted incoming Transmission Control Protocol (TCP) traffic to the specified ports for IPv4. The rule is COMPLIANT if IP addresses for inbound TCP connections are restricted to the specified ports.",
    "parameters": {
      "required": {},
      "optional": {
        "blockedPort1": {
          "type": "int",
          "description": "Blocked TCP port number.",
          "defaultValue": "20"
        },
        "blockedPort2": {
          "type": "int",
          "description": "Blocked TCP port number.",
          "defaultValue": "21"
        },
        "blockedPort3": {
          "type": "int",
          "description": "Blocked TCP port number.",
          "defaultValue": "3389"
        },
        "blockedPort4": {
          "type": "int",
          "description": "Blocked TCP port number.",
          "defaultValue": "3306"
        },
        "blockedPort5": {
          "type": "int",
          "description": "Blocked TCP port number.",
          "defaultValue": "4333"
        },
        "blockedPorts": {
          "type": "CSV",
          "description": "Comma-separated list of blocked TCP port numbers. For example, 20,210,3306,3389,4333"
        }
      }
    },
    "trigger_by_change": {
      "enabled": true,
      "scope": {
        "resource_types": [
          "AWS::EC2::SecurityGroup"
        ]
      }
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "EC2"
    ]
  },
  "root-account-mfa-enabled": {
    "id": "ROOT_ACCOUNT_MFA_ENABLED",
    "default_name": "root-account-mfa-enabled",
    "description": "Checks if the root user of your AWS account requires multi-factor authentication for console sign-in. The rule is NON_COMPLIANT if the AWS Identity and Access Management (IAM) root account user does not have multi-factor authentication (MFA) enabled.",
    "parameters": {
      "required": {},
      "optional": {}
    },
    "trigger_by_change": {
      "enabled": false,
      "scope": null
    },
    "trigger_by_schedule": {
      "enabled": true,
      "max_frequency": "24h"
    },
    "labels": [
      "IAM",
      "Periodic"
    ]
  }
}
